// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
import * as tslib_1 from "tslib";
import { Injectable, RendererStyleFlags2 } from '@angular/core';
import { EventManager, ɵDomRendererFactory2, ɵDomSharedStylesHost } from '@angular/platform-browser';
import { Disguise } from './components/Disguise';
import { ReactContent } from './react-content';
import { isReactNode, ReactNode } from './react-node';
import { registerElement } from './registry';
import './geteventlisteners';
var DEBUG = false;
var AngularReactRendererFactory = /** @class */ (function (_super) {
    tslib_1.__extends(AngularReactRendererFactory, _super);
    function AngularReactRendererFactory(eventManager, sharedStylesHost) {
        var _this = _super.call(this, eventManager, sharedStylesHost, 'app-id') || this;
        // Collection of ReactNodes that can be evaluated and flushed at the
        // end of Render.  This is necessary as the flow of element creation
        // and update goes from "create" > "insert" > "update" property/attribute.
        // React elements cannot be "inserted" and later have their props
        // updated, so the "insert", or React.Render, can only be done once the
        // element has been fully defined.  Only the topmost [root] nodes are added here.
        _this.reactRootNodes = new Set();
        // This flag can only be set to true from outside.  It can only be reset
        // to false from inside.  This value is reset on "end" when the pending
        // renders are flushed.
        _this.setRenderPendingCallback = function () {
            _this.isRenderPending = true;
        };
        // tslint:disable-next-line: no-use-before-declare
        _this.defaultReactRenderer = new ReactRenderer(_this);
        return _this;
    }
    AngularReactRendererFactory.prototype.createRenderer = function (element, type) {
        if (type && type.styles.length && type.styles[0] === 'react-renderer') {
            return this.defaultReactRenderer;
        }
        return _super.prototype.createRenderer.call(this, element, type);
    };
    AngularReactRendererFactory.prototype.begin = function () { };
    AngularReactRendererFactory.prototype.end = function () {
        if (DEBUG) {
            console.log('RootRenderer > end > isRenderPending:', this.isRenderPending, 'reactRootNodes:', this.reactRootNodes);
        }
        // Flush any pending React element render updates.  This cannot be done
        // earlier (as is done for DOM elements) because React element props
        // are ReadOnly.
        if (this.isRenderPending) {
            // Remove root nodes that are pending destroy after render.
            this.reactRootNodes = new Set(Array.from(this.reactRootNodes).filter(function (node) { return !node.render().destroyPending; }));
            this.isRenderPending = false;
        }
    };
    AngularReactRendererFactory = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [EventManager, ɵDomSharedStylesHost])
    ], AngularReactRendererFactory);
    return AngularReactRendererFactory;
}(ɵDomRendererFactory2));
export { AngularReactRendererFactory };
export var isReactRendererData = function (data) {
    return data && typeof data.addRootNode === 'function';
};
var ReactRenderer = /** @class */ (function () {
    function ReactRenderer(rootRenderer) {
        var _this = this;
        this.rootRenderer = rootRenderer;
        this.data = {
            addRootNode: function (node) {
                _this.rootRenderer.reactRootNodes.add(node);
            },
        };
        // These two elements are essential for the whole experience to be smooth for the user - register them from the get-go.
        registerElement('ReactContent', function () { return ReactContent; });
        registerElement('Disguise', function () { return Disguise; });
    }
    ReactRenderer.prototype.destroy = function () { };
    ReactRenderer.prototype.destroyNode = function (node) {
        if (DEBUG) {
            console.error('Renderer > destroyNode > node:', node.toString());
        }
        node.destroyNode();
    };
    ReactRenderer.prototype.createElement = function (name, namespace) {
        if (DEBUG) {
            console.error('Renderer > createElement > name:', name, namespace ? 'namespace:' : '', namespace);
        }
        return new ReactNode(name);
    };
    ReactRenderer.prototype.createComment = function (value) {
        if (DEBUG) {
            console.error('Renderer > createComment > value:', value.trim());
        }
        return new ReactNode().asComment(value);
    };
    ReactRenderer.prototype.createText = function (value) {
        if (DEBUG) {
            console.error('Renderer > createText > value:', value.trim());
        }
        return new ReactNode().asText(value);
    };
    ReactRenderer.prototype.appendChild = function (parent, node) {
        // Only append a child if there is a child to append.
        if (!node) {
            return;
        }
        // Don't append empty text nodes.
        if (!node.shouldRender) {
            return;
        }
        // Provide a parent element reference to the ReactNode.  This will be used later
        // once the ReactNode is fully defined and it is subsequently rendered.
        if (!isReactNode(parent)) {
            if (DEBUG) {
                console.warn('Renderer > appendChild > asDOM > parent:', parent.toString(), 'node:', node.toString());
            }
            node.setRenderPendingCallback = this.rootRenderer.setRenderPendingCallback;
            this.rootRenderer.reactRootNodes.add(node);
            node.parent = parent;
            return;
        }
        if (DEBUG) {
            console.warn('Renderer > appendChild > asReact > parent:', parent.toString(), 'node:', node.toString());
        }
        node.setRenderPendingCallback = function () { return parent.setRenderPending(); };
        parent.addChild(node);
        node.parent = parent;
    };
    ReactRenderer.prototype.insertBefore = function (parent, node, refChild) {
        // Only insert a child if there is a parent.
        if (!parent) {
            return;
        }
        // Provide a parent element reference to the ReactNode.  This will be used later
        // once the ReactNode is fully defined and it is subsequently rendered.  In this
        // case, React cannot "insertBefore".  Instead, we have to create a target element
        // where the ReactNode can be rendered later.
        if (DEBUG) {
            console.warn('Renderer > insertBefore > asDOM > parent:', parent.toString(), 'node:', node.toString(), 'refChild:', refChild.toString());
        }
        var target = document.createElement('div');
        parent.insertBefore(target, refChild);
        node.parent = target;
        node.setRenderPendingCallback = this.rootRenderer.setRenderPendingCallback;
    };
    ReactRenderer.prototype.removeChild = function (parent, node) {
        // Only insert a child if there is a parent.
        if (!parent) {
            return;
        }
        // Remove a parent element reference from the ReactNode.  This will be later
        // result in the ReactNode unloading itself.
        if (!isReactNode(parent)) {
            if (DEBUG) {
                console.warn('Renderer > removeChild > asDOM > parent:', parent.toString(), 'node:', node.toString());
            }
            node.parent = null;
            return;
        }
        if (DEBUG) {
            console.warn('Renderer > removeChild > asReact > parent:', parent.toString(), 'node:', node.toString());
        }
        parent.removeChild(node);
    };
    ReactRenderer.prototype.selectRootElement = function (selectorOrNode) {
        if (DEBUG) {
            console.log('NOT IMPLEMENTED - Renderer > selectRootElement > selectorOrNode:', selectorOrNode);
        }
    };
    ReactRenderer.prototype.parentNode = function (node) {
        if (DEBUG) {
            console.log('NOT IMPLEMENTED - Renderer > parentNode > node:', node.toString());
        }
    };
    ReactRenderer.prototype.nextSibling = function (node) {
        if (DEBUG) {
            console.log('NOT IMPLEMENTED - Renderer > nextSibling > node:', node.toString());
        }
    };
    ReactRenderer.prototype.setAttribute = function (node, name, value, namespace) {
        if (DEBUG) {
            console.log('Renderer > setAttribute > node:', node.toString(), 'name:', name, 'value:', value, namespace ? 'namespace:' : '', namespace);
        }
        node.setProperty(name, value);
    };
    ReactRenderer.prototype.removeAttribute = function (node, name, namespace) {
        if (DEBUG) {
            console.log('Renderer > removeAttribute > node:', node.toString(), 'name:', name, namespace ? 'namespace:' : '', namespace);
        }
        node.removeProperty(name);
    };
    ReactRenderer.prototype.addClass = function (node, name) {
        if (DEBUG) {
            console.log('Renderer > addClass > node:', node.toString(), 'name:', name);
        }
        // Update the virtual node.
        // TODO: This may only support a single class name, but might work if property name is a single
        //       comma-delimited list of classes...
        node.setProperty('className', name);
    };
    ReactRenderer.prototype.removeClass = function (node, name) {
        if (DEBUG) {
            console.log('Renderer > removeClass > node:', node.toString(), 'name:', name);
        }
        // Update the virtual node.
        // TODO: This may not work correctly to remove a single name from a comma-delimited list.
        node.removeProperty('className');
    };
    ReactRenderer.prototype.setStyle = function (node, style, value, flags) {
        // if (DEBUG) { console.log('Renderer > setStyle > node: ', node.toString(), 'style:', style, 'value:', value, 'flags:', flags); }
        if (flags & RendererStyleFlags2.DashCase) {
            node.setProperty('style', { style: value + !!(flags & RendererStyleFlags2.Important) ? ' !important' : '' });
        }
        else {
            node.setProperty('style', { style: value });
        }
    };
    ReactRenderer.prototype.removeStyle = function (node, style, flags) {
        if (DEBUG) {
            console.log('Renderer > removeStyle > node:', node.toString(), 'style:', style, 'flags:', flags);
        }
        node.removeProperty('style', style);
    };
    ReactRenderer.prototype.setProperty = function (node, name, value) {
        if (DEBUG) {
            console.log('Renderer > setProperty > node:', node.toString(), 'name:', name, 'value:', value);
        }
        node.setProperty(name, value);
    };
    ReactRenderer.prototype.setValue = function (node, value) {
        if (DEBUG) {
            console.log('Renderer > setValue > node:', node.toString(), 'value:', value);
        }
        node.setProperty('value', value);
    };
    ReactRenderer.prototype.listen = function (target, event, callback) {
        if (DEBUG) {
            console.log('Renderer > listen > target:', target, 'event:', event);
        }
        target.setProperty(event, callback);
        // TODO: NEEDS WORK: Implement prevent default callback behavior.
        // return <() => void>this.eventManager.addEventListener(
        //            target, event, decoratePreventDefault(callback)) as() => void;
        // tslint:disable-next-line:no-unused-expression
        return function () { return null; };
    };
    return ReactRenderer;
}());
export { ReactRenderer };
//# sourceMappingURL=data:application/json;base64,