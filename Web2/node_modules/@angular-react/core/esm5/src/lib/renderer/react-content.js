// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
import * as tslib_1 from "tslib";
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import * as dom from '../utils/dom/dom-utils';
var DEBUG = false;
export var CHILDREN_TO_APPEND_PROP = 'children-to-append';
/**
 * Creates a new `ReactContent` element.
 * @param children The children to append to the `ReactContent` element.
 * @param additionalProps _Optional_. @see `ReactContentProps`.
 */
export function createReactContentElement(children, additionalProps) {
    var _a;
    return React.createElement(ReactContent, tslib_1.__assign({}, additionalProps, (_a = {}, _a[CHILDREN_TO_APPEND_PROP] = children, _a)));
}
/**
 * Render any `HTMLElement`s as a child of React components.
 * Supports two rendering modes:
 *  1. `legacy` - append `<react-content>` as the root, and nest the `children-to-append` underneath it.
 *  2. `new` (**default**) - append the `children-to-append` to the parent of this component, and hide the `<react-content>` element.
 *     (similar to how `router-outlet` behaves in Angular).
 */
var ReactContent = /** @class */ (function (_super) {
    tslib_1.__extends(ReactContent, _super);
    function ReactContent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ReactContent.prototype.componentDidMount = function () {
        var element = ReactDOM.findDOMNode(this);
        if (this.props[CHILDREN_TO_APPEND_PROP]) {
            if (DEBUG) {
                console.warn('ReactContent Component > componentDidMount > childrenToAppend:', this.props[CHILDREN_TO_APPEND_PROP]);
            }
            var hostElement_1 = this.props.legacyRenderMode ? element : element.parentElement;
            // Only add children not already in the DOM
            this.props[CHILDREN_TO_APPEND_PROP].filter(function (child) { return !dom.isNodeInDOM(child); }).forEach(function (child) {
                return hostElement_1.appendChild(child);
            });
        }
    };
    ReactContent.prototype.render = function () {
        // TODO: See if we can just render React.Fragment and the children within it, having no extra DOM nodes.
        return React.createElement('react-content', !this.props.legacyRenderMode && { style: { display: 'none' } });
    };
    return ReactContent;
}(React.PureComponent));
export { ReactContent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhY3QtY29udGVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bhbmd1bGFyLXJlYWN0L2NvcmUvIiwic291cmNlcyI6WyJzcmMvbGliL3JlbmRlcmVyL3JlYWN0LWNvbnRlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNERBQTREO0FBQzVELGtDQUFrQzs7QUFFbEMsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxLQUFLLFFBQVEsTUFBTSxXQUFXLENBQUM7QUFDdEMsT0FBTyxLQUFLLEdBQUcsTUFBTSx3QkFBd0IsQ0FBQztBQUU5QyxJQUFNLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDcEIsTUFBTSxDQUFDLElBQU0sdUJBQXVCLEdBQUcsb0JBQW9CLENBQUM7QUFnQjVEOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUseUJBQXlCLENBQUMsUUFBb0MsRUFBRSxlQUFtQzs7SUFDakgsT0FBTyxLQUFLLENBQUMsYUFBYSxDQUFDLFlBQVksdUJBQ2xDLGVBQWUsZUFDakIsdUJBQXVCLElBQUcsUUFBUSxPQUNuQyxDQUFDO0FBQ0wsQ0FBQztBQVNEOzs7Ozs7R0FNRztBQUNIO0lBQWtDLHdDQUE4QztJQUFoRjs7SUF3QkEsQ0FBQztJQXZCQyx3Q0FBaUIsR0FBakI7UUFDRSxJQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFO1lBQ3ZDLElBQUksS0FBSyxFQUFFO2dCQUNULE9BQU8sQ0FBQyxJQUFJLENBQ1YsZ0VBQWdFLEVBQ2hFLElBQUksQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FDcEMsQ0FBQzthQUNIO1lBRUQsSUFBTSxhQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO1lBRWxGLDJDQUEyQztZQUMzQyxJQUFJLENBQUMsS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUMsTUFBTSxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxFQUF2QixDQUF1QixDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSztnQkFDeEYsT0FBQSxhQUFXLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQztZQUE5QixDQUE4QixDQUMvQixDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBRUQsNkJBQU0sR0FBTjtRQUNFLHdHQUF3RztRQUN4RyxPQUFPLEtBQUssQ0FBQyxhQUFhLENBQUMsZUFBZSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDOUcsQ0FBQztJQUNILG1CQUFDO0FBQUQsQ0FBQyxBQXhCRCxDQUFrQyxLQUFLLENBQUMsYUFBYSxHQXdCcEQiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG5cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xyXG5pbXBvcnQgKiBhcyBkb20gZnJvbSAnLi4vdXRpbHMvZG9tL2RvbS11dGlscyc7XHJcblxyXG5jb25zdCBERUJVRyA9IGZhbHNlO1xyXG5leHBvcnQgY29uc3QgQ0hJTERSRU5fVE9fQVBQRU5EX1BST1AgPSAnY2hpbGRyZW4tdG8tYXBwZW5kJztcclxuXHJcbi8qKlxyXG4gKiBQcm9wcyB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gYFJlYWN0Q29udGVudGAgZnJvbSB1c2Vycy5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVhY3RDb250ZW50UHJvcHMge1xyXG4gIC8qKlxyXG4gICAqIFVzZSB0aGUgbGVnYWN5IHJlbmRlcmluZyBtb2RlLlxyXG4gICAqXHJcbiAgICogVXNlcyBhIHNpbWlsYXIgYXBwcm9hY2ggdG8gYHJvdXRlci1vdXRsZXRgLCB3aGVyZSB0aGUgY2hpbGQgZWxlbWVudHMgYXJlIGFkZGVkIHRvIHRoZSBwYXJlbnQsIGluc3RlYWQgb2YgdGhpcyBub2RlLCBhbmQgdGhpcyBpcyBoaWRkZW4uXHJcbiAgICpcclxuICAgKiBAZGVmYXVsdCBmYWxzZVxyXG4gICAqL1xyXG4gIGxlZ2FjeVJlbmRlck1vZGU/OiBib29sZWFuO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBgUmVhY3RDb250ZW50YCBlbGVtZW50LlxyXG4gKiBAcGFyYW0gY2hpbGRyZW4gVGhlIGNoaWxkcmVuIHRvIGFwcGVuZCB0byB0aGUgYFJlYWN0Q29udGVudGAgZWxlbWVudC5cclxuICogQHBhcmFtIGFkZGl0aW9uYWxQcm9wcyBfT3B0aW9uYWxfLiBAc2VlIGBSZWFjdENvbnRlbnRQcm9wc2AuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUmVhY3RDb250ZW50RWxlbWVudChjaGlsZHJlbjogUmVhZG9ubHlBcnJheTxIVE1MRWxlbWVudD4sIGFkZGl0aW9uYWxQcm9wcz86IFJlYWN0Q29udGVudFByb3BzKSB7XHJcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3RDb250ZW50LCB7XHJcbiAgICAuLi5hZGRpdGlvbmFsUHJvcHMsXHJcbiAgICBbQ0hJTERSRU5fVE9fQVBQRU5EX1BST1BdOiBjaGlsZHJlbixcclxuICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuaW50ZXJmYWNlIEludGVybmFsUmVhY3RDb250ZW50UHJvcHMgZXh0ZW5kcyBSZWFjdENvbnRlbnRQcm9wcyB7XHJcbiAgcmVhZG9ubHkgW0NISUxEUkVOX1RPX0FQUEVORF9QUk9QXTogUmVhZG9ubHlBcnJheTxIVE1MRWxlbWVudD47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZW5kZXIgYW55IGBIVE1MRWxlbWVudGBzIGFzIGEgY2hpbGQgb2YgUmVhY3QgY29tcG9uZW50cy5cclxuICogU3VwcG9ydHMgdHdvIHJlbmRlcmluZyBtb2RlczpcclxuICogIDEuIGBsZWdhY3lgIC0gYXBwZW5kIGA8cmVhY3QtY29udGVudD5gIGFzIHRoZSByb290LCBhbmQgbmVzdCB0aGUgYGNoaWxkcmVuLXRvLWFwcGVuZGAgdW5kZXJuZWF0aCBpdC5cclxuICogIDIuIGBuZXdgICgqKmRlZmF1bHQqKikgLSBhcHBlbmQgdGhlIGBjaGlsZHJlbi10by1hcHBlbmRgIHRvIHRoZSBwYXJlbnQgb2YgdGhpcyBjb21wb25lbnQsIGFuZCBoaWRlIHRoZSBgPHJlYWN0LWNvbnRlbnQ+YCBlbGVtZW50LlxyXG4gKiAgICAgKHNpbWlsYXIgdG8gaG93IGByb3V0ZXItb3V0bGV0YCBiZWhhdmVzIGluIEFuZ3VsYXIpLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFJlYWN0Q29udGVudCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8SW50ZXJuYWxSZWFjdENvbnRlbnRQcm9wcz4ge1xyXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgY29uc3QgZWxlbWVudCA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpO1xyXG4gICAgaWYgKHRoaXMucHJvcHNbQ0hJTERSRU5fVE9fQVBQRU5EX1BST1BdKSB7XHJcbiAgICAgIGlmIChERUJVRykge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAgICdSZWFjdENvbnRlbnQgQ29tcG9uZW50ID4gY29tcG9uZW50RGlkTW91bnQgPiBjaGlsZHJlblRvQXBwZW5kOicsXHJcbiAgICAgICAgICB0aGlzLnByb3BzW0NISUxEUkVOX1RPX0FQUEVORF9QUk9QXVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGhvc3RFbGVtZW50ID0gdGhpcy5wcm9wcy5sZWdhY3lSZW5kZXJNb2RlID8gZWxlbWVudCA6IGVsZW1lbnQucGFyZW50RWxlbWVudDtcclxuXHJcbiAgICAgIC8vIE9ubHkgYWRkIGNoaWxkcmVuIG5vdCBhbHJlYWR5IGluIHRoZSBET01cclxuICAgICAgdGhpcy5wcm9wc1tDSElMRFJFTl9UT19BUFBFTkRfUFJPUF0uZmlsdGVyKGNoaWxkID0+ICFkb20uaXNOb2RlSW5ET00oY2hpbGQpKS5mb3JFYWNoKGNoaWxkID0+XHJcbiAgICAgICAgaG9zdEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2hpbGQpXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICAvLyBUT0RPOiBTZWUgaWYgd2UgY2FuIGp1c3QgcmVuZGVyIFJlYWN0LkZyYWdtZW50IGFuZCB0aGUgY2hpbGRyZW4gd2l0aGluIGl0LCBoYXZpbmcgbm8gZXh0cmEgRE9NIG5vZGVzLlxyXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3JlYWN0LWNvbnRlbnQnLCAhdGhpcy5wcm9wcy5sZWdhY3lSZW5kZXJNb2RlICYmIHsgc3R5bGU6IHsgZGlzcGxheTogJ25vbmUnIH0gfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==