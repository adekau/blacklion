// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
import * as tslib_1 from "tslib";
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { getPassProps } from '../../renderer/pass-prop-decorator';
import removeUndefinedProperties from '../../utils/object/remove-undefined-properties';
import { ReactContent } from '../react-content';
/**
 * A React component that can render a component and its children as other component types.
 */
var Disguise = /** @class */ (function (_super) {
    tslib_1.__extends(Disguise, _super);
    function Disguise() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Disguise.prototype.render = function () {
        var _a = this.props, disguiseRootAs = _a.disguiseRootAs, disguiseChildrenAs = _a.disguiseChildrenAs, children = _a.children, ngChildComponents = _a.ngChildComponents, rest = tslib_1.__rest(_a, ["disguiseRootAs", "disguiseChildrenAs", "children", "ngChildComponents"]);
        var Root = disguiseRootAs || React.Fragment;
        var renderedChildren = ngChildComponents
            ? this._isReactContentOnlyChild()
                ? this._renderReactContentChildren()
                : this._renderChildrenNaive()
            : children;
        return React.createElement(Root, rest || null, renderedChildren);
    };
    Disguise.prototype._isReactContentOnlyChild = function () {
        var children = this.props.children;
        if (React.Children.count(children) === 1) {
            var _a = tslib_1.__read(React.Children.toArray(children), 1), onlyChild = _a[0];
            if (typeof onlyChild === 'object' && onlyChild.type === ReactContent) {
                return true;
            }
        }
        return false;
    };
    Disguise.prototype._renderReactContentChildren = function () {
        var _a = this.props, ngChildComponents = _a.ngChildComponents, disguiseChildrenAs = _a.disguiseChildrenAs;
        var renderedChildren = ngChildComponents.map(function (child, index) {
            var propsToPass = removeUndefinedProperties(getPassProps(child).reduce(function (acc, passProp) {
                var _a;
                return Object.assign(acc, (_a = {}, _a[passProp.targetKey] = child[passProp.sourceKey], _a));
            }, {}));
            return React.createElement(disguiseChildrenAs, tslib_1.__assign({}, propsToPass, { key: index, ref: function (childReactElement) {
                    // ref callback is called with null when the component unmounts from the DOM, we don't need to handle it.
                    if (!childReactElement) {
                        return;
                    }
                    ReactDOM.findDOMNode(childReactElement).appendChild(child.elementRef.nativeElement);
                } }));
        });
        return renderedChildren;
    };
    Disguise.prototype._renderChildrenNaive = function () {
        var _a = this.props, children = _a.children, disguiseChildrenAs = _a.disguiseChildrenAs;
        var renderedChildren = React.Children.map(children, function (child) {
            if (!disguiseChildrenAs || typeof child !== 'object') {
                return child;
            }
            var ChildRoot = child.type || disguiseChildrenAs;
            return React.createElement(ChildRoot, tslib_1.__assign({}, child.props, { key: child.key }), child);
        });
        return renderedChildren;
    };
    return Disguise;
}(React.PureComponent));
export { Disguise };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGlzZ3Vpc2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYW5ndWxhci1yZWFjdC9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2xpYi9yZW5kZXJlci9jb21wb25lbnRzL0Rpc2d1aXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDREQUE0RDtBQUM1RCxrQ0FBa0M7O0FBRWxDLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sS0FBSyxRQUFRLE1BQU0sV0FBVyxDQUFDO0FBRXRDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNsRSxPQUFPLHlCQUF5QixNQUFNLGdEQUFnRCxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQXlCaEQ7O0dBRUc7QUFDSDtJQUE4QixvQ0FBa0M7SUFBaEU7O0lBeUVBLENBQUM7SUF4RUMseUJBQU0sR0FBTjtRQUNFLElBQU0sZUFBeUYsRUFBdkYsa0NBQWMsRUFBRSwwQ0FBa0IsRUFBRSxzQkFBUSxFQUFFLHdDQUFpQixFQUFFLG9HQUFzQixDQUFDO1FBQ2hHLElBQU0sSUFBSSxHQUFHLGNBQWMsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDO1FBRTlDLElBQU0sZ0JBQWdCLEdBQUcsaUJBQWlCO1lBQ3hDLENBQUMsQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUU7Z0JBQy9CLENBQUMsQ0FBQyxJQUFJLENBQUMsMkJBQTJCLEVBQUU7Z0JBQ3BDLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUU7WUFDL0IsQ0FBQyxDQUFDLFFBQVEsQ0FBQztRQUViLE9BQU8sS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxJQUFJLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFTywyQ0FBd0IsR0FBaEM7UUFDVSxJQUFBLDhCQUFRLENBQWdCO1FBRWhDLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2xDLElBQUEsd0RBQThDLEVBQTdDLGlCQUE2QyxDQUFDO1lBQ3JELElBQUksT0FBTyxTQUFTLEtBQUssUUFBUSxJQUF3QixTQUFVLENBQUMsSUFBSSxLQUFLLFlBQVksRUFBRTtnQkFDekYsT0FBTyxJQUFJLENBQUM7YUFDYjtTQUNGO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRU8sOENBQTJCLEdBQW5DO1FBQ1EsSUFBQSxlQUFzRCxFQUFwRCx3Q0FBaUIsRUFBRSwwQ0FBaUMsQ0FBQztRQUU3RCxJQUFNLGdCQUFnQixHQUFHLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxVQUFDLEtBQUssRUFBRSxLQUFLO1lBQzFELElBQU0sV0FBVyxHQUFHLHlCQUF5QixDQUMzQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUN4QixVQUFDLEdBQUcsRUFBRSxRQUFROztnQkFBSyxPQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxZQUFJLEdBQUMsUUFBUSxDQUFDLFNBQVMsSUFBRyxLQUFLLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFHO1lBQXZFLENBQXVFLEVBQzFGLEVBQUUsQ0FDSCxDQUNGLENBQUM7WUFFRixPQUFPLEtBQUssQ0FBQyxhQUFhLENBQUMsa0JBQWtCLHVCQUN4QyxXQUFXLElBQ2QsR0FBRyxFQUFFLEtBQUssRUFDVixHQUFHLEVBQUUsVUFBQSxpQkFBaUI7b0JBQ3BCLHlHQUF5RztvQkFDekcsSUFBSSxDQUFDLGlCQUFpQixFQUFFO3dCQUN0QixPQUFPO3FCQUNSO29CQUVELFFBQVEsQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztnQkFDdEYsQ0FBQyxJQUNELENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sZ0JBQWdCLENBQUM7SUFDMUIsQ0FBQztJQUVPLHVDQUFvQixHQUE1QjtRQUNRLElBQUEsZUFBNkMsRUFBM0Msc0JBQVEsRUFBRSwwQ0FBaUMsQ0FBQztRQUVwRCxJQUFNLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxVQUFBLEtBQUs7WUFDekQsSUFBSSxDQUFDLGtCQUFrQixJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtnQkFDcEQsT0FBTyxLQUFLLENBQUM7YUFDZDtZQUVELElBQU0sU0FBUyxHQUF1QixLQUFNLENBQUMsSUFBSSxJQUFJLGtCQUFrQixDQUFDO1lBQ3hFLE9BQU8sS0FBSyxDQUFDLGFBQWEsQ0FDeEIsU0FBUyx1QkFDZ0IsS0FBTSxDQUFDLEtBQUssSUFBRSxHQUFHLEVBQXNCLEtBQU0sQ0FBQyxHQUFHLEtBQzFFLEtBQUssQ0FDTixDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLGdCQUFnQixDQUFDO0lBQzFCLENBQUM7SUFDSCxlQUFDO0FBQUQsQ0FBQyxBQXpFRCxDQUE4QixLQUFLLENBQUMsYUFBYSxHQXlFaEQiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG5cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xyXG5pbXBvcnQgeyBSZWFjdFdyYXBwZXJDb21wb25lbnQgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL3dyYXBwZXItY29tcG9uZW50JztcclxuaW1wb3J0IHsgZ2V0UGFzc1Byb3BzIH0gZnJvbSAnLi4vLi4vcmVuZGVyZXIvcGFzcy1wcm9wLWRlY29yYXRvcic7XHJcbmltcG9ydCByZW1vdmVVbmRlZmluZWRQcm9wZXJ0aWVzIGZyb20gJy4uLy4uL3V0aWxzL29iamVjdC9yZW1vdmUtdW5kZWZpbmVkLXByb3BlcnRpZXMnO1xyXG5pbXBvcnQgeyBSZWFjdENvbnRlbnQgfSBmcm9tICcuLi9yZWFjdC1jb250ZW50JztcclxuaW1wb3J0IHsgUmVhY3RFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xyXG5cclxuLyoqXHJcbiAqIFByb3BzIGZvciBgRGlzZ3Vpc2VgIGNvbXBvbmVudC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGlzZ3Vpc2VQcm9wcyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIHR5cGUgdG8gcmVuZGVyIHRoZSByb290IGNvbXBvbmVudCBhcy5cclxuICAgKiBAZGVmYXVsdCBSZWFjdC5GcmFnbWVudFxyXG4gICAqL1xyXG4gIGRpc2d1aXNlUm9vdEFzPzogUmVhY3QuUmVhY3RUeXBlO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgdHlwZSB0byByZW5kZXIgdGhlIGNoaWxkIGNvbXBvbmVudHMgYXMuXHJcbiAgICogQGRlZmF1bHQgdGhlIENoaWxkcmVuJ3Mgb3duIHR5cGUuXHJcbiAgICovXHJcbiAgZGlzZ3Vpc2VDaGlsZHJlbkFzPzogUmVhY3QuUmVhY3RUeXBlO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgQW5ndWxhciBjaGlsZCBjb21wb25lbnRzIHRvIHJlbmRlci5cclxuICAgKi9cclxuICBuZ0NoaWxkQ29tcG9uZW50cz86IFJlYWN0V3JhcHBlckNvbXBvbmVudDxhbnk+W107XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIFJlYWN0IGNvbXBvbmVudCB0aGF0IGNhbiByZW5kZXIgYSBjb21wb25lbnQgYW5kIGl0cyBjaGlsZHJlbiBhcyBvdGhlciBjb21wb25lbnQgdHlwZXMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRGlzZ3Vpc2UgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PERpc2d1aXNlUHJvcHM+IHtcclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IGRpc2d1aXNlUm9vdEFzLCBkaXNndWlzZUNoaWxkcmVuQXMsIGNoaWxkcmVuLCBuZ0NoaWxkQ29tcG9uZW50cywgLi4ucmVzdCB9ID0gdGhpcy5wcm9wcztcclxuICAgIGNvbnN0IFJvb3QgPSBkaXNndWlzZVJvb3RBcyB8fCBSZWFjdC5GcmFnbWVudDtcclxuXHJcbiAgICBjb25zdCByZW5kZXJlZENoaWxkcmVuID0gbmdDaGlsZENvbXBvbmVudHNcclxuICAgICAgPyB0aGlzLl9pc1JlYWN0Q29udGVudE9ubHlDaGlsZCgpXHJcbiAgICAgICAgPyB0aGlzLl9yZW5kZXJSZWFjdENvbnRlbnRDaGlsZHJlbigpXHJcbiAgICAgICAgOiB0aGlzLl9yZW5kZXJDaGlsZHJlbk5haXZlKClcclxuICAgICAgOiBjaGlsZHJlbjtcclxuXHJcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb290LCByZXN0IHx8IG51bGwsIHJlbmRlcmVkQ2hpbGRyZW4pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfaXNSZWFjdENvbnRlbnRPbmx5Q2hpbGQoKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCB7IGNoaWxkcmVuIH0gPSB0aGlzLnByb3BzO1xyXG5cclxuICAgIGlmIChSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDEpIHtcclxuICAgICAgY29uc3QgW29ubHlDaGlsZF0gPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKTtcclxuICAgICAgaWYgKHR5cGVvZiBvbmx5Q2hpbGQgPT09ICdvYmplY3QnICYmICg8UmVhY3RFbGVtZW50PGFueT4+b25seUNoaWxkKS50eXBlID09PSBSZWFjdENvbnRlbnQpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX3JlbmRlclJlYWN0Q29udGVudENoaWxkcmVuKCkge1xyXG4gICAgY29uc3QgeyBuZ0NoaWxkQ29tcG9uZW50cywgZGlzZ3Vpc2VDaGlsZHJlbkFzIH0gPSB0aGlzLnByb3BzO1xyXG5cclxuICAgIGNvbnN0IHJlbmRlcmVkQ2hpbGRyZW4gPSBuZ0NoaWxkQ29tcG9uZW50cy5tYXAoKGNoaWxkLCBpbmRleCkgPT4ge1xyXG4gICAgICBjb25zdCBwcm9wc1RvUGFzcyA9IHJlbW92ZVVuZGVmaW5lZFByb3BlcnRpZXMoXHJcbiAgICAgICAgZ2V0UGFzc1Byb3BzKGNoaWxkKS5yZWR1Y2UoXHJcbiAgICAgICAgICAoYWNjLCBwYXNzUHJvcCkgPT4gT2JqZWN0LmFzc2lnbihhY2MsIHsgW3Bhc3NQcm9wLnRhcmdldEtleV06IGNoaWxkW3Bhc3NQcm9wLnNvdXJjZUtleV0gfSksXHJcbiAgICAgICAgICB7fVxyXG4gICAgICAgIClcclxuICAgICAgKTtcclxuXHJcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGRpc2d1aXNlQ2hpbGRyZW5Bcywge1xyXG4gICAgICAgIC4uLnByb3BzVG9QYXNzLFxyXG4gICAgICAgIGtleTogaW5kZXgsXHJcbiAgICAgICAgcmVmOiBjaGlsZFJlYWN0RWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAvLyByZWYgY2FsbGJhY2sgaXMgY2FsbGVkIHdpdGggbnVsbCB3aGVuIHRoZSBjb21wb25lbnQgdW5tb3VudHMgZnJvbSB0aGUgRE9NLCB3ZSBkb24ndCBuZWVkIHRvIGhhbmRsZSBpdC5cclxuICAgICAgICAgIGlmICghY2hpbGRSZWFjdEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIFJlYWN0RE9NLmZpbmRET01Ob2RlKGNoaWxkUmVhY3RFbGVtZW50KS5hcHBlbmRDaGlsZChjaGlsZC5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHJlbmRlcmVkQ2hpbGRyZW47XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF9yZW5kZXJDaGlsZHJlbk5haXZlKCkge1xyXG4gICAgY29uc3QgeyBjaGlsZHJlbiwgZGlzZ3Vpc2VDaGlsZHJlbkFzIH0gPSB0aGlzLnByb3BzO1xyXG5cclxuICAgIGNvbnN0IHJlbmRlcmVkQ2hpbGRyZW4gPSBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGNoaWxkID0+IHtcclxuICAgICAgaWYgKCFkaXNndWlzZUNoaWxkcmVuQXMgfHwgdHlwZW9mIGNoaWxkICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIHJldHVybiBjaGlsZDtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgQ2hpbGRSb290ID0gKDxSZWFjdEVsZW1lbnQ8YW55Pj5jaGlsZCkudHlwZSB8fCBkaXNndWlzZUNoaWxkcmVuQXM7XHJcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxyXG4gICAgICAgIENoaWxkUm9vdCxcclxuICAgICAgICB7IC4uLig8UmVhY3RFbGVtZW50PGFueT4+Y2hpbGQpLnByb3BzLCBrZXk6ICg8UmVhY3RFbGVtZW50PGFueT4+Y2hpbGQpLmtleSB9LFxyXG4gICAgICAgIGNoaWxkXHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gcmVuZGVyZWRDaGlsZHJlbjtcclxuICB9XHJcbn1cclxuIl19