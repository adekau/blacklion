// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
import * as tslib_1 from "tslib";
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import removeUndefinedProperties from '../utils/object/remove-undefined-properties';
import { CHILDREN_TO_APPEND_PROP } from './react-content';
import { getComponentClass } from './registry';
var DEBUG = false;
export function isReactNode(node) {
    return node.setRenderPendingCallback !== undefined;
}
/**
 * Logical representation of everything needed to render a React element in the
 * DOM, with the needed methods to do so.
 */
var ReactNode = /** @class */ (function () {
    function ReactNode(type) {
        this.type = type;
        // Access to these properties are restricted through setters and functions
        // so that the dirty "render pending" state of this object can be properly
        // tracked and all nodes with "render pending" can be flushed at the end
        // of a render operation.
        this._props = {};
        this._children = [];
        this._childrenToAppend = [];
        this._isDestroyPending = false;
        this._isRenderPending = true;
        this.setRenderPendingCallback = function () { return null; };
        this.setRenderPending();
        this._tryResolveTypeIsReactElementClass();
    }
    Object.defineProperty(ReactNode.prototype, "domElement", {
        get: function () {
            return this._renderedDomElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReactNode.prototype, "parent", {
        get: function () {
            return this._parent;
        },
        set: function (parent) {
            this._parent = parent;
            this.setRenderPending();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReactNode.prototype, "shouldRender", {
        get: function () {
            return !this._isNotRenderable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReactNode.prototype, "destroyPending", {
        get: function () {
            return this._isDestroyPending;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Track all pending render operations internally and set flag on
     * renderer factory so that a flush operation can be scheduled for
     * the "end" of render.
     */
    ReactNode.prototype.setRenderPending = function () {
        this.setRenderPendingCallback();
        this._isRenderPending = true;
    };
    /**
     * Marks the node to be removed from the DOM in the next render cycle.
     */
    ReactNode.prototype.destroyNode = function () {
        this.setRenderPending();
        this._isDestroyPending = true;
    };
    /**
     * Sets an attribute on the node.
     * @note the value can only be a `string`. See `setProperty` for other use-cases.
     * @see `Renderer2#setAttribute`.
     *
     * @param name The attribute name.
     * @param value The new value.
     */
    ReactNode.prototype.setAttribute = function (name, value) {
        var _a;
        this.setAttributes((_a = {}, _a[name] = value, _a));
    };
    /**
     * Set attributes on this node.
     * Note that values can only be of type `string`. See `setProperties` for other use-cases.
     * @see `Renderer2#setAttribute`.
     *
     * @param attributes the attributes to set.
     */
    ReactNode.prototype.setAttributes = function (attributes) {
        this.setProperties(attributes);
    };
    /**
     * Sets a prop in the underlying React element.
     * @see `Renderer2#setProperty`.
     *
     * @param name The property name.
     * @param value The new value.
     */
    ReactNode.prototype.setProperty = function (name, value) {
        var _a;
        this.setProperties((_a = {}, _a[name] = value, _a));
    };
    /**
     * Like `setProperty` but for multiple props at once.
     *
     * @param properties An object with the props.
     */
    ReactNode.prototype.setProperties = function (properties) {
        this.setRenderPending();
        Object.assign(this._props, removeUndefinedProperties(properties));
    };
    /**
     * Remove a prop or an attribute from the underlying React element.
     * @see `Renderer2#removeAttribute`.
     *
     * @param name The property name.
     * @param childName _Optional_ A property of `name` to remove instead.
     * @returns the deleted property
     */
    ReactNode.prototype.removeProperty = function (name, childName) {
        this.setRenderPending();
        if (childName) {
            return delete this._props[name][childName];
        }
        return delete this._props[name];
    };
    /**
     * Add a direct child of this node.
     * @see `Renderer2#addChild`.
     *
     * @param node The node to add.
     */
    ReactNode.prototype.addChild = function (node) {
        this.setRenderPending();
        this._children.push(node);
    };
    /**
     * Remove a direct child of this node.
     * @see `Renderer2#removeChild`.
     *
     * @param node The node to remove.
     */
    ReactNode.prototype.removeChild = function (node) {
        this.setRenderPending();
        this._children = this._children.filter(function (child) { return child !== node; });
    };
    /**
     * Cast the node to a comment node.
     * @see `Renderer2#createComment`.
     *
     * @param value the text in the comment to render.
     * @returns itself.
     */
    ReactNode.prototype.asComment = function (value) {
        this.setRenderPending();
        this.type = undefined;
        this._comment = value;
        return this;
    };
    /**
     * Cast the node to a text node.
     * @see `Renderer2#createText`.
     *
     * @param value the text to render.
     * @returns itself.
     */
    ReactNode.prototype.asText = function (value) {
        this.setRenderPending();
        this.type = undefined;
        this._text = value;
        // Skip appending and rendering of empty text nodes. This may cause a bug
        // if a single space is desired...
        if (!value || !value.trim()) {
            this._isNotRenderable = true;
        }
        return this;
    };
    /**
     * Render the node to the DOM, or unmount it, as necessary.
     *
     * @returns itself.
     */
    ReactNode.prototype.render = function () {
        // Only complete render operations for ReactNodes that are parented by HTMLElements.
        // Those that are parented by other ReactNodes will be rendered recursively by their
        // parent.
        if (!isReactNode(this._parent)) {
            if (this._isDestroyPending && this._parent) {
                if (DEBUG) {
                    console.log('ReactNode > render > destroy > node:', this.toString(), 'parent:', this.parent);
                }
                ReactDOM.unmountComponentAtNode(this._parent);
                return this;
            }
            if (this._isRenderPending) {
                if (DEBUG) {
                    console.log('ReactNode > render > node:', this.toString(), 'parent:', this.parent);
                }
                // It is expected that the element will be recreated and re-rendered with each attribute change.
                // See: https://reactjs.org/docs/rendering-elements.html
                ReactDOM.render(this._renderRecursive(), this._parent);
                this._isRenderPending = false;
            }
        }
        return this;
    };
    /**
     * Appends a child.
     *
     * @see `Renderer2#appendChild`.
     * @note This is called by Angular core when projected content is being added.
     *
     * @param projectedContent the content to project.
     */
    ReactNode.prototype.appendChild = function (projectedContent) {
        if (DEBUG) {
            console.error('ReactNode > appendChild > node:', this.toString(), 'projectedContent:', projectedContent.toString().trim());
        }
        this._childrenToAppend.push(projectedContent);
    };
    /**
     * @note for easier debugging.
     */
    ReactNode.prototype.toString = function () {
        if (this._typeName) {
            return "[" + this._typeName + " ReactNode]";
        }
        if (this._text) {
            return '[text ReactNode]';
        }
        if (this._comment) {
            return '[comment ReactNode]';
        }
        return '[undefined ReactNode]';
    };
    ReactNode.prototype._renderRecursive = function (key) {
        var children = this._children
            ? this._children.map(function (child, index) { return child._renderRecursive(index.toString()); })
            : [];
        if (this._text) {
            return this._text;
        }
        this._props[CHILDREN_TO_APPEND_PROP] = this._childrenToAppend;
        if (key) {
            this._props['key'] = key;
        }
        // Just having some props on a React element can cause it to
        // behave undesirably, and since the templates are hard-coded to pass
        // all Inputs all the time, they pass `undefined` values too.
        // This ensures these are removed.
        // Additionally, there are some things that Angular templating forbids,
        // and stops at-compile time (with errors), such as `Input`s being prefixed with `on`.
        // Since React does not have the notion of `Output`s as Angular (they are just props of type function, essentially callbacks).
        // To work around this, we, by convention, prefix any PascalCased prop with `on` here, after the template has already been compiled.
        var clearedProps = this._transformProps(removeUndefinedProperties(this._props));
        if (DEBUG) {
            console.warn('ReactNode > renderRecursive > type:', this.toString(), 'props:', this._props, 'children:', children);
        }
        return React.createElement(this.type, clearedProps, children.length > 0 ? children : undefined);
    };
    ReactNode.prototype._transformProps = function (props) {
        var _this = this;
        return Object.entries(props).reduce(function (acc, _a) {
            var _b;
            var _c = tslib_1.__read(_a, 2), key = _c[0], value = _c[1];
            var _d = tslib_1.__read(typeof key !== 'string' ? [key, value] : _this._transformProp(key, value), 2), newKey = _d[0], newValue = _d[1];
            return Object.assign(acc, (_b = {}, _b[newKey] = newValue, _b));
        }, {});
    };
    ReactNode.prototype._transformProp = function (name, value) {
        // prop name is camelCased already
        var firstLetter = name[0];
        if (firstLetter === firstLetter.toLowerCase()) {
            return [name, value];
        }
        // prop name is PascalCased & is a function - assuming render prop or callback prop that has return value
        // NOTE: Angular doesn't allow passing @Inputs that are prefixed with "on". This is useful for render props and properties representing the "on" state (for example, Toggle).
        // As a convention, any @Input that starts with a capital letter is prefixed with "on" when passed as a prop to the underlying React component.
        return ["on" + name, value];
    };
    ReactNode.prototype._tryResolveTypeIsReactElementClass = function () {
        if (this._typeIsReactElementClass === undefined) {
            // Comments and text have no type.
            if (!this.type) {
                return;
            }
            // Store the name of the type for the toString message (debugging).
            this._typeName = this.type;
            // Attempt to resolve the type as a React Element class name/type.
            // Since Angular templates are just strings, we can't include types in them.
            // Therefore, we use the component registry to resolve the type of a component from a string.
            if (typeof this.type === 'string') {
                this.type = getComponentClass(this.type);
            }
            // If type is still a string, then no React Element matches this string.
            this._typeIsReactElementClass = typeof this.type !== 'string';
            if (DEBUG) {
                console.log('ReactNode > tryResolveTypeIsReactElementClass > type:', this._typeName);
            }
        }
    };
    return ReactNode;
}());
export { ReactNode };
//# sourceMappingURL=data:application/json;base64,