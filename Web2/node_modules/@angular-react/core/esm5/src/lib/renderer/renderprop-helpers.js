// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
import { createReactContentElement } from '../renderer/react-content';
import { createReactTemplateElement } from './react-template';
export function isRenderPropContext(x) {
    if (typeof x !== 'object') {
        return false;
    }
    var maybeRenderPropContext = x;
    return maybeRenderPropContext.render && typeof maybeRenderPropContext.render === 'function';
}
function renderReactContent(rootNodes, additionalProps) {
    return createReactContentElement(rootNodes, additionalProps);
}
/**
 * Wrap a `TemplateRef` with a `JSX.Element`.
 *
 * @param templateRef The template to wrap
 * @param ngZone A zone used for tracking & triggering updates to the template
 * @param additionalProps optional additional props to pass to the `ReactContent` object that will render the content.
 */
export function createTemplateRenderer(templateRef, ngZone, additionalProps) {
    return {
        render: function (context) { return createReactTemplateElement(templateRef, context, ngZone, additionalProps); },
    };
}
/**
 * Wrap a function resolving to an `HTMLElement` with a `JSX.Element`.
 *
 * @param htmlRenderFunc The function to wrap
 * @param additionalProps optional additional props to pass to the `ReactContent` object that will render the content.
 */
export function createHtmlRenderer(htmlRenderFunc, additionalProps) {
    return {
        render: function (context) {
            var rootHtmlElement = htmlRenderFunc(context);
            return renderReactContent([rootHtmlElement], additionalProps);
        },
    };
}
/**
 * Wrap a `ComponentRef` with a `JSX.Element`.
 *
 * @param htmlRenderFunc The component reference to wrap
 * @param additionalProps optional additional props to pass to the `ReactContent` object that will render the content.
 */
export function createComponentRenderer(componentRef, additionalProps) {
    var renderedJsx = null;
    return {
        render: function (context) {
            if (!renderedJsx) {
                renderedJsx = renderReactContent([componentRef.location.nativeElement], additionalProps);
            }
            Object.assign(componentRef.instance, context);
            componentRef.changeDetectorRef.detectChanges();
            return renderedJsx;
        },
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVycHJvcC1oZWxwZXJzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFuZ3VsYXItcmVhY3QvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9saWIvcmVuZGVyZXIvcmVuZGVycHJvcC1oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDREQUE0RDtBQUM1RCxrQ0FBa0M7QUFHbEMsT0FBTyxFQUFFLHlCQUF5QixFQUFxQixNQUFNLDJCQUEyQixDQUFDO0FBQ3pGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBTTlELE1BQU0sVUFBVSxtQkFBbUIsQ0FBMEIsQ0FBVTtJQUNyRSxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUN6QixPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQsSUFBTSxzQkFBc0IsR0FBRyxDQUFnQyxDQUFDO0lBQ2hFLE9BQU8sc0JBQXNCLENBQUMsTUFBTSxJQUFJLE9BQU8sc0JBQXNCLENBQUMsTUFBTSxLQUFLLFVBQVUsQ0FBQztBQUM5RixDQUFDO0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxTQUF3QixFQUFFLGVBQW1DO0lBQ3ZGLE9BQU8seUJBQXlCLENBQUMsU0FBUyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQy9ELENBQUM7QUFFRDs7Ozs7O0dBTUc7QUFDSCxNQUFNLFVBQVUsc0JBQXNCLENBQ3BDLFdBQWtDLEVBQ2xDLE1BQWMsRUFDZCxlQUFtQztJQUVuQyxPQUFPO1FBQ0wsTUFBTSxFQUFFLFVBQUMsT0FBaUIsSUFBSyxPQUFBLDBCQUEwQixDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLGVBQWUsQ0FBQyxFQUF6RSxDQUF5RTtLQUN6RyxDQUFDO0FBQ0osQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLGtCQUFrQixDQUNoQyxjQUFrRCxFQUNsRCxlQUFtQztJQUVuQyxPQUFPO1FBQ0wsTUFBTSxFQUFFLFVBQUEsT0FBTztZQUNiLElBQU0sZUFBZSxHQUFHLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNoRCxPQUFPLGtCQUFrQixDQUFDLENBQUMsZUFBZSxDQUFDLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDaEUsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsdUJBQXVCLENBQ3JDLFlBQW9DLEVBQ3BDLGVBQW1DO0lBRW5DLElBQUksV0FBVyxHQUF1QixJQUFJLENBQUM7SUFFM0MsT0FBTztRQUNMLE1BQU0sRUFBRSxVQUFBLE9BQU87WUFDYixJQUFJLENBQUMsV0FBVyxFQUFFO2dCQUNoQixXQUFXLEdBQUcsa0JBQWtCLENBQUMsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxDQUFDO2FBQzFGO1lBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQzlDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUUvQyxPQUFPLFdBQVcsQ0FBQztRQUNyQixDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG5cclxuaW1wb3J0IHsgQ29tcG9uZW50UmVmLCBOZ1pvbmUsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGNyZWF0ZVJlYWN0Q29udGVudEVsZW1lbnQsIFJlYWN0Q29udGVudFByb3BzIH0gZnJvbSAnLi4vcmVuZGVyZXIvcmVhY3QtY29udGVudCc7XHJcbmltcG9ydCB7IGNyZWF0ZVJlYWN0VGVtcGxhdGVFbGVtZW50IH0gZnJvbSAnLi9yZWFjdC10ZW1wbGF0ZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJlbmRlclByb3BDb250ZXh0PFRDb250ZXh0IGV4dGVuZHMgb2JqZWN0PiB7XHJcbiAgcmVhZG9ubHkgcmVuZGVyOiAoY29udGV4dDogVENvbnRleHQpID0+IEpTWC5FbGVtZW50O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNSZW5kZXJQcm9wQ29udGV4dDxUQ29udGV4dCBleHRlbmRzIG9iamVjdD4oeDogdW5rbm93bik6IHggaXMgUmVuZGVyUHJvcENvbnRleHQ8VENvbnRleHQ+IHtcclxuICBpZiAodHlwZW9mIHggIT09ICdvYmplY3QnKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBjb25zdCBtYXliZVJlbmRlclByb3BDb250ZXh0ID0geCBhcyBSZW5kZXJQcm9wQ29udGV4dDxUQ29udGV4dD47XHJcbiAgcmV0dXJuIG1heWJlUmVuZGVyUHJvcENvbnRleHQucmVuZGVyICYmIHR5cGVvZiBtYXliZVJlbmRlclByb3BDb250ZXh0LnJlbmRlciA9PT0gJ2Z1bmN0aW9uJztcclxufVxyXG5cclxuZnVuY3Rpb24gcmVuZGVyUmVhY3RDb250ZW50KHJvb3ROb2RlczogSFRNTEVsZW1lbnRbXSwgYWRkaXRpb25hbFByb3BzPzogUmVhY3RDb250ZW50UHJvcHMpOiBKU1guRWxlbWVudCB7XHJcbiAgcmV0dXJuIGNyZWF0ZVJlYWN0Q29udGVudEVsZW1lbnQocm9vdE5vZGVzLCBhZGRpdGlvbmFsUHJvcHMpO1xyXG59XHJcblxyXG4vKipcclxuICogV3JhcCBhIGBUZW1wbGF0ZVJlZmAgd2l0aCBhIGBKU1guRWxlbWVudGAuXHJcbiAqXHJcbiAqIEBwYXJhbSB0ZW1wbGF0ZVJlZiBUaGUgdGVtcGxhdGUgdG8gd3JhcFxyXG4gKiBAcGFyYW0gbmdab25lIEEgem9uZSB1c2VkIGZvciB0cmFja2luZyAmIHRyaWdnZXJpbmcgdXBkYXRlcyB0byB0aGUgdGVtcGxhdGVcclxuICogQHBhcmFtIGFkZGl0aW9uYWxQcm9wcyBvcHRpb25hbCBhZGRpdGlvbmFsIHByb3BzIHRvIHBhc3MgdG8gdGhlIGBSZWFjdENvbnRlbnRgIG9iamVjdCB0aGF0IHdpbGwgcmVuZGVyIHRoZSBjb250ZW50LlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRlbXBsYXRlUmVuZGVyZXI8VENvbnRleHQgZXh0ZW5kcyBvYmplY3Q+KFxyXG4gIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxUQ29udGV4dD4sXHJcbiAgbmdab25lOiBOZ1pvbmUsXHJcbiAgYWRkaXRpb25hbFByb3BzPzogUmVhY3RDb250ZW50UHJvcHNcclxuKTogUmVuZGVyUHJvcENvbnRleHQ8VENvbnRleHQ+IHtcclxuICByZXR1cm4ge1xyXG4gICAgcmVuZGVyOiAoY29udGV4dDogVENvbnRleHQpID0+IGNyZWF0ZVJlYWN0VGVtcGxhdGVFbGVtZW50KHRlbXBsYXRlUmVmLCBjb250ZXh0LCBuZ1pvbmUsIGFkZGl0aW9uYWxQcm9wcyksXHJcbiAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFdyYXAgYSBmdW5jdGlvbiByZXNvbHZpbmcgdG8gYW4gYEhUTUxFbGVtZW50YCB3aXRoIGEgYEpTWC5FbGVtZW50YC5cclxuICpcclxuICogQHBhcmFtIGh0bWxSZW5kZXJGdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwXHJcbiAqIEBwYXJhbSBhZGRpdGlvbmFsUHJvcHMgb3B0aW9uYWwgYWRkaXRpb25hbCBwcm9wcyB0byBwYXNzIHRvIHRoZSBgUmVhY3RDb250ZW50YCBvYmplY3QgdGhhdCB3aWxsIHJlbmRlciB0aGUgY29udGVudC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVIdG1sUmVuZGVyZXI8VENvbnRleHQgZXh0ZW5kcyBvYmplY3Q+KFxyXG4gIGh0bWxSZW5kZXJGdW5jOiAoY29udGV4dDogVENvbnRleHQpID0+IEhUTUxFbGVtZW50LFxyXG4gIGFkZGl0aW9uYWxQcm9wcz86IFJlYWN0Q29udGVudFByb3BzXHJcbik6IFJlbmRlclByb3BDb250ZXh0PFRDb250ZXh0PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHJlbmRlcjogY29udGV4dCA9PiB7XHJcbiAgICAgIGNvbnN0IHJvb3RIdG1sRWxlbWVudCA9IGh0bWxSZW5kZXJGdW5jKGNvbnRleHQpO1xyXG4gICAgICByZXR1cm4gcmVuZGVyUmVhY3RDb250ZW50KFtyb290SHRtbEVsZW1lbnRdLCBhZGRpdGlvbmFsUHJvcHMpO1xyXG4gICAgfSxcclxuICB9O1xyXG59XHJcblxyXG4vKipcclxuICogV3JhcCBhIGBDb21wb25lbnRSZWZgIHdpdGggYSBgSlNYLkVsZW1lbnRgLlxyXG4gKlxyXG4gKiBAcGFyYW0gaHRtbFJlbmRlckZ1bmMgVGhlIGNvbXBvbmVudCByZWZlcmVuY2UgdG8gd3JhcFxyXG4gKiBAcGFyYW0gYWRkaXRpb25hbFByb3BzIG9wdGlvbmFsIGFkZGl0aW9uYWwgcHJvcHMgdG8gcGFzcyB0byB0aGUgYFJlYWN0Q29udGVudGAgb2JqZWN0IHRoYXQgd2lsbCByZW5kZXIgdGhlIGNvbnRlbnQuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50UmVuZGVyZXI8VENvbnRleHQgZXh0ZW5kcyBvYmplY3Q+KFxyXG4gIGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPFRDb250ZXh0PixcclxuICBhZGRpdGlvbmFsUHJvcHM/OiBSZWFjdENvbnRlbnRQcm9wc1xyXG4pOiBSZW5kZXJQcm9wQ29udGV4dDxUQ29udGV4dD4ge1xyXG4gIGxldCByZW5kZXJlZEpzeDogSlNYLkVsZW1lbnQgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHJlbmRlcjogY29udGV4dCA9PiB7XHJcbiAgICAgIGlmICghcmVuZGVyZWRKc3gpIHtcclxuICAgICAgICByZW5kZXJlZEpzeCA9IHJlbmRlclJlYWN0Q29udGVudChbY29tcG9uZW50UmVmLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnRdLCBhZGRpdGlvbmFsUHJvcHMpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBPYmplY3QuYXNzaWduKGNvbXBvbmVudFJlZi5pbnN0YW5jZSwgY29udGV4dCk7XHJcbiAgICAgIGNvbXBvbmVudFJlZi5jaGFuZ2VEZXRlY3RvclJlZi5kZXRlY3RDaGFuZ2VzKCk7XHJcblxyXG4gICAgICByZXR1cm4gcmVuZGVyZWRKc3g7XHJcbiAgICB9LFxyXG4gIH07XHJcbn1cclxuIl19