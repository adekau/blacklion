import { TemplateRef, ComponentRef } from '@angular/core';
import { createTemplateRenderer, createComponentRenderer, createHtmlRenderer, isRenderPropContext, } from '../renderer/renderprop-helpers';
function isRenderComponentOptions(x) {
    if (typeof x !== 'object') {
        return false;
    }
    var maybeRenderComponentOptions = x;
    return (maybeRenderComponentOptions.componentType != null &&
        maybeRenderComponentOptions.factoryResolver != null &&
        maybeRenderComponentOptions.injector != null);
}
function isRenderPropOptions(x) {
    if (typeof x !== 'object') {
        return false;
    }
    var maybeRenderPropOptions = x;
    return maybeRenderPropOptions.getProps && typeof maybeRenderPropOptions.getProps === 'function';
}
export function createInputJsxRenderer(input, ngZone, additionalProps) {
    if (input instanceof TemplateRef) {
        var templateRenderer_1 = createTemplateRenderer(input, ngZone, additionalProps);
        return function (context) { return templateRenderer_1.render(context); };
    }
    if (input instanceof ComponentRef) {
        var componentRenderer_1 = createComponentRenderer(input, additionalProps);
        return function (context) { return componentRenderer_1.render(context); };
    }
    if (input instanceof Function) {
        var htmlRenderer_1 = createHtmlRenderer(input, additionalProps);
        return function (context) { return htmlRenderer_1.render(context); };
    }
    if (isRenderComponentOptions(input)) {
        var componentType = input.componentType, factoryResolver = input.factoryResolver, injector = input.injector;
        var componentFactory = factoryResolver.resolveComponentFactory(componentType);
        var componentRef = componentFactory.create(injector);
        // Call the function again with the created ComponentRef<TContext>
        return createInputJsxRenderer(componentRef, ngZone, additionalProps);
    }
}
export function createRenderPropHandler(renderInputValue, ngZone, options) {
    if (isRenderPropContext(renderInputValue)) {
        return renderInputValue.render;
    }
    if (isRenderPropOptions(renderInputValue)) {
        return function (props, defaultRender) {
            return typeof defaultRender === 'function' ? defaultRender(renderInputValue.getProps(props)) : null;
        };
    }
    var renderer = (options && options.jsxRenderer) ||
        createInputJsxRenderer(renderInputValue, ngZone, options && options.additionalProps);
    return function (props, defaultRender) {
        if (!renderInputValue) {
            return typeof defaultRender === 'function' ? defaultRender(props) : null;
        }
        return renderer(props);
    };
}
//# sourceMappingURL=data:application/json;base64,