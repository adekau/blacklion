// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
import { createReactContentElement } from '../renderer/react-content';
import { createReactTemplateElement } from './react-template';
export function isRenderPropContext(x) {
    if (typeof x !== 'object') {
        return false;
    }
    const maybeRenderPropContext = x;
    return maybeRenderPropContext.render && typeof maybeRenderPropContext.render === 'function';
}
function renderReactContent(rootNodes, additionalProps) {
    return createReactContentElement(rootNodes, additionalProps);
}
/**
 * Wrap a `TemplateRef` with a `JSX.Element`.
 *
 * @param templateRef The template to wrap
 * @param ngZone A zone used for tracking & triggering updates to the template
 * @param additionalProps optional additional props to pass to the `ReactContent` object that will render the content.
 */
export function createTemplateRenderer(templateRef, ngZone, additionalProps) {
    return {
        render: (context) => createReactTemplateElement(templateRef, context, ngZone, additionalProps),
    };
}
/**
 * Wrap a function resolving to an `HTMLElement` with a `JSX.Element`.
 *
 * @param htmlRenderFunc The function to wrap
 * @param additionalProps optional additional props to pass to the `ReactContent` object that will render the content.
 */
export function createHtmlRenderer(htmlRenderFunc, additionalProps) {
    return {
        render: context => {
            const rootHtmlElement = htmlRenderFunc(context);
            return renderReactContent([rootHtmlElement], additionalProps);
        },
    };
}
/**
 * Wrap a `ComponentRef` with a `JSX.Element`.
 *
 * @param htmlRenderFunc The component reference to wrap
 * @param additionalProps optional additional props to pass to the `ReactContent` object that will render the content.
 */
export function createComponentRenderer(componentRef, additionalProps) {
    let renderedJsx = null;
    return {
        render: context => {
            if (!renderedJsx) {
                renderedJsx = renderReactContent([componentRef.location.nativeElement], additionalProps);
            }
            Object.assign(componentRef.instance, context);
            componentRef.changeDetectorRef.detectChanges();
            return renderedJsx;
        },
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVycHJvcC1oZWxwZXJzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFuZ3VsYXItcmVhY3QvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9saWIvcmVuZGVyZXIvcmVuZGVycHJvcC1oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDREQUE0RDtBQUM1RCxrQ0FBa0M7QUFHbEMsT0FBTyxFQUFFLHlCQUF5QixFQUFxQixNQUFNLDJCQUEyQixDQUFDO0FBQ3pGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBTTlELE1BQU0sVUFBVSxtQkFBbUIsQ0FBMEIsQ0FBVTtJQUNyRSxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUN6QixPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQsTUFBTSxzQkFBc0IsR0FBRyxDQUFnQyxDQUFDO0lBQ2hFLE9BQU8sc0JBQXNCLENBQUMsTUFBTSxJQUFJLE9BQU8sc0JBQXNCLENBQUMsTUFBTSxLQUFLLFVBQVUsQ0FBQztBQUM5RixDQUFDO0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxTQUF3QixFQUFFLGVBQW1DO0lBQ3ZGLE9BQU8seUJBQXlCLENBQUMsU0FBUyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQy9ELENBQUM7QUFFRDs7Ozs7O0dBTUc7QUFDSCxNQUFNLFVBQVUsc0JBQXNCLENBQ3BDLFdBQWtDLEVBQ2xDLE1BQWMsRUFDZCxlQUFtQztJQUVuQyxPQUFPO1FBQ0wsTUFBTSxFQUFFLENBQUMsT0FBaUIsRUFBRSxFQUFFLENBQUMsMEJBQTBCLENBQUMsV0FBVyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsZUFBZSxDQUFDO0tBQ3pHLENBQUM7QUFDSixDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsa0JBQWtCLENBQ2hDLGNBQWtELEVBQ2xELGVBQW1DO0lBRW5DLE9BQU87UUFDTCxNQUFNLEVBQUUsT0FBTyxDQUFDLEVBQUU7WUFDaEIsTUFBTSxlQUFlLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2hELE9BQU8sa0JBQWtCLENBQUMsQ0FBQyxlQUFlLENBQUMsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUNoRSxDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSx1QkFBdUIsQ0FDckMsWUFBb0MsRUFDcEMsZUFBbUM7SUFFbkMsSUFBSSxXQUFXLEdBQXVCLElBQUksQ0FBQztJQUUzQyxPQUFPO1FBQ0wsTUFBTSxFQUFFLE9BQU8sQ0FBQyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQ2hCLFdBQVcsR0FBRyxrQkFBa0IsQ0FBQyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEVBQUUsZUFBZSxDQUFDLENBQUM7YUFDMUY7WUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDOUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxDQUFDO1lBRS9DLE9BQU8sV0FBVyxDQUFDO1FBQ3JCLENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcblxyXG5pbXBvcnQgeyBDb21wb25lbnRSZWYsIE5nWm9uZSwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgY3JlYXRlUmVhY3RDb250ZW50RWxlbWVudCwgUmVhY3RDb250ZW50UHJvcHMgfSBmcm9tICcuLi9yZW5kZXJlci9yZWFjdC1jb250ZW50JztcclxuaW1wb3J0IHsgY3JlYXRlUmVhY3RUZW1wbGF0ZUVsZW1lbnQgfSBmcm9tICcuL3JlYWN0LXRlbXBsYXRlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVuZGVyUHJvcENvbnRleHQ8VENvbnRleHQgZXh0ZW5kcyBvYmplY3Q+IHtcclxuICByZWFkb25seSByZW5kZXI6IChjb250ZXh0OiBUQ29udGV4dCkgPT4gSlNYLkVsZW1lbnQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1JlbmRlclByb3BDb250ZXh0PFRDb250ZXh0IGV4dGVuZHMgb2JqZWN0Pih4OiB1bmtub3duKTogeCBpcyBSZW5kZXJQcm9wQ29udGV4dDxUQ29udGV4dD4ge1xyXG4gIGlmICh0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGNvbnN0IG1heWJlUmVuZGVyUHJvcENvbnRleHQgPSB4IGFzIFJlbmRlclByb3BDb250ZXh0PFRDb250ZXh0PjtcclxuICByZXR1cm4gbWF5YmVSZW5kZXJQcm9wQ29udGV4dC5yZW5kZXIgJiYgdHlwZW9mIG1heWJlUmVuZGVyUHJvcENvbnRleHQucmVuZGVyID09PSAnZnVuY3Rpb24nO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJSZWFjdENvbnRlbnQocm9vdE5vZGVzOiBIVE1MRWxlbWVudFtdLCBhZGRpdGlvbmFsUHJvcHM/OiBSZWFjdENvbnRlbnRQcm9wcyk6IEpTWC5FbGVtZW50IHtcclxuICByZXR1cm4gY3JlYXRlUmVhY3RDb250ZW50RWxlbWVudChyb290Tm9kZXMsIGFkZGl0aW9uYWxQcm9wcyk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBXcmFwIGEgYFRlbXBsYXRlUmVmYCB3aXRoIGEgYEpTWC5FbGVtZW50YC5cclxuICpcclxuICogQHBhcmFtIHRlbXBsYXRlUmVmIFRoZSB0ZW1wbGF0ZSB0byB3cmFwXHJcbiAqIEBwYXJhbSBuZ1pvbmUgQSB6b25lIHVzZWQgZm9yIHRyYWNraW5nICYgdHJpZ2dlcmluZyB1cGRhdGVzIHRvIHRoZSB0ZW1wbGF0ZVxyXG4gKiBAcGFyYW0gYWRkaXRpb25hbFByb3BzIG9wdGlvbmFsIGFkZGl0aW9uYWwgcHJvcHMgdG8gcGFzcyB0byB0aGUgYFJlYWN0Q29udGVudGAgb2JqZWN0IHRoYXQgd2lsbCByZW5kZXIgdGhlIGNvbnRlbnQuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGVtcGxhdGVSZW5kZXJlcjxUQ29udGV4dCBleHRlbmRzIG9iamVjdD4oXHJcbiAgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPFRDb250ZXh0PixcclxuICBuZ1pvbmU6IE5nWm9uZSxcclxuICBhZGRpdGlvbmFsUHJvcHM/OiBSZWFjdENvbnRlbnRQcm9wc1xyXG4pOiBSZW5kZXJQcm9wQ29udGV4dDxUQ29udGV4dD4ge1xyXG4gIHJldHVybiB7XHJcbiAgICByZW5kZXI6IChjb250ZXh0OiBUQ29udGV4dCkgPT4gY3JlYXRlUmVhY3RUZW1wbGF0ZUVsZW1lbnQodGVtcGxhdGVSZWYsIGNvbnRleHQsIG5nWm9uZSwgYWRkaXRpb25hbFByb3BzKSxcclxuICB9O1xyXG59XHJcblxyXG4vKipcclxuICogV3JhcCBhIGZ1bmN0aW9uIHJlc29sdmluZyB0byBhbiBgSFRNTEVsZW1lbnRgIHdpdGggYSBgSlNYLkVsZW1lbnRgLlxyXG4gKlxyXG4gKiBAcGFyYW0gaHRtbFJlbmRlckZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXBcclxuICogQHBhcmFtIGFkZGl0aW9uYWxQcm9wcyBvcHRpb25hbCBhZGRpdGlvbmFsIHByb3BzIHRvIHBhc3MgdG8gdGhlIGBSZWFjdENvbnRlbnRgIG9iamVjdCB0aGF0IHdpbGwgcmVuZGVyIHRoZSBjb250ZW50LlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUh0bWxSZW5kZXJlcjxUQ29udGV4dCBleHRlbmRzIG9iamVjdD4oXHJcbiAgaHRtbFJlbmRlckZ1bmM6IChjb250ZXh0OiBUQ29udGV4dCkgPT4gSFRNTEVsZW1lbnQsXHJcbiAgYWRkaXRpb25hbFByb3BzPzogUmVhY3RDb250ZW50UHJvcHNcclxuKTogUmVuZGVyUHJvcENvbnRleHQ8VENvbnRleHQ+IHtcclxuICByZXR1cm4ge1xyXG4gICAgcmVuZGVyOiBjb250ZXh0ID0+IHtcclxuICAgICAgY29uc3Qgcm9vdEh0bWxFbGVtZW50ID0gaHRtbFJlbmRlckZ1bmMoY29udGV4dCk7XHJcbiAgICAgIHJldHVybiByZW5kZXJSZWFjdENvbnRlbnQoW3Jvb3RIdG1sRWxlbWVudF0sIGFkZGl0aW9uYWxQcm9wcyk7XHJcbiAgICB9LFxyXG4gIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBXcmFwIGEgYENvbXBvbmVudFJlZmAgd2l0aCBhIGBKU1guRWxlbWVudGAuXHJcbiAqXHJcbiAqIEBwYXJhbSBodG1sUmVuZGVyRnVuYyBUaGUgY29tcG9uZW50IHJlZmVyZW5jZSB0byB3cmFwXHJcbiAqIEBwYXJhbSBhZGRpdGlvbmFsUHJvcHMgb3B0aW9uYWwgYWRkaXRpb25hbCBwcm9wcyB0byBwYXNzIHRvIHRoZSBgUmVhY3RDb250ZW50YCBvYmplY3QgdGhhdCB3aWxsIHJlbmRlciB0aGUgY29udGVudC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb21wb25lbnRSZW5kZXJlcjxUQ29udGV4dCBleHRlbmRzIG9iamVjdD4oXHJcbiAgY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8VENvbnRleHQ+LFxyXG4gIGFkZGl0aW9uYWxQcm9wcz86IFJlYWN0Q29udGVudFByb3BzXHJcbik6IFJlbmRlclByb3BDb250ZXh0PFRDb250ZXh0PiB7XHJcbiAgbGV0IHJlbmRlcmVkSnN4OiBKU1guRWxlbWVudCB8IG51bGwgPSBudWxsO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgcmVuZGVyOiBjb250ZXh0ID0+IHtcclxuICAgICAgaWYgKCFyZW5kZXJlZEpzeCkge1xyXG4gICAgICAgIHJlbmRlcmVkSnN4ID0gcmVuZGVyUmVhY3RDb250ZW50KFtjb21wb25lbnRSZWYubG9jYXRpb24ubmF0aXZlRWxlbWVudF0sIGFkZGl0aW9uYWxQcm9wcyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIE9iamVjdC5hc3NpZ24oY29tcG9uZW50UmVmLmluc3RhbmNlLCBjb250ZXh0KTtcclxuICAgICAgY29tcG9uZW50UmVmLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcclxuXHJcbiAgICAgIHJldHVybiByZW5kZXJlZEpzeDtcclxuICAgIH0sXHJcbiAgfTtcclxufVxyXG4iXX0=