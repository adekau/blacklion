/**
 * Monkey-patches `Element`'s `addEventListener` & `removeEventListener` and adds `getEventListeners`.
 * This later allows the renderer to emit any event handlers attached to React-wrapped components as Angular Outputs:
 * ```html
 * <my-component (arbitraryEvent)="onEventHandler($event)"></my-component>
 * ```
 *
 * @note Taken and modified from https://github.com/colxi/getEventListeners to be compiled into ES5, allowing running in older browsers
 **/
Element.prototype['_addEventListener'] = Element.prototype.addEventListener;
Element.prototype['_removeEventListener'] = Element.prototype.removeEventListener;
Element.prototype.addEventListener = function (type, listener, options) {
    if (options === undefined)
        options = false;
    // declare listener
    this._addEventListener(type, listener, options);
    if (!this.eventListenerList)
        this.eventListenerList = {};
    if (!this.eventListenerList[type])
        this.eventListenerList[type] = [];
    // add listener to  event tracking list
    this.eventListenerList[type].push({
        type: type,
        listener: listener,
        useCapture: options,
    });
};
Element.prototype.removeEventListener = function (type, listener, options) {
    if (options === undefined)
        options = false;
    // remove listener
    this._removeEventListener(type, listener, options);
    if (!this.eventListenerList)
        this.eventListenerList = {};
    if (!this.eventListenerList[type])
        this.eventListenerList[type] = [];
    // Find the event in the list, If a listener is registered twice, one
    // with capture and one without, remove each one separately. Removal of
    // a capturing listener does not affect a non-capturing version of the
    // same listener, and vice versa.
    for (let i = 0; i < this.eventListenerList[type].length; i++) {
        if (this.eventListenerList[type][i].listener === listener &&
            this.eventListenerList[type][i].useCapture === options) {
            this.eventListenerList[type].splice(i, 1);
            break;
        }
    }
    // if no more events of the removed event type are left,remove the group
    if (this.eventListenerList[type].length == 0)
        delete this.eventListenerList[type];
};
Element.prototype.getEventListeners = function (type) {
    if (!this.eventListenerList)
        this.eventListenerList = {};
    // return requested listeners type or all them
    if (type === undefined)
        return this.eventListenerList;
    return this.eventListenerList[type];
};
/*
    Element.prototype.clearEventListeners = function(a){
        if(!this.eventListenerList)
            this.eventListenerList = {};
        if(a==undefined){
            for(var x in (this.getEventListeners())) this.clearEventListeners(x);
            return;
        }
        var el = this.getEventListeners(a);
        if(el==undefined)
            return;
        for(var i = el.length - 1; i >= 0; --i) {
            var ev = el[i];
            this.removeEventListener(a, ev.listener, ev.useCapture);
        }
    };
    */
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0ZXZlbnRsaXN0ZW5lcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYW5ndWxhci1yZWFjdC9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2xpYi9yZW5kZXJlci9nZXRldmVudGxpc3RlbmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7SUFRSTtBQUVKLE9BQU8sQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDO0FBQzVFLE9BQU8sQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUMsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDO0FBRWxGLE9BQU8sQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEdBQUcsVUFDbkMsSUFBTyxFQUNQLFFBQXdELEVBQ3hELE9BQTJDO0lBRTNDLElBQUksT0FBTyxLQUFLLFNBQVM7UUFBRSxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBRTNDLG1CQUFtQjtJQUNuQixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUVoRCxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQjtRQUFFLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxFQUFFLENBQUM7SUFDekQsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7UUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBRXJFLHVDQUF1QztJQUN2QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ2hDLElBQUksRUFBRSxJQUFJO1FBQ1YsUUFBUSxFQUFFLFFBQVE7UUFDbEIsVUFBVSxFQUFFLE9BQU87S0FDcEIsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBRUYsT0FBTyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsR0FBRyxVQUN0QyxJQUFPLEVBQ1AsUUFBd0QsRUFDeEQsT0FBd0M7SUFFeEMsSUFBSSxPQUFPLEtBQUssU0FBUztRQUFFLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFFM0Msa0JBQWtCO0lBQ2xCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRW5ELElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCO1FBQUUsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEVBQUUsQ0FBQztJQUN6RCxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQztRQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFFckUscUVBQXFFO0lBQ3JFLHVFQUF1RTtJQUN2RSxzRUFBc0U7SUFDdEUsaUNBQWlDO0lBQ2pDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzVELElBQ0UsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsS0FBSyxRQUFRO1lBQ3JELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEtBQUssT0FBTyxFQUN0RDtZQUNBLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzFDLE1BQU07U0FDUDtLQUNGO0lBQ0Qsd0VBQXdFO0lBQ3hFLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDO1FBQUUsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDcEYsQ0FBQyxDQUFDO0FBRUYsT0FBTyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsR0FBRyxVQUEwQyxJQUFRO0lBQ3RGLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCO1FBQUUsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEVBQUUsQ0FBQztJQUV6RCw4Q0FBOEM7SUFDOUMsSUFBSSxJQUFJLEtBQUssU0FBUztRQUFFLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDO0lBQ3RELE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3RDLENBQUMsQ0FBQztBQUVGOzs7Ozs7Ozs7Ozs7Ozs7O01BZ0JNIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIE1vbmtleS1wYXRjaGVzIGBFbGVtZW50YCdzIGBhZGRFdmVudExpc3RlbmVyYCAmIGByZW1vdmVFdmVudExpc3RlbmVyYCBhbmQgYWRkcyBgZ2V0RXZlbnRMaXN0ZW5lcnNgLlxyXG4gKiBUaGlzIGxhdGVyIGFsbG93cyB0aGUgcmVuZGVyZXIgdG8gZW1pdCBhbnkgZXZlbnQgaGFuZGxlcnMgYXR0YWNoZWQgdG8gUmVhY3Qtd3JhcHBlZCBjb21wb25lbnRzIGFzIEFuZ3VsYXIgT3V0cHV0czpcclxuICogYGBgaHRtbFxyXG4gKiA8bXktY29tcG9uZW50IChhcmJpdHJhcnlFdmVudCk9XCJvbkV2ZW50SGFuZGxlcigkZXZlbnQpXCI+PC9teS1jb21wb25lbnQ+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAbm90ZSBUYWtlbiBhbmQgbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vY29seGkvZ2V0RXZlbnRMaXN0ZW5lcnMgdG8gYmUgY29tcGlsZWQgaW50byBFUzUsIGFsbG93aW5nIHJ1bm5pbmcgaW4gb2xkZXIgYnJvd3NlcnNcclxuICoqL1xyXG5cclxuRWxlbWVudC5wcm90b3R5cGVbJ19hZGRFdmVudExpc3RlbmVyJ10gPSBFbGVtZW50LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyO1xyXG5FbGVtZW50LnByb3RvdHlwZVsnX3JlbW92ZUV2ZW50TGlzdGVuZXInXSA9IEVsZW1lbnQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXI7XHJcblxyXG5FbGVtZW50LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb248SyBleHRlbmRzIGtleW9mIEVsZW1lbnRFdmVudE1hcD4oXHJcbiAgdHlwZTogSyxcclxuICBsaXN0ZW5lcjogKHRoaXM6IEVsZW1lbnQsIGV2OiBFbGVtZW50RXZlbnRNYXBbS10pID0+IGFueSxcclxuICBvcHRpb25zPzogYm9vbGVhbiB8IEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zXHJcbik6IHZvaWQge1xyXG4gIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQpIG9wdGlvbnMgPSBmYWxzZTtcclxuXHJcbiAgLy8gZGVjbGFyZSBsaXN0ZW5lclxyXG4gIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpO1xyXG5cclxuICBpZiAoIXRoaXMuZXZlbnRMaXN0ZW5lckxpc3QpIHRoaXMuZXZlbnRMaXN0ZW5lckxpc3QgPSB7fTtcclxuICBpZiAoIXRoaXMuZXZlbnRMaXN0ZW5lckxpc3RbdHlwZV0pIHRoaXMuZXZlbnRMaXN0ZW5lckxpc3RbdHlwZV0gPSBbXTtcclxuXHJcbiAgLy8gYWRkIGxpc3RlbmVyIHRvICBldmVudCB0cmFja2luZyBsaXN0XHJcbiAgdGhpcy5ldmVudExpc3RlbmVyTGlzdFt0eXBlXS5wdXNoKHtcclxuICAgIHR5cGU6IHR5cGUsXHJcbiAgICBsaXN0ZW5lcjogbGlzdGVuZXIsXHJcbiAgICB1c2VDYXB0dXJlOiBvcHRpb25zLFxyXG4gIH0pO1xyXG59O1xyXG5cclxuRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uPEsgZXh0ZW5kcyBrZXlvZiBFbGVtZW50RXZlbnRNYXA+KFxyXG4gIHR5cGU6IEssXHJcbiAgbGlzdGVuZXI6ICh0aGlzOiBFbGVtZW50LCBldjogRWxlbWVudEV2ZW50TWFwW0tdKSA9PiBhbnksXHJcbiAgb3B0aW9ucz86IGJvb2xlYW4gfCBFdmVudExpc3RlbmVyT3B0aW9uc1xyXG4pOiB2b2lkIHtcclxuICBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKSBvcHRpb25zID0gZmFsc2U7XHJcblxyXG4gIC8vIHJlbW92ZSBsaXN0ZW5lclxyXG4gIHRoaXMuX3JlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpO1xyXG5cclxuICBpZiAoIXRoaXMuZXZlbnRMaXN0ZW5lckxpc3QpIHRoaXMuZXZlbnRMaXN0ZW5lckxpc3QgPSB7fTtcclxuICBpZiAoIXRoaXMuZXZlbnRMaXN0ZW5lckxpc3RbdHlwZV0pIHRoaXMuZXZlbnRMaXN0ZW5lckxpc3RbdHlwZV0gPSBbXTtcclxuXHJcbiAgLy8gRmluZCB0aGUgZXZlbnQgaW4gdGhlIGxpc3QsIElmIGEgbGlzdGVuZXIgaXMgcmVnaXN0ZXJlZCB0d2ljZSwgb25lXHJcbiAgLy8gd2l0aCBjYXB0dXJlIGFuZCBvbmUgd2l0aG91dCwgcmVtb3ZlIGVhY2ggb25lIHNlcGFyYXRlbHkuIFJlbW92YWwgb2ZcclxuICAvLyBhIGNhcHR1cmluZyBsaXN0ZW5lciBkb2VzIG5vdCBhZmZlY3QgYSBub24tY2FwdHVyaW5nIHZlcnNpb24gb2YgdGhlXHJcbiAgLy8gc2FtZSBsaXN0ZW5lciwgYW5kIHZpY2UgdmVyc2EuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmV2ZW50TGlzdGVuZXJMaXN0W3R5cGVdLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBpZiAoXHJcbiAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lckxpc3RbdHlwZV1baV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyICYmXHJcbiAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lckxpc3RbdHlwZV1baV0udXNlQ2FwdHVyZSA9PT0gb3B0aW9uc1xyXG4gICAgKSB7XHJcbiAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lckxpc3RbdHlwZV0uc3BsaWNlKGksIDEpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgLy8gaWYgbm8gbW9yZSBldmVudHMgb2YgdGhlIHJlbW92ZWQgZXZlbnQgdHlwZSBhcmUgbGVmdCxyZW1vdmUgdGhlIGdyb3VwXHJcbiAgaWYgKHRoaXMuZXZlbnRMaXN0ZW5lckxpc3RbdHlwZV0ubGVuZ3RoID09IDApIGRlbGV0ZSB0aGlzLmV2ZW50TGlzdGVuZXJMaXN0W3R5cGVdO1xyXG59O1xyXG5cclxuRWxlbWVudC5wcm90b3R5cGUuZ2V0RXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbjxLIGV4dGVuZHMga2V5b2YgRWxlbWVudEV2ZW50TWFwPih0eXBlPzogSykge1xyXG4gIGlmICghdGhpcy5ldmVudExpc3RlbmVyTGlzdCkgdGhpcy5ldmVudExpc3RlbmVyTGlzdCA9IHt9O1xyXG5cclxuICAvLyByZXR1cm4gcmVxdWVzdGVkIGxpc3RlbmVycyB0eXBlIG9yIGFsbCB0aGVtXHJcbiAgaWYgKHR5cGUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXMuZXZlbnRMaXN0ZW5lckxpc3Q7XHJcbiAgcmV0dXJuIHRoaXMuZXZlbnRMaXN0ZW5lckxpc3RbdHlwZV07XHJcbn07XHJcblxyXG4vKlxyXG4gICAgRWxlbWVudC5wcm90b3R5cGUuY2xlYXJFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uKGEpe1xyXG4gICAgICAgIGlmKCF0aGlzLmV2ZW50TGlzdGVuZXJMaXN0KVxyXG4gICAgICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXJMaXN0ID0ge307XHJcbiAgICAgICAgaWYoYT09dW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgZm9yKHZhciB4IGluICh0aGlzLmdldEV2ZW50TGlzdGVuZXJzKCkpKSB0aGlzLmNsZWFyRXZlbnRMaXN0ZW5lcnMoeCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGVsID0gdGhpcy5nZXRFdmVudExpc3RlbmVycyhhKTtcclxuICAgICAgICBpZihlbD09dW5kZWZpbmVkKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgZm9yKHZhciBpID0gZWwubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcclxuICAgICAgICAgICAgdmFyIGV2ID0gZWxbaV07XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihhLCBldi5saXN0ZW5lciwgZXYudXNlQ2FwdHVyZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgICovXHJcbiJdfQ==