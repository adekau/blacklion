import { TemplateRef, ComponentRef } from '@angular/core';
import { createTemplateRenderer, createComponentRenderer, createHtmlRenderer, isRenderPropContext, } from '../renderer/renderprop-helpers';
function isRenderComponentOptions(x) {
    if (typeof x !== 'object') {
        return false;
    }
    const maybeRenderComponentOptions = x;
    return (maybeRenderComponentOptions.componentType != null &&
        maybeRenderComponentOptions.factoryResolver != null &&
        maybeRenderComponentOptions.injector != null);
}
function isRenderPropOptions(x) {
    if (typeof x !== 'object') {
        return false;
    }
    const maybeRenderPropOptions = x;
    return maybeRenderPropOptions.getProps && typeof maybeRenderPropOptions.getProps === 'function';
}
export function createInputJsxRenderer(input, ngZone, additionalProps) {
    if (input instanceof TemplateRef) {
        const templateRenderer = createTemplateRenderer(input, ngZone, additionalProps);
        return (context) => templateRenderer.render(context);
    }
    if (input instanceof ComponentRef) {
        const componentRenderer = createComponentRenderer(input, additionalProps);
        return (context) => componentRenderer.render(context);
    }
    if (input instanceof Function) {
        const htmlRenderer = createHtmlRenderer(input, additionalProps);
        return (context) => htmlRenderer.render(context);
    }
    if (isRenderComponentOptions(input)) {
        const { componentType, factoryResolver, injector } = input;
        const componentFactory = factoryResolver.resolveComponentFactory(componentType);
        const componentRef = componentFactory.create(injector);
        // Call the function again with the created ComponentRef<TContext>
        return createInputJsxRenderer(componentRef, ngZone, additionalProps);
    }
}
export function createRenderPropHandler(renderInputValue, ngZone, options) {
    if (isRenderPropContext(renderInputValue)) {
        return renderInputValue.render;
    }
    if (isRenderPropOptions(renderInputValue)) {
        return (props, defaultRender) => {
            return typeof defaultRender === 'function' ? defaultRender(renderInputValue.getProps(props)) : null;
        };
    }
    const renderer = (options && options.jsxRenderer) ||
        createInputJsxRenderer(renderInputValue, ngZone, options && options.additionalProps);
    return (props, defaultRender) => {
        if (!renderInputValue) {
            return typeof defaultRender === 'function' ? defaultRender(props) : null;
        }
        return renderer(props);
    };
}
//# sourceMappingURL=data:application/json;base64,