/// <reference path="../@types/geteventlisteners.d.ts" />
/// <reference types="react" />
import { AfterViewInit, ChangeDetectorRef, ElementRef, NgZone, OnChanges, Renderer2, SimpleChanges, AfterContentInit } from '@angular/core';
import { StyleObject } from 'stylenames';
import { Many } from '../declarations/many';
import { ReactContentProps } from '../renderer/react-content';
import { InputRendererOptions, JsxRenderFunc } from './render-props';
export declare type ContentClassValue = string[] | Set<string> | {
    [klass: string]: any;
};
export declare type ContentStyleValue = string | StyleObject;
/**
 * Optional options to pass to `ReactWrapperComponent`.
 */
export interface WrapperComponentOptions {
    /**
     * Whether the host's `display` should be set to the root child node's`display`.
     * @default `false`.
     */
    readonly setHostDisplay?: boolean;
    /**
     * The zone to use to track changes to inner (Angular) templates & components.
     * @default `undefined`.
     */
    readonly ngZone?: NgZone;
}
/**
 * Base class for Angular @Components wrapping React Components.
 * Simplifies some of the handling around passing down props and CSS styling on the host component.
 */
export declare abstract class ReactWrapperComponent<TProps extends {}> implements AfterContentInit, AfterViewInit, OnChanges {
    readonly elementRef: ElementRef<HTMLElement>;
    private readonly changeDetectorRef;
    private readonly renderer;
    private _contentClass;
    private _contentStyle;
    private _ngZone;
    private _shouldSetHostDisplay;
    protected abstract reactNodeRef: ElementRef<HTMLElement>;
    /**
     * Alternative to `class` and `[ngClass]` using the same syntax.
     *
     * @description Since this is a wrapper component, sticking to the virtual DOM concept, its DOM element shouldn't have any styling of its own.
     * Instead, any value passes to `contentClass` will be passed to the root component's class as `className`.
     */
    contentClass: Many<ContentClassValue>;
    /**
     * Alternative to `style` and `[ngStyle]` using (almost) the same syntax.
     * All syntax supports by `ngStyle` is supported, with the exception of specifying units in the key (`{ 'width.px': 12 }`).
     *
     * @description Since this is a wrapper component, sticking to the virtual DOM concept, this should have any styling of its own.
     * Any value passes to `contentStyle` will be passed to the root component's style.
     */
    contentStyle: ContentStyleValue;
    /**
     * Creates an instance of ReactWrapperComponent.
     * @param elementRef The host element.
     * @param changeDetectorRef The change detector for the component.
     * @param renderer The Angular renderer.
     */
    constructor(elementRef: ElementRef<HTMLElement>, changeDetectorRef: ChangeDetectorRef, renderer: Renderer2, { setHostDisplay, ngZone }?: WrapperComponentOptions);
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Mark the component as one that needed re-rendering on the React side,
     * and mark for change detection on the Angular side.
     */
    protected markForCheck(): void;
    /**
     * Create an JSX renderer for an `@Input` property.
     * @param input The input property.
     * @param additionalProps optional additional props to pass to the `ReactContent` object that will render the content.
     */
    protected createInputJsxRenderer<TContext extends object>(input: InputRendererOptions<TContext>, additionalProps?: ReactContentProps): JsxRenderFunc<TContext> | undefined;
    /**
     * Create an event handler for a render prop
     * @param renderInputValue the value of the render `@Input` property.
     * @param jsxRenderer an optional renderer to use.
     * @param additionalProps optional additional props to pass to the `ReactContent` object that will render the content.
     */
    protected createRenderPropHandler<TRenderProps extends object>(renderInputValue: InputRendererOptions<TRenderProps>, options?: {
        jsxRenderer?: JsxRenderFunc<TRenderProps>;
        additionalProps?: ReactContentProps;
    }): (props?: TRenderProps, defaultRender?: JsxRenderFunc<TRenderProps>) => JSX.Element | null;
    private _passAttributesAsProps;
    private _setHostDisplay;
    private _isIgnoredAttribute;
    private _isForbiddenAttribute;
}
