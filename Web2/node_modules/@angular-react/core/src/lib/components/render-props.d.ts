/// <reference types="react" />
import { ComponentFactoryResolver, Type, Injector, TemplateRef, ComponentRef, NgZone } from '@angular/core';
import { RenderPropContext } from '../renderer/renderprop-helpers';
import { ReactContentProps } from '../renderer/react-content';
export declare type JsxRenderFunc<TContext> = (context: TContext) => JSX.Element;
/**
 * Render props options for creating & rendering a component.
 */
export interface RenderComponentOptions<TContext extends object> {
    readonly componentType: Type<TContext>;
    readonly factoryResolver: ComponentFactoryResolver;
    readonly injector: Injector;
}
/**
 * Allow intercepting and modifying the default props, which are then used by the default renderer.
 */
export interface RenderPropOptions<TContext extends object> {
    readonly getProps: (defaultProps?: TContext) => TContext;
}
/**
 * Various options for passing renderers as render props.
 */
export declare type InputRendererOptions<TContext extends object> = TemplateRef<TContext> | ((context: TContext) => HTMLElement) | ComponentRef<TContext> | RenderComponentOptions<TContext> | RenderPropContext<TContext> | RenderPropOptions<TContext>;
export declare function createInputJsxRenderer<TContext extends object>(input: InputRendererOptions<TContext>, ngZone: NgZone, additionalProps?: ReactContentProps): JsxRenderFunc<TContext> | undefined;
export declare function createRenderPropHandler<TProps extends object>(renderInputValue: InputRendererOptions<TProps>, ngZone: NgZone, options?: {
    jsxRenderer?: JsxRenderFunc<TProps>;
    additionalProps?: ReactContentProps;
}): (props?: TProps, defaultRender?: JsxRenderFunc<TProps>) => JSX.Element | null;
