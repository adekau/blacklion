import * as React from 'react';
export declare const CHILDREN_TO_APPEND_PROP = "children-to-append";
/**
 * Props that can be passed to `ReactContent` from users.
 */
export interface ReactContentProps {
    /**
     * Use the legacy rendering mode.
     *
     * Uses a similar approach to `router-outlet`, where the child elements are added to the parent, instead of this node, and this is hidden.
     *
     * @default false
     */
    legacyRenderMode?: boolean;
}
/**
 * Creates a new `ReactContent` element.
 * @param children The children to append to the `ReactContent` element.
 * @param additionalProps _Optional_. @see `ReactContentProps`.
 */
export declare function createReactContentElement(children: ReadonlyArray<HTMLElement>, additionalProps?: ReactContentProps): React.ComponentElement<InternalReactContentProps, ReactContent>;
/**
 * @internal
 */
interface InternalReactContentProps extends ReactContentProps {
    readonly [CHILDREN_TO_APPEND_PROP]: ReadonlyArray<HTMLElement>;
}
/**
 * Render any `HTMLElement`s as a child of React components.
 * Supports two rendering modes:
 *  1. `legacy` - append `<react-content>` as the root, and nest the `children-to-append` underneath it.
 *  2. `new` (**default**) - append the `children-to-append` to the parent of this component, and hide the `<react-content>` element.
 *     (similar to how `router-outlet` behaves in Angular).
 */
export declare class ReactContent extends React.PureComponent<InternalReactContentProps> {
    componentDidMount(): void;
    render(): React.ReactElement<{
        style: {
            display: string;
        };
    }>;
}
export {};
