import * as React from 'react';
import { StringMap } from '../declarations/string-map';
export declare function isReactNode(node: any): node is ReactNode;
/**
 * Logical representation of everything needed to render a React element in the
 * DOM, with the needed methods to do so.
 */
export declare class ReactNode {
    private type?;
    private _props;
    private _comment;
    private _text;
    private _typeIsReactElementClass;
    private _children;
    private _typeName;
    private _childrenToAppend;
    private _renderedDomElement;
    private _parent;
    private _isNotRenderable;
    private _isDestroyPending;
    private _isRenderPending;
    readonly domElement: HTMLElement;
    parent: HTMLElement | ReactNode;
    readonly shouldRender: boolean;
    readonly destroyPending: boolean;
    constructor(type?: React.ReactType | string);
    setRenderPendingCallback: () => any;
    /**
     * Track all pending render operations internally and set flag on
     * renderer factory so that a flush operation can be scheduled for
     * the "end" of render.
     */
    setRenderPending(): void;
    /**
     * Marks the node to be removed from the DOM in the next render cycle.
     */
    destroyNode(): void;
    /**
     * Sets an attribute on the node.
     * @note the value can only be a `string`. See `setProperty` for other use-cases.
     * @see `Renderer2#setAttribute`.
     *
     * @param name The attribute name.
     * @param value The new value.
     */
    setAttribute(name: string, value: string): void;
    /**
     * Set attributes on this node.
     * Note that values can only be of type `string`. See `setProperties` for other use-cases.
     * @see `Renderer2#setAttribute`.
     *
     * @param attributes the attributes to set.
     */
    setAttributes(attributes: StringMap<string>): void;
    /**
     * Sets a prop in the underlying React element.
     * @see `Renderer2#setProperty`.
     *
     * @param name The property name.
     * @param value The new value.
     */
    setProperty(name: string, value: any): void;
    /**
     * Like `setProperty` but for multiple props at once.
     *
     * @param properties An object with the props.
     */
    setProperties(properties: StringMap): void;
    /**
     * Remove a prop or an attribute from the underlying React element.
     * @see `Renderer2#removeAttribute`.
     *
     * @param name The property name.
     * @param childName _Optional_ A property of `name` to remove instead.
     * @returns the deleted property
     */
    removeProperty(name: string, childName?: string): boolean;
    /**
     * Add a direct child of this node.
     * @see `Renderer2#addChild`.
     *
     * @param node The node to add.
     */
    addChild(node: ReactNode): void;
    /**
     * Remove a direct child of this node.
     * @see `Renderer2#removeChild`.
     *
     * @param node The node to remove.
     */
    removeChild(node: ReactNode): void;
    /**
     * Cast the node to a comment node.
     * @see `Renderer2#createComment`.
     *
     * @param value the text in the comment to render.
     * @returns itself.
     */
    asComment(value: string): this;
    /**
     * Cast the node to a text node.
     * @see `Renderer2#createText`.
     *
     * @param value the text to render.
     * @returns itself.
     */
    asText(value: string): this;
    /**
     * Render the node to the DOM, or unmount it, as necessary.
     *
     * @returns itself.
     */
    render(): ReactNode;
    /**
     * Appends a child.
     *
     * @see `Renderer2#appendChild`.
     * @note This is called by Angular core when projected content is being added.
     *
     * @param projectedContent the content to project.
     */
    appendChild(projectedContent: HTMLElement): void;
    /**
     * @note for easier debugging.
     */
    toString(): string;
    private _renderRecursive;
    private _transformProps;
    private _transformProp;
    private _tryResolveTypeIsReactElementClass;
}
