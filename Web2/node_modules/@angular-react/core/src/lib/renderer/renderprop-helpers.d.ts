/// <reference types="react" />
import { ComponentRef, NgZone, TemplateRef } from '@angular/core';
import { ReactContentProps } from '../renderer/react-content';
export interface RenderPropContext<TContext extends object> {
    readonly render: (context: TContext) => JSX.Element;
}
export declare function isRenderPropContext<TContext extends object>(x: unknown): x is RenderPropContext<TContext>;
/**
 * Wrap a `TemplateRef` with a `JSX.Element`.
 *
 * @param templateRef The template to wrap
 * @param ngZone A zone used for tracking & triggering updates to the template
 * @param additionalProps optional additional props to pass to the `ReactContent` object that will render the content.
 */
export declare function createTemplateRenderer<TContext extends object>(templateRef: TemplateRef<TContext>, ngZone: NgZone, additionalProps?: ReactContentProps): RenderPropContext<TContext>;
/**
 * Wrap a function resolving to an `HTMLElement` with a `JSX.Element`.
 *
 * @param htmlRenderFunc The function to wrap
 * @param additionalProps optional additional props to pass to the `ReactContent` object that will render the content.
 */
export declare function createHtmlRenderer<TContext extends object>(htmlRenderFunc: (context: TContext) => HTMLElement, additionalProps?: ReactContentProps): RenderPropContext<TContext>;
/**
 * Wrap a `ComponentRef` with a `JSX.Element`.
 *
 * @param htmlRenderFunc The component reference to wrap
 * @param additionalProps optional additional props to pass to the `ReactContent` object that will render the content.
 */
export declare function createComponentRenderer<TContext extends object>(componentRef: ComponentRef<TContext>, additionalProps?: ReactContentProps): RenderPropContext<TContext>;
