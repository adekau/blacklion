import { Renderer2, RendererStyleFlags2, RendererType2 } from '@angular/core';
import { EventManager, ɵDomRendererFactory2, ɵDomSharedStylesHost } from '@angular/platform-browser';
import { StringMap } from '../declarations/string-map';
import { ReactNode } from './react-node';
import './geteventlisteners';
export declare class AngularReactRendererFactory extends ɵDomRendererFactory2 {
    private readonly defaultReactRenderer;
    reactRootNodes: Set<ReactNode>;
    private isRenderPending;
    readonly setRenderPendingCallback: () => void;
    constructor(eventManager: EventManager, sharedStylesHost: ɵDomSharedStylesHost);
    createRenderer(element: any, type: RendererType2 | null): Renderer2;
    begin(): void;
    end(): void;
}
export declare const isReactRendererData: (data: StringMap<any>) => data is ReactRendererData;
export interface ReactRendererData {
    readonly addRootNode: (node: ReactNode) => void;
}
export declare class ReactRenderer implements Renderer2 {
    readonly rootRenderer: AngularReactRendererFactory;
    readonly data: ReactRendererData;
    constructor(rootRenderer: AngularReactRendererFactory);
    destroy(): void;
    destroyNode(node: ReactNode): void;
    createElement(name: string, namespace?: string): ReactNode;
    createComment(value: string): ReactNode;
    createText(value: string): ReactNode;
    appendChild(parent: HTMLElement | ReactNode, node: ReactNode): void;
    insertBefore(parent: HTMLElement | void, node: ReactNode, refChild: any): void;
    removeChild(parent: HTMLElement | ReactNode | void, node: ReactNode): void;
    selectRootElement(selectorOrNode: string | any): any;
    parentNode(node: ReactNode): any;
    nextSibling(node: any): any;
    setAttribute(node: ReactNode, name: string, value: string, namespace?: string): void;
    removeAttribute(node: ReactNode, name: string, namespace?: string): void;
    addClass(node: ReactNode, name: string): void;
    removeClass(node: ReactNode, name: string): void;
    setStyle(node: ReactNode, style: string, value: any, flags: RendererStyleFlags2): void;
    removeStyle(node: ReactNode, style: string, flags: RendererStyleFlags2): void;
    setProperty(node: ReactNode, name: string, value: any): void;
    setValue(node: ReactNode, value: string): void;
    listen(target: ReactNode, event: string, callback: (event: any) => boolean): () => void;
}
