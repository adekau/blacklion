declare module '@elastic/eui/src/components/common' {
	import { AnchorHTMLAttributes, ButtonHTMLAttributes, Component, FunctionComponent, MouseEventHandler, SFC } from 'react';
	export interface CommonProps {
	    className?: string;
	    'aria-label'?: string;
	    'data-test-subj'?: string;
	}
	export type NoArgCallback<T> = () => T;
	export type RefCallback<Element extends HTMLElement | null> = (element: Element) => void;
	export type Omit<T, K> = Pick<T, Exclude<keyof T, K>>;
	/**
	 * Wraps Object.keys with proper typescript definition of the resulting array
	 */
	export function keysOf<T, K extends keyof T>(obj: T): K[];
	export type PropsOf<C> = C extends SFC<infer SFCProps> ? SFCProps : C extends FunctionComponent<infer FunctionProps> ? FunctionProps : C extends Component<infer ComponentProps> ? ComponentProps : never; type UnionKeys<T> = T extends any ? keyof T : never;
	export type DistributivePick<T, K extends UnionKeys<T>> = T extends any ? Pick<T, Extract<keyof T, K>> : never;
	export type DistributiveOmit<T, K extends UnionKeys<T>> = T extends any ? Omit<T, Extract<keyof T, K>> : never;
	/**
	 * Returns member keys in U not present in T set to never
	 * T = { 'one', 'two', 'three' }
	 * U = { 'three', 'four', 'five' }
	 * returns { 'four': never, 'five': never }
	 */
	export type DisambiguateSet<T, U> = {
	    [P in Exclude<keyof T, keyof U>]?: never;
	};
	/**
	 * Allow either T or U, preventing any additional keys of the other type from being present
	 */
	export type ExclusiveUnion<T, U> = (T | U) extends object ? (DisambiguateSet<T, U> & U) | (DisambiguateSet<U, T> & T) : T | U;
	/**
	 * For components that conditionally render <button> or <a>
	 * Convenience types for extending base props (T) and
	 * element-specific props (P) with standard clickable properties
	 *
	 * These will likely be used together, along with `ExclusiveUnion`:
	 *
	 * type AnchorLike = PropsForAnchor<BaseProps>
	 * type ButtonLike = PropsForButton<BaseProps>
	 * type ComponentProps = ExlcusiveUnion<AnchorLike, ButtonLike>
	 * const Component: FunctionComponent<ComponentProps> ...
	 */
	export type PropsForAnchor<T, P = {}> = T & AnchorHTMLAttributes<HTMLAnchorElement> & {
	    href?: string;
	    onClick?: MouseEventHandler<HTMLAnchorElement>;
	} & P;
	export type PropsForButton<T, P = {}> = T & ButtonHTMLAttributes<HTMLButtonElement> & {
	    onClick?: MouseEventHandler<HTMLButtonElement>;
	} & P;
	export {};

}
declare module '@elastic/eui/src/components/icon/icon' {
	import { Component, ReactElement, SVGAttributes } from 'react';
	import PropTypes from 'prop-types';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common'; const typeToPathMap: {
	    addDataApp: string;
	    advancedSettingsApp: string;
	    alert: string;
	    apmApp: string;
	    apmTrace: string;
	    apps: string;
	    arrowDown: string;
	    arrowLeft: string;
	    arrowRight: string;
	    arrowUp: string;
	    asterisk: string;
	    auditbeatApp: string;
	    beaker: string;
	    bell: string;
	    bolt: string;
	    boxesHorizontal: string;
	    boxesVertical: string;
	    branch: string;
	    broom: string;
	    brush: string;
	    bug: string;
	    bullseye: string;
	    calendar: string;
	    canvasApp: string;
	    codeApp: string;
	    check: string;
	    checkInCircleFilled: string;
	    clock: string;
	    cloudDrizzle: string;
	    cloudStormy: string;
	    cloudSunny: string;
	    compute: string;
	    console: string;
	    consoleApp: string;
	    controlsHorizontal: string;
	    controlsVertical: string;
	    copy: string;
	    copyClipboard: string;
	    createAdvancedJob: string;
	    createMultiMetricJob: string;
	    createPopulationJob: string;
	    createSingleMetricJob: string;
	    cross: string;
	    crossClusterReplicationApp: string;
	    crosshairs: string;
	    crossInACircleFilled: string;
	    cut: string;
	    dashboardApp: string;
	    database: string;
	    dataVisualizer: string;
	    devToolsApp: string;
	    discoverApp: string;
	    document: string;
	    documentEdit: string;
	    documents: string;
	    dot: string;
	    editorAlignCenter: string;
	    editorAlignLeft: string;
	    editorAlignRight: string;
	    editorBold: string;
	    editorCodeBlock: string;
	    editorComment: string;
	    editorDistributeHorizontal: string;
	    editorDistributeVertical: string;
	    editorHeading: string;
	    editorItalic: string;
	    editorItemAlignLeft: string;
	    editorItemAlignBottom: string;
	    editorItemAlignCenter: string;
	    editorItemAlignMiddle: string;
	    editorItemAlignRight: string;
	    editorItemAlignTop: string;
	    editorLink: string;
	    editorOrderedList: string;
	    editorPositionBottomLeft: string;
	    editorPositionBottomRight: string;
	    editorPositionTopLeft: string;
	    editorPositionTopRight: string;
	    editorRedo: string;
	    editorStrike: string;
	    editorTable: string;
	    editorUnderline: string;
	    editorUndo: string;
	    editorUnorderedList: string;
	    email: string;
	    empty: string;
	    emsApp: string;
	    exit: string;
	    expand: string;
	    exportAction: string;
	    eye: string;
	    eyeClosed: string;
	    faceHappy: string;
	    faceNeutral: string;
	    faceSad: string;
	    filebeatApp: string;
	    filter: string;
	    flag: string;
	    folderClosed: string;
	    folderOpen: string;
	    fullScreen: string;
	    gear: string;
	    gisApp: string;
	    glasses: string;
	    globe: string;
	    grab: string;
	    grabHorizontal: string;
	    graphApp: string;
	    grid: string;
	    grokApp: string;
	    heart: string;
	    heartbeatApp: string;
	    heatmap: string;
	    help: string;
	    iInCircle: string;
	    importAction: string;
	    indexClose: string;
	    indexEdit: string;
	    indexFlush: string;
	    indexManagementApp: string;
	    indexMapping: string;
	    indexOpen: string;
	    indexPatternApp: string;
	    indexRollupApp: string;
	    indexSettings: string;
	    infraApp: string;
	    inputOutput: string;
	    inspect: string;
	    invert: string;
	    kqlField: string;
	    kqlFunction: string;
	    kqlOperand: string;
	    kqlSelector: string;
	    kqlValue: string;
	    link: string;
	    list: string;
	    listAdd: string;
	    lock: string;
	    lockOpen: string;
	    loggingApp: string;
	    logoAerospike: string;
	    logoApache: string;
	    logoAPM: string;
	    logoAppSearch: string;
	    logoAWS: string;
	    logoAWSMono: string;
	    logoAzure: string;
	    logoAzureMono: string;
	    logoBeats: string;
	    logoBusinessAnalytics: string;
	    logoCeph: string;
	    logoCloud: string;
	    logoCloudEnterprise: string;
	    logoCode: string;
	    logoCodesandbox: string;
	    logoCouchbase: string;
	    logoDocker: string;
	    logoDropwizard: string;
	    logoElastic: string;
	    logoElasticsearch: string;
	    logoElasticStack: string;
	    logoEnterpriseSearch: string;
	    logoEtcd: string;
	    logoGCP: string;
	    logoGCPMono: string;
	    logoGithub: string;
	    logoGmail: string;
	    logoGolang: string;
	    logoHAproxy: string;
	    logoIBM: string;
	    logoIBMMono: string;
	    logoKafka: string;
	    logoKibana: string;
	    logoKubernetes: string;
	    logoLogging: string;
	    logoLogstash: string;
	    logoMaps: string;
	    logoMemcached: string;
	    logoMetrics: string;
	    logoMongodb: string;
	    logoMySQL: string;
	    logoNginx: string;
	    logoOsquery: string;
	    logoPhp: string;
	    logoPostgres: string;
	    logoPrometheus: string;
	    logoRabbitmq: string;
	    logoRedis: string;
	    logoSecurity: string;
	    logoSiteSearch: string;
	    logoSketch: string;
	    logoSlack: string;
	    logoUptime: string;
	    logoWebhook: string;
	    logoWindows: string;
	    logstashFilter: string;
	    logstashIf: string;
	    logstashInput: string;
	    logstashOutput: string;
	    logstashQueue: string;
	    machineLearningApp: string;
	    magnet: string;
	    magnifyWithMinus: string;
	    magnifyWithPlus: string;
	    managementApp: string;
	    mapMarker: string;
	    memory: string;
	    menuLeft: string;
	    menuRight: string;
	    merge: string;
	    metricbeatApp: string;
	    minusInCircle: string;
	    minusInCircleFilled: string;
	    monitoringApp: string;
	    moon: string;
	    node: string;
	    notebookApp: string;
	    number: string;
	    offline: string;
	    online: string;
	    packetbeatApp: string;
	    partial: string;
	    pause: string;
	    pencil: string;
	    pin: string;
	    pinFilled: string;
	    pipelineApp: string;
	    play: string;
	    plusInCircle: string;
	    plusInCircleFilled: string;
	    popout: string;
	    questionInCircle: string;
	    refresh: string;
	    reportingApp: string;
	    save: string;
	    savedObjectsApp: string;
	    scale: string;
	    search: string;
	    searchProfilerApp: string;
	    securityAnalyticsApp: string;
	    securityApp: string;
	    shard: string;
	    share: string;
	    snowflake: string;
	    sortable: string;
	    sortDown: string;
	    sortLeft: string;
	    sortRight: string;
	    sortUp: string;
	    spacesApp: string;
	    sqlApp: string;
	    starEmpty: string;
	    starEmptySpace: string;
	    starFilled: string;
	    starFilledSpace: string;
	    starMinusEmpty: string;
	    starMinusFilled: string;
	    starPlusEmpty: string;
	    starPlusFilled: string;
	    stats: string;
	    stop: string;
	    stopFilled: string;
	    stopSlash: string;
	    storage: string;
	    string: string;
	    submodule: string;
	    swatchInput: string;
	    symlink: string;
	    tableOfContents: string;
	    tag: string;
	    tear: string;
	    temperature: string;
	    timelionApp: string;
	    training: string;
	    trash: string;
	    upgradeAssistantApp: string;
	    uptimeApp: string;
	    user: string;
	    usersRolesApp: string;
	    vector: string;
	    videoPlayer: string;
	    visArea: string;
	    visBarHorizontal: string;
	    visBarVertical: string;
	    visControls: string;
	    visGauge: string;
	    visGoal: string;
	    visHeatmap: string;
	    visLine: string;
	    visMapCoordinate: string;
	    visMapRegion: string;
	    visMetric: string;
	    visPie: string;
	    visTable: string;
	    visTagCloud: string;
	    visText: string;
	    visTimelion: string;
	    visualizeApp: string;
	    visVega: string;
	    visVisualBuilder: string;
	    watchesApp: string;
	    wrench: string;
	    tokenClass: string;
	    tokenProperty: string;
	    tokenEnum: string;
	    tokenVariable: string;
	    tokenMethod: string;
	    tokenAnnotation: string;
	    tokenException: string;
	    tokenInterface: string;
	    tokenParameter: string;
	    tokenField: string;
	    tokenElement: string;
	    tokenFunction: string;
	    tokenBoolean: string;
	    tokenString: string;
	    tokenArray: string;
	    tokenNumber: string;
	    tokenConstant: string;
	    tokenObject: string;
	    tokenEvent: string;
	    tokenKey: string;
	    tokenNull: string;
	    tokenStruct: string;
	    tokenPackage: string;
	    tokenOperator: string;
	    tokenEnumMember: string;
	    tokenRepo: string;
	    tokenSymbol: string;
	    tokenFile: string;
	    tokenModule: string;
	    tokenNamespace: string;
	};
	export const TYPES: ("string" | "number" | "search" | "link" | "alert" | "apps" | "asterisk" | "beaker" | "bell" | "bolt" | "branch" | "broom" | "brush" | "bug" | "bullseye" | "calendar" | "check" | "checkInCircleFilled" | "clock" | "cloudDrizzle" | "cloudStormy" | "cloudSunny" | "compute" | "console" | "copy" | "cross" | "crosshairs" | "crossInACircleFilled" | "cut" | "database" | "document" | "documentEdit" | "documents" | "dot" | "editorDistributeHorizontal" | "editorDistributeVertical" | "editorItemAlignLeft" | "editorItemAlignBottom" | "editorItemAlignCenter" | "editorItemAlignMiddle" | "editorItemAlignRight" | "editorItemAlignTop" | "editorPositionBottomLeft" | "editorPositionBottomRight" | "editorPositionTopLeft" | "editorPositionTopRight" | "email" | "empty" | "exit" | "expand" | "eye" | "faceNeutral" | "filter" | "flag" | "gear" | "glasses" | "globe" | "grab" | "grid" | "heart" | "heatmap" | "help" | "iInCircle" | "inputOutput" | "inspect" | "invert" | "list" | "lock" | "lockOpen" | "magnet" | "magnifyWithMinus" | "magnifyWithPlus" | "memory" | "menuLeft" | "menuRight" | "merge" | "moon" | "node" | "offline" | "online" | "partial" | "pause" | "pencil" | "pin" | "play" | "popout" | "refresh" | "save" | "scale" | "shard" | "share" | "snowflake" | "sortable" | "sortLeft" | "sortRight" | "starPlusEmpty" | "starPlusFilled" | "stats" | "stop" | "storage" | "submodule" | "symlink" | "tableOfContents" | "tag" | "tear" | "temperature" | "training" | "trash" | "user" | "vector" | "videoPlayer" | "wrench" | "addDataApp" | "advancedSettingsApp" | "apmApp" | "apmTrace" | "arrowDown" | "arrowLeft" | "arrowRight" | "arrowUp" | "auditbeatApp" | "boxesHorizontal" | "boxesVertical" | "canvasApp" | "codeApp" | "consoleApp" | "controlsHorizontal" | "controlsVertical" | "copyClipboard" | "createAdvancedJob" | "createMultiMetricJob" | "createPopulationJob" | "createSingleMetricJob" | "crossClusterReplicationApp" | "dashboardApp" | "dataVisualizer" | "devToolsApp" | "discoverApp" | "editorAlignCenter" | "editorAlignLeft" | "editorAlignRight" | "editorBold" | "editorCodeBlock" | "editorComment" | "editorHeading" | "editorItalic" | "editorLink" | "editorOrderedList" | "editorRedo" | "editorStrike" | "editorTable" | "editorUnderline" | "editorUndo" | "editorUnorderedList" | "emsApp" | "exportAction" | "eyeClosed" | "faceHappy" | "faceSad" | "filebeatApp" | "folderClosed" | "folderOpen" | "fullScreen" | "gisApp" | "grabHorizontal" | "graphApp" | "grokApp" | "heartbeatApp" | "importAction" | "indexClose" | "indexEdit" | "indexFlush" | "indexManagementApp" | "indexMapping" | "indexOpen" | "indexPatternApp" | "indexRollupApp" | "indexSettings" | "infraApp" | "kqlField" | "kqlFunction" | "kqlOperand" | "kqlSelector" | "kqlValue" | "listAdd" | "loggingApp" | "logoAerospike" | "logoApache" | "logoAPM" | "logoAppSearch" | "logoAWS" | "logoAWSMono" | "logoAzure" | "logoAzureMono" | "logoBeats" | "logoBusinessAnalytics" | "logoCeph" | "logoCloud" | "logoCloudEnterprise" | "logoCode" | "logoCodesandbox" | "logoCouchbase" | "logoDocker" | "logoDropwizard" | "logoElastic" | "logoElasticsearch" | "logoElasticStack" | "logoEnterpriseSearch" | "logoEtcd" | "logoGCP" | "logoGCPMono" | "logoGithub" | "logoGmail" | "logoGolang" | "logoHAproxy" | "logoIBM" | "logoIBMMono" | "logoKafka" | "logoKibana" | "logoKubernetes" | "logoLogging" | "logoLogstash" | "logoMaps" | "logoMemcached" | "logoMetrics" | "logoMongodb" | "logoMySQL" | "logoNginx" | "logoOsquery" | "logoPhp" | "logoPostgres" | "logoPrometheus" | "logoRabbitmq" | "logoRedis" | "logoSecurity" | "logoSiteSearch" | "logoSketch" | "logoSlack" | "logoUptime" | "logoWebhook" | "logoWindows" | "logstashFilter" | "logstashIf" | "logstashInput" | "logstashOutput" | "logstashQueue" | "machineLearningApp" | "managementApp" | "mapMarker" | "metricbeatApp" | "minusInCircle" | "minusInCircleFilled" | "monitoringApp" | "notebookApp" | "packetbeatApp" | "pinFilled" | "pipelineApp" | "plusInCircle" | "plusInCircleFilled" | "questionInCircle" | "reportingApp" | "savedObjectsApp" | "searchProfilerApp" | "securityAnalyticsApp" | "securityApp" | "sortDown" | "sortUp" | "spacesApp" | "sqlApp" | "starEmpty" | "starEmptySpace" | "starFilled" | "starFilledSpace" | "starMinusEmpty" | "starMinusFilled" | "stopFilled" | "stopSlash" | "swatchInput" | "timelionApp" | "upgradeAssistantApp" | "uptimeApp" | "usersRolesApp" | "visArea" | "visBarHorizontal" | "visBarVertical" | "visControls" | "visGauge" | "visGoal" | "visHeatmap" | "visLine" | "visMapCoordinate" | "visMapRegion" | "visMetric" | "visPie" | "visTable" | "visTagCloud" | "visText" | "visTimelion" | "visualizeApp" | "visVega" | "visVisualBuilder" | "watchesApp" | "tokenClass" | "tokenProperty" | "tokenEnum" | "tokenVariable" | "tokenMethod" | "tokenAnnotation" | "tokenException" | "tokenInterface" | "tokenParameter" | "tokenField" | "tokenElement" | "tokenFunction" | "tokenBoolean" | "tokenString" | "tokenArray" | "tokenNumber" | "tokenConstant" | "tokenObject" | "tokenEvent" | "tokenKey" | "tokenNull" | "tokenStruct" | "tokenPackage" | "tokenOperator" | "tokenEnumMember" | "tokenRepo" | "tokenSymbol" | "tokenFile" | "tokenModule" | "tokenNamespace")[];
	export type EuiIconType = keyof typeof typeToPathMap;
	export type IconType = EuiIconType | string | ReactElement;
	export const IconPropType: PropTypes.Requireable<string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>; const colorToClassMap: {
	    default: null;
	    primary: string;
	    secondary: string;
	    success: string;
	    accent: string;
	    warning: string;
	    danger: string;
	    text: string;
	    subdued: string;
	    ghost: string;
	};
	export const COLORS: NamedColor[]; type NamedColor = keyof typeof colorToClassMap;
	export type IconColor = string | NamedColor; const sizeToClassNameMap: {
	    original: null;
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	    xxl: string;
	};
	export const SIZES: IconSize[];
	export type IconSize = keyof typeof sizeToClassNameMap;
	export interface EuiIconProps {
	    /**
	     * `Enum` is any of the named icons listed in the docs, `Element` is any React SVG element, and `string` is usually a URL to an SVG file
	     */
	    type: IconType;
	    /**
	     * One of EUI's color palette or a valid CSS color value https://developer.mozilla.org/en-US/docs/Web/CSS/color_value.
	     * Note that coloring only works if your SVG is removed of fill attributes.
	     */
	    color?: IconColor;
	    /**
	     * Note that every size other than `original` assumes the provided SVG sits on a square viewbox.
	     */
	    size?: IconSize;
	} type Props = CommonProps & Omit<SVGAttributes<SVGElement>, keyof EuiIconProps> & EuiIconProps;
	interface State {
	    icon: undefined | ReactElement | string;
	    isLoading: boolean;
	}
	export class EuiIcon extends Component<Props, State> {
	    isMounted: boolean;
	    constructor(props: Props);
	    componentDidUpdate(prevProps: Props): void;
	    componentWillUnmount(): void;
	    loadIconComponent: (iconType: "string" | "number" | "search" | "link" | "alert" | "apps" | "asterisk" | "beaker" | "bell" | "bolt" | "branch" | "broom" | "brush" | "bug" | "bullseye" | "calendar" | "check" | "checkInCircleFilled" | "clock" | "cloudDrizzle" | "cloudStormy" | "cloudSunny" | "compute" | "console" | "copy" | "cross" | "crosshairs" | "crossInACircleFilled" | "cut" | "database" | "document" | "documentEdit" | "documents" | "dot" | "editorDistributeHorizontal" | "editorDistributeVertical" | "editorItemAlignLeft" | "editorItemAlignBottom" | "editorItemAlignCenter" | "editorItemAlignMiddle" | "editorItemAlignRight" | "editorItemAlignTop" | "editorPositionBottomLeft" | "editorPositionBottomRight" | "editorPositionTopLeft" | "editorPositionTopRight" | "email" | "empty" | "exit" | "expand" | "eye" | "faceNeutral" | "filter" | "flag" | "gear" | "glasses" | "globe" | "grab" | "grid" | "heart" | "heatmap" | "help" | "iInCircle" | "inputOutput" | "inspect" | "invert" | "list" | "lock" | "lockOpen" | "magnet" | "magnifyWithMinus" | "magnifyWithPlus" | "memory" | "menuLeft" | "menuRight" | "merge" | "moon" | "node" | "offline" | "online" | "partial" | "pause" | "pencil" | "pin" | "play" | "popout" | "refresh" | "save" | "scale" | "shard" | "share" | "snowflake" | "sortable" | "sortLeft" | "sortRight" | "starPlusEmpty" | "starPlusFilled" | "stats" | "stop" | "storage" | "submodule" | "symlink" | "tableOfContents" | "tag" | "tear" | "temperature" | "training" | "trash" | "user" | "vector" | "videoPlayer" | "wrench" | "addDataApp" | "advancedSettingsApp" | "apmApp" | "apmTrace" | "arrowDown" | "arrowLeft" | "arrowRight" | "arrowUp" | "auditbeatApp" | "boxesHorizontal" | "boxesVertical" | "canvasApp" | "codeApp" | "consoleApp" | "controlsHorizontal" | "controlsVertical" | "copyClipboard" | "createAdvancedJob" | "createMultiMetricJob" | "createPopulationJob" | "createSingleMetricJob" | "crossClusterReplicationApp" | "dashboardApp" | "dataVisualizer" | "devToolsApp" | "discoverApp" | "editorAlignCenter" | "editorAlignLeft" | "editorAlignRight" | "editorBold" | "editorCodeBlock" | "editorComment" | "editorHeading" | "editorItalic" | "editorLink" | "editorOrderedList" | "editorRedo" | "editorStrike" | "editorTable" | "editorUnderline" | "editorUndo" | "editorUnorderedList" | "emsApp" | "exportAction" | "eyeClosed" | "faceHappy" | "faceSad" | "filebeatApp" | "folderClosed" | "folderOpen" | "fullScreen" | "gisApp" | "grabHorizontal" | "graphApp" | "grokApp" | "heartbeatApp" | "importAction" | "indexClose" | "indexEdit" | "indexFlush" | "indexManagementApp" | "indexMapping" | "indexOpen" | "indexPatternApp" | "indexRollupApp" | "indexSettings" | "infraApp" | "kqlField" | "kqlFunction" | "kqlOperand" | "kqlSelector" | "kqlValue" | "listAdd" | "loggingApp" | "logoAerospike" | "logoApache" | "logoAPM" | "logoAppSearch" | "logoAWS" | "logoAWSMono" | "logoAzure" | "logoAzureMono" | "logoBeats" | "logoBusinessAnalytics" | "logoCeph" | "logoCloud" | "logoCloudEnterprise" | "logoCode" | "logoCodesandbox" | "logoCouchbase" | "logoDocker" | "logoDropwizard" | "logoElastic" | "logoElasticsearch" | "logoElasticStack" | "logoEnterpriseSearch" | "logoEtcd" | "logoGCP" | "logoGCPMono" | "logoGithub" | "logoGmail" | "logoGolang" | "logoHAproxy" | "logoIBM" | "logoIBMMono" | "logoKafka" | "logoKibana" | "logoKubernetes" | "logoLogging" | "logoLogstash" | "logoMaps" | "logoMemcached" | "logoMetrics" | "logoMongodb" | "logoMySQL" | "logoNginx" | "logoOsquery" | "logoPhp" | "logoPostgres" | "logoPrometheus" | "logoRabbitmq" | "logoRedis" | "logoSecurity" | "logoSiteSearch" | "logoSketch" | "logoSlack" | "logoUptime" | "logoWebhook" | "logoWindows" | "logstashFilter" | "logstashIf" | "logstashInput" | "logstashOutput" | "logstashQueue" | "machineLearningApp" | "managementApp" | "mapMarker" | "metricbeatApp" | "minusInCircle" | "minusInCircleFilled" | "monitoringApp" | "notebookApp" | "packetbeatApp" | "pinFilled" | "pipelineApp" | "plusInCircle" | "plusInCircleFilled" | "questionInCircle" | "reportingApp" | "savedObjectsApp" | "searchProfilerApp" | "securityAnalyticsApp" | "securityApp" | "sortDown" | "sortUp" | "spacesApp" | "sqlApp" | "starEmpty" | "starEmptySpace" | "starFilled" | "starFilledSpace" | "starMinusEmpty" | "starMinusFilled" | "stopFilled" | "stopSlash" | "swatchInput" | "timelionApp" | "upgradeAssistantApp" | "uptimeApp" | "usersRolesApp" | "visArea" | "visBarHorizontal" | "visBarVertical" | "visControls" | "visGauge" | "visGoal" | "visHeatmap" | "visLine" | "visMapCoordinate" | "visMapRegion" | "visMetric" | "visPie" | "visTable" | "visTagCloud" | "visText" | "visTimelion" | "visualizeApp" | "visVega" | "visVisualBuilder" | "watchesApp" | "tokenClass" | "tokenProperty" | "tokenEnum" | "tokenVariable" | "tokenMethod" | "tokenAnnotation" | "tokenException" | "tokenInterface" | "tokenParameter" | "tokenField" | "tokenElement" | "tokenFunction" | "tokenBoolean" | "tokenString" | "tokenArray" | "tokenNumber" | "tokenConstant" | "tokenObject" | "tokenEvent" | "tokenKey" | "tokenNull" | "tokenStruct" | "tokenPackage" | "tokenOperator" | "tokenEnumMember" | "tokenRepo" | "tokenSymbol" | "tokenFile" | "tokenModule" | "tokenNamespace") => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui' {
	export { EuiIcon, IconColor, IconSize, IconType, IconPropType, TYPES as ICON_TYPES, SIZES as ICON_SIZES, COLORS as ICON_COLORS, } from '@elastic/eui/src/components/icon/icon';

}
declare module '@elastic/eui' {
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui';

	import { FunctionComponent, ReactNode, HTMLAttributes } from 'react'; module '@elastic/eui' {
	  /**
	   * EuiCallOut type defs
	   *
	   * @see './code.js'
	   */

	  type Color = 'primary' | 'success' | 'warning' | 'danger';
	  type Size = 's' | 'm';

	  export interface EuiCallOutProps {
	    title?: ReactNode;
	    iconType?: IconType;
	    color?: Color;
	    size?: Size;
	  }

	  export const EuiCallOut: FunctionComponent<
	    CommonProps &
	      EuiCallOutProps &
	      Omit<HTMLAttributes<HTMLDivElement>, 'title'>
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { FunctionComponent, HTMLAttributes } from 'react'; module '@elastic/eui' {
	  type FontSize = 's' | 'm' | 'l';
	  type PaddingSize = 'none' | 's' | 'm' | 'l';

	  // there isn't a specific type for the <code> element, and MDN
	  // says that it only supports the HTMLElement interface
	  // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code
	  type HTMLCodeElement = HTMLElement;

	  interface EuiCodeSharedProps {
	    paddingSize?: PaddingSize;

	    /**
	     * Sets the syntax highlighting for a specific language
	     * See http://highlightjs.readthedocs.io/en/latest/css-classes-reference.html#language-names-and-aliases
	     * for options
	     */
	    language?: string;

	    overflowHeight?: number;
	    fontSize?: FontSize;
	    transparentBackground?: boolean;
	    isCopyable?: boolean;
	  }

	  /**
	   * EuiCode type defs
	   *
	   * @see './code.js'
	   */

	  export interface EuiCodeProps extends EuiCodeSharedProps {
	    inline?: true;
	  }

	  export const EuiCode: FunctionComponent<
	    CommonProps & EuiCodeProps & HTMLAttributes<HTMLCodeElement>
	  >;

	  /**
	   * EuiCodeBlock type defs
	   *
	   * @see './code_block.js'
	   */

	  export interface EuiCodeBlockProps extends EuiCodeSharedProps {
	    inline?: false;
	  }

	  export const EuiCodeBlock: FunctionComponent<
	    CommonProps & EuiCodeBlockProps & HTMLAttributes<HTMLCodeElement>
	  >;
	}

}
declare module '@elastic/eui/src/components/card/card_graphic' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiCardGraphicColor = 'blue' | 'green' | 'purple';
	export const GRAPHIC_COLORS: EuiCardGraphicColor[];
	export type EuiCardGraphicProps = HTMLAttributes<SVGElement> & CommonProps & {
	    /**
	     * Determines the brand-driven color codes used in the SVG
	     */
	    color?: EuiCardGraphicColor;
	};
	export const EuiCardGraphic: FunctionComponent<EuiCardGraphicProps>;

}
declare module '@elastic/eui' {
	export { EuiCardGraphic } from '@elastic/eui/src/components/card/card_graphic';

}
declare module '@elastic/eui/src/components/color_picker/color_picker_swatch' {
	import { ButtonHTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	export type EuiColorPickerSwatchProps = CommonProps & Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'color'> & {
	    color?: string;
	};
	export const EuiColorPickerSwatch: FunctionComponent<EuiColorPickerSwatchProps>;

}
declare module '@elastic/eui/src/services/key_codes' {
	export const ENTER = 13;
	export const SPACE = 32;
	export const ESCAPE = 27;
	export const TAB = 9;
	export const BACKSPACE = 8;
	export const DOWN = 40;
	export const UP = 38;
	export const LEFT = 37;
	export const RIGHT = 39;
	export enum keyCodes {
	    ENTER = 13,
	    SPACE = 32,
	    ESCAPE = 27,
	    TAB = 9,
	    BACKSPACE = 8,
	    DOWN = 40,
	    UP = 38,
	    LEFT = 37,
	    RIGHT = 39
	}

}
declare module '@elastic/eui/src/services/accessibility/accessible_click_keys' {
	import { ENTER, SPACE } from '@elastic/eui/src/services/key_codes';
	export const accessibleClickKeys: {
	    [ENTER]: string;
	    [SPACE]: string;
	};

}
declare module '@elastic/eui/src/services/accessibility/cascading_menu_key_codes' {
	/**
	 * These keys are used for navigating cascading menu UI components.
	 *
	 * UP: Select the previous item in the list.
	 * DOWN: Select the next item in the list.
	 * LEFT: Show the previous menu.
	 * RIGHT: Show the next menu for the selected item.
	 * ESC: Deselect the current selection and hide the list.
	 * TAB: Normal tabbing navigation is still supported.
	 */
	export const cascadingMenuKeyCodes: {
	    DOWN: number;
	    ESCAPE: number;
	    LEFT: number;
	    RIGHT: number;
	    UP: number;
	    TAB: number;
	};

}
declare module '@elastic/eui/src/services/accessibility/combo_box_key_codes' {
	/**
	 * These keys are used for navigating combobox UI components.
	 *
	 * UP: Select the previous item in the list.
	 * DOWN: Select the next item in the list.
	 * ENTER / TAB: Complete input with the current selection.
	 * ESC: Deselect the current selection and hide the list.
	 */
	export const comboBoxKeyCodes: {
	    DOWN: number;
	    ENTER: number;
	    ESCAPE: number;
	    TAB: number;
	    UP: number;
	};

}
declare module '@elastic/eui/src/services/accessibility/html_id_generator' {
	/**
	 * This function returns a function to generate ids.
	 * This can be used to generate unique, but predictable ids to pair labels
	 * with their inputs. It takes an optional prefix as a parameter. If you don't
	 * specify it, it generates a random id prefix. If you specify a custom prefix
	 * it should begin with an letter to be HTML4 compliant.
	 */
	export function htmlIdGenerator(idPrefix?: string): (suffix?: string | undefined) => string;

}
declare module '@elastic/eui/src/services/accessibility' {
	export { accessibleClickKeys } from '@elastic/eui/src/services/accessibility/accessible_click_keys';
	export { cascadingMenuKeyCodes } from '@elastic/eui/src/services/accessibility/cascading_menu_key_codes';
	export { comboBoxKeyCodes } from '@elastic/eui/src/services/accessibility/combo_box_key_codes';
	export { htmlIdGenerator } from '@elastic/eui/src/services/accessibility/html_id_generator';

}
declare module '@elastic/eui/src/services/alignment' {
	export const LEFT_ALIGNMENT = "left";
	export const RIGHT_ALIGNMENT = "right";
	export const CENTER_ALIGNMENT = "center";
	export type HorizontalAlignment = 'left' | 'right' | 'center';

}
declare module '@elastic/eui/src/services/color/is_color_dark' {
	/**
	 * This function calculates if the specified color is "dark", which usually means
	 * you need light text if you use it as a background color to fulfill WCAG contrast
	 * requirement.
	 * The color must be specified via its red, green and blue value in the range of
	 * 0 to 255.
	 * The formula is based on this Stackoverflow answer: https://stackoverflow.com/a/3943023
	 * which itself is based upon the WCAG recommendation for color contrast.
	 *
	 * @param {number} red The red component in the range 0 to 255
	 * @param {number} green The green component in the range 0 to 255
	 * @param {number} blue The blue component in the range 0 to 255
	 * @returns {boolean} True if the color is dark, false otherwise.
	 */
	export function isColorDark(red: number, green: number, blue: number): boolean;

}
declare module '@elastic/eui/src/services/color/is_valid_hex' {
	export function isValidHex(hex: string): boolean;

}
declare module '@elastic/eui/src/services/color/color_types' {
	export type rgbDef = [number, number, number];
	export interface HSV {
	    h: number;
	    s: number;
	    v: number;
	}
	export interface RGB {
	    r: number;
	    g: number;
	    b: number;
	}
	export type HEX = string;

}
declare module '@elastic/eui/src/services/color/hex_to_rgb' {
	import { rgbDef } from '@elastic/eui/src/services/color/color_types';
	export function hexToRgb(hex: string): rgbDef;

}
declare module '@elastic/eui/src/services/color/rgb_to_hsv' {
	import { HSV, RGB } from '@elastic/eui/src/services/color/color_types';
	export function rgbToHsv({ r, g, b }: RGB): HSV;

}
declare module '@elastic/eui/src/services/color/hex_to_hsv' {
	import { HEX, HSV } from '@elastic/eui/src/services/color/color_types';
	export function hexToHsv(hex: HEX): HSV;

}
declare module '@elastic/eui/src/services/color/hsv_to_rgb' {
	import { HSV, RGB } from '@elastic/eui/src/services/color/color_types';
	export function hsvToRgb({ h, s, v }: HSV): RGB;

}
declare module '@elastic/eui/src/services/color/rgb_to_hex' {
	export function rgbToHex(rgb: string): string;

}
declare module '@elastic/eui/src/services/color/hsv_to_hex' {
	import { HEX, HSV } from '@elastic/eui/src/services/color/color_types';
	export function hsvToHex({ h, s, v }: HSV): HEX;

}
declare module '@elastic/eui/src/services/color/luminance_and_contrast' {
	import { rgbDef } from '@elastic/eui/src/services/color/color_types';
	export function calculateLuminance(r: number, g: number, b: number): number;
	export function calculateContrast(rgb1: rgbDef, rgb2: rgbDef): number;

}
declare module '@elastic/eui/src/services/color/visualization_colors' {
	export const VISUALIZATION_COLORS: string[];
	export const DEFAULT_VISUALIZATION_COLOR: string;

}
declare module '@elastic/eui/src/services/color/color_palette' {
	/**
	 * This function takes a color palette name and returns an array of hex color
	 * codes for use in UI elements such as charts.
	 *
	 * @param {string} hexStart The beginning hexadecimal color code
	 * @param {string} hexEnd The ending hexadecimal color code
	 * @param {number} len The number of colors in the resulting array (default 10)
	 * @returns {Array} Returns an array of hexadecimal color codes
	 */
	export function colorPalette(hexStart: string, hexEnd: string, len?: number): string[];

}
declare module '@elastic/eui/src/services/color/eui_palettes' {
	interface EuiPalette {
	    colors: string[];
	}
	export const palettes: {
	    euiPaletteColorBlind: EuiPalette;
	    euiPaletteForLightBackground: EuiPalette;
	    euiPaletteForDarkBackground: EuiPalette;
	    euiPaletteForStatus: EuiPalette;
	};
	export {};

}
declare module '@elastic/eui/src/services/color' {
	export { isColorDark } from '@elastic/eui/src/services/color/is_color_dark';
	export { isValidHex } from '@elastic/eui/src/services/color/is_valid_hex';
	export { hexToHsv } from '@elastic/eui/src/services/color/hex_to_hsv';
	export { hexToRgb } from '@elastic/eui/src/services/color/hex_to_rgb';
	export { hsvToHex } from '@elastic/eui/src/services/color/hsv_to_hex';
	export { hsvToRgb } from '@elastic/eui/src/services/color/hsv_to_rgb';
	export { rgbToHex } from '@elastic/eui/src/services/color/rgb_to_hex';
	export { rgbToHsv } from '@elastic/eui/src/services/color/rgb_to_hsv';
	export { calculateContrast, calculateLuminance, } from '@elastic/eui/src/services/color/luminance_and_contrast';
	export { VISUALIZATION_COLORS, DEFAULT_VISUALIZATION_COLOR, } from '@elastic/eui/src/services/color/visualization_colors';
	export { colorPalette } from '@elastic/eui/src/services/color/color_palette';
	export { palettes } from '@elastic/eui/src/services/color/eui_palettes';
	export { rgbDef, HSV, RGB } from '@elastic/eui/src/services/color/color_types';

}
declare module '@elastic/eui/src/services/copy_to_clipboard' {
	export function copyToClipboard(text: string): boolean;

}
declare module '@elastic/eui/src/services/predicate/common_predicates' {
	export const always: (_value?: any) => boolean;
	export const never: (_value?: any) => boolean;
	export const isUndefined: (value: any) => value is undefined;
	export const isNull: (value: any) => value is null;
	export const isNil: (value: any) => value is null | undefined;
	export const isMoment: (value: any) => boolean;
	export const isDate: (value: any) => value is Date;
	export const isDateLike: (value: any) => boolean;

}
declare module '@elastic/eui/src/services/predicate/lodash_predicates' {
	export const isFunction: (value: any) => value is (...args: any[]) => any;
	export const isArray: (value: any) => value is any[];
	export const isString: (value: any) => value is string;
	export const isBoolean: (value: any) => value is boolean;
	export const isNumber: (value: any) => value is number;
	export const isNaN: (value: any) => boolean;

}
declare module '@elastic/eui/src/services/predicate' {
	export * from '@elastic/eui/src/services/predicate/common_predicates';
	export * from '@elastic/eui/src/services/predicate/lodash_predicates';

}
declare module '@elastic/eui/src/services/format/format_boolean' {
	export const formatBoolean: (value: boolean, { yes, no, nil }?: {
	    yes?: string | undefined;
	    no?: string | undefined;
	    nil?: string | undefined;
	}) => string;

}
declare module '@elastic/eui/src/services/format/format_date' {
	import moment from 'moment'; type CalendarOptions = moment.CalendarSpec & {
	    refTime?: moment.MomentInput;
	};
	export const dateFormatAliases: {
	    date: string;
	    longDate: string;
	    shortDate: string;
	    dateTime: string;
	    longDateTime: string;
	    shortDateTime: string;
	    dobShort: string;
	    dobLong: string;
	    iso8601: string;
	    calendar: (value: moment.MomentInput, options?: CalendarOptions) => string;
	    calendarDateTime: (value: moment.MomentInput, options: moment.CalendarSpec) => string;
	    calendarDate: (value: moment.MomentInput, options: moment.CalendarSpec) => string;
	}; type DateFormat = keyof typeof dateFormatAliases;
	interface FormatDateConfig {
	    format: DateFormat;
	    nil: string;
	    options: any;
	}
	export const formatDate: (value?: moment.MomentInput, dateFormatKeyOrConfig?: DateFormat | string | Partial<FormatDateConfig>) => string;
	export {};

}
declare module '@elastic/eui/src/services/format/format_number' {
	interface FormatNumberConfig {
	    format: string;
	    nil: string;
	    round: boolean;
	}
	export const formatNumber: (value?: number | null | undefined, numberFormatOrConfig?: string | Partial<FormatNumberConfig>) => string;
	export {};

}
declare module '@elastic/eui/src/services/format/format_text' {
	interface FormatTextOptions {
	    nil: string;
	}
	export const formatText: (value?: any, options?: Partial<FormatTextOptions>) => any;
	export {};

}
declare module '@elastic/eui/src/services/format/format_auto' {
	export const formatAuto: (value: any) => string;

}
declare module '@elastic/eui/src/services/format' {
	export { formatAuto } from '@elastic/eui/src/services/format/format_auto';
	export { formatBoolean } from '@elastic/eui/src/services/format/format_boolean';
	export { formatDate, dateFormatAliases } from '@elastic/eui/src/services/format/format_date';
	export { formatNumber } from '@elastic/eui/src/services/format/format_number';
	export { formatText } from '@elastic/eui/src/services/format/format_text';

}
declare module '@elastic/eui/src/services/number/number' {
	
	export const isWithinRange: (min: import("react").ReactText, max: import("react").ReactText, value: import("react").ReactText) => boolean;
	export function isEvenlyDivisibleBy(num: number, factor: number): boolean;

}
declare module '@elastic/eui/src/services/number' {
	export * from '@elastic/eui/src/services/number/number';

}
declare module '@elastic/eui/src/services/paging/pager' {
	export class Pager {
	    currentPageIndex: number;
	    firstItemIndex: number;
	    itemsPerPage: number;
	    lastItemIndex: number;
	    totalItems: number;
	    totalPages: number;
	    constructor(totalItems: number, itemsPerPage: number, initialPageIndex?: number);
	    setTotalItems: (totalItems: number) => void;
	    setItemsPerPage: (itemsPerPage: number) => void;
	    isPageable: () => boolean;
	    getTotalPages: () => number;
	    getCurrentPageIndex: () => number;
	    getFirstItemIndex: () => number;
	    getLastItemIndex: () => number;
	    hasNextPage: () => boolean;
	    hasPreviousPage: () => boolean;
	    goToNextPage: () => void;
	    goToPreviousPage: () => void;
	    goToPageIndex: (pageIndex: number) => void;
	    update: () => void;
	}

}
declare module '@elastic/eui/src/services/paging' {
	export { Pager } from '@elastic/eui/src/services/paging/pager';

}
declare module '@elastic/eui/src/services/utils' {
	export function times<T>(count: number): number[];
	export function times<T>(count: number, iteratee: (index: number) => T): T[];
	export function memoize<T extends (...args: any[]) => any>(func: T, resolver?: (...args: any[]) => any): (...args: Parameters<T>) => ReturnType<T>;
	export const browserTick: (callback: FrameRequestCallback) => void;

}
declare module '@elastic/eui/src/services/random' {
	import moment from 'moment';
	export class Random {
	    private readonly rand;
	    constructor(rand?: () => number);
	    boolean: () => boolean;
	    number: (options?: {
	        min?: number | undefined;
	        max?: number | undefined;
	    }) => number;
	    integer: (options?: {
	        min?: number | undefined;
	        max?: number | undefined;
	    }) => number;
	    oneOf: <T>(values: T[]) => T;
	    oneToOne: <T>(values: T[], index: number) => T;
	    setOf: <T>(values: T[], options?: {
	        min?: number | undefined;
	        max?: number | undefined;
	    }) => T[];
	    date: (options?: {
	        min?: Date | undefined;
	        max?: Date | undefined;
	    }) => Date;
	    moment: (options?: {
	        min?: moment.Moment | undefined;
	        max?: moment.Moment | undefined;
	    }) => moment.Moment;
	}

}
declare module '@elastic/eui/src/services/url' {
	export const isDomainSecure: (url?: string) => boolean;

}
declare module '@elastic/eui/src/services/security/get_secure_rel_for_target' {
	export const getSecureRelForTarget: ({ href, target, rel, }: {
	    href?: string | undefined;
	    target?: string | undefined;
	    rel?: string | undefined;
	}) => string;

}
declare module '@elastic/eui/src/services/security' {
	export { getSecureRelForTarget } from '@elastic/eui/src/services/security/get_secure_rel_for_target';

}
declare module '@elastic/eui/src/services/string/to_initials' {
	/**
	 * This function calculates the initials/acronym for a given name.
	 * It defaults to only 2 characters and will take the first character (of each word).
	 * If only one word is supplied for the name, it will only pass back the first letter of the word,
	 * unless forced to 2 letters by setting `initialsLength` to `2`.
	 * It will pass back the characters with the same casing as the original string
	 * unless otherwise specified.
	 *
	 * @param {string} name The full name of the item to turn into initials
	 * @param {number} initialsLength (Optional) How many characters to show (max 2 allowed)
	 * @param {string} initials (Optional) Custom initials (max 2 characters)
	 * @returns {string} True if the color is dark, false otherwise.
	 */
	export const MAX_INITIALS = 2;
	export function toInitials(name: string, initialsLength?: 1 | 2, initials?: string): string | null;

}
declare module '@elastic/eui/src/services/string/to_case' {
	/**
	 * This function returns the same string with the first letter of the first word capitalized.
	 *
	 * @param {string} strint The input string
	 */
	export function toSentenceCase(string: string): string;

}
declare module '@elastic/eui/src/services/string' {
	export { toInitials } from '@elastic/eui/src/services/string/to_initials';
	export { toSentenceCase } from '@elastic/eui/src/services/string/to_case';

}
declare module '@elastic/eui/src/services/sort/sort_direction' {
	import PropTypes from 'prop-types'; const ASC: 'asc'; const DESC: 'desc';
	export type Direction = typeof ASC | typeof DESC;
	export const SortDirection: Readonly<{
	    ASC: "asc";
	    DESC: "desc";
	    isAsc(direction: Direction): boolean;
	    reverse(direction: Direction): Direction;
	}>;
	export const SortDirectionType: PropTypes.Requireable<Direction>;
	export {};

}
declare module '@elastic/eui/src/services/objects' {
	export const get: (object: {}, path: string | string[], defaultValue?: any) => any;
	export const omit: (object: {} | null | undefined, paths: string[]) => {};

}
declare module '@elastic/eui/src/services/sort/comparators' {
	export type Primitive = string | boolean | number | null | undefined; type Comparator<T = Primitive> = (a: T, b: T) => number;
	export const Comparators: Readonly<{
	    default: (direction?: import ("@elastic/eui/src/services/sort/sort_direction").Direction) => (v1: Primitive, v2: Primitive) => number;
	    reverse: <T>(comparator: Comparator<T>) => Comparator<T>;
	    value<T>(valueCallback: (value: T) => Primitive, comparator?: Comparator<Primitive> | undefined): Comparator<T>;
	    property<T>(prop: string, comparator?: Comparator<Primitive> | undefined): Comparator<T>;
	}>;
	export {};

}
declare module '@elastic/eui/src/services/sort/sortable_properties' {
	import { Primitive } from '@elastic/eui/src/services/sort/comparators';
	export interface SortableProperty<T> {
	    name: string;
	    getValue: (obj: T) => Primitive;
	    isAscending: boolean;
	}
	/**
	 * @typedef {Object} SortableProperty
	 * @property {string} sortableProperty.name - Name of the property.
	 * @property {function} sortableProperty.getValue - A function that takes in an object and returns a value to sort
	 * by.
	 * @property {boolean} sortableProperty.isAscending - The direction of the last sort by this property. Used to preserve
	 * past sort orders.
	 */
	/**
	 * Stores sort information for a set of SortableProperties, including which property is currently being sorted on, as
	 * well as the last sort order for each property.
	 */
	export class SortableProperties<T> {
	    sortableProperties: Array<SortableProperty<T>>;
	    currentSortedProperty: SortableProperty<T>;
	    /**
	     * @param {Array<SortableProperty>} sortableProperties - a set of sortable properties.
	     * @param {string} initialSortablePropertyName - Which sort property should be sorted on by default.
	     */
	    constructor(sortableProperties: Array<SortableProperty<T>>, initialSortablePropertyName: string);
	    /**
	     * @returns {SortableProperty} The current property that is being sorted on. Undefined if no sort order is applied.
	     */
	    getSortedProperty(): SortableProperty<T>;
	    /**
	     * Sorts the items passed in and returns a newly sorted array.
	     * @param items {Array.<Object>}
	     * @returns {Array.<Object>} sorted array of items, based off the sort properties.
	     */
	    sortItems(items: T[]): T[];
	    /**
	     * Returns the SortProperty with the given name, if found.
	     * @param {String} propertyName
	     * @returns {SortableProperty|undefined}
	     */
	    getSortablePropertyByName(propertyName: string): SortableProperty<T> | undefined;
	    /**
	     * Updates the sort property, potentially flipping the sort order based on whether the same
	     * property was already being sorted.
	     * @param propertyName {String}
	     */
	    sortOn(propertyName: string): void;
	    /**
	     * @returns {boolean} True if the current sortable property is sorted in ascending order.
	     */
	    isCurrentSortAscending(): boolean;
	    /**
	     * @param {string} propertyName
	     * @returns {boolean} True if the given sort property is sorted in ascending order.
	     */
	    isAscendingByName(propertyName: string): boolean;
	    /**
	     * Flips the current sorted property sort order.
	     */
	    flipCurrentSortOrder(): void;
	}

}
declare module '@elastic/eui/src/services/sort/property_sort' {
	import PropTypes from 'prop-types';
	export const PropertySortType: PropTypes.Requireable<PropTypes.InferProps<{
	    field: PropTypes.Validator<string>;
	    direction: PropTypes.Validator<import ("@elastic/eui/src/services/sort/sort_direction").Direction>;
	}>>;

}
declare module '@elastic/eui/src/services/sort' {
	export { SortableProperties } from '@elastic/eui/src/services/sort/sortable_properties';
	export { SortDirectionType, SortDirection } from '@elastic/eui/src/services/sort/sort_direction';
	export { PropertySortType } from '@elastic/eui/src/services/sort/property_sort';
	export { Comparators } from '@elastic/eui/src/services/sort/comparators';

}
declare module '@elastic/eui/src/services/popover/types' {
	export type EuiPopoverPosition = 'top' | 'right' | 'bottom' | 'left';

}
declare module '@elastic/eui/src/services/popover/calculate_popover_position' {
	import { EuiPopoverPosition } from '@elastic/eui/src/services/popover/types';
	interface EuiPopoverBoundingBox {
	    top: number;
	    left: number;
	    width: number;
	    height: number;
	}
	interface EuiPopoverAnchorRect extends EuiPopoverBoundingBox {
	    right: number;
	    bottom: number;
	}
	interface EuiPopoverDimensions {
	    width: number;
	    height: number;
	}
	interface EuiPopoverPositionedBox extends EuiPopoverBoundingBox {
	    position: EuiPopoverPosition;
	}
	/**
	 * Determine the best position for a popover that avoids clipping by the window view port.
	 *
	 * @param {Object} anchorBounds - getBoundingClientRect() of the node the popover is tethered to (e.g. a button).
	 * @param {Object} popoverBounds - getBoundingClientRect() of the popover node (e.g. the tooltip).
	 * @param {string} requestedPosition - Position the user wants. One of ["top", "right", "bottom", "left"]
	 * @param {number} buffer - The space between the wrapper and the popover. Also the minimum space between the
	 * popover and the window.
	 * @param {Array} positions - List of acceptable positions. Defaults to ["top", "right", "bottom", "left"].
	 *
	 * @returns {Object} With properties position (one of ["top", "right", "bottom", "left"]), left, top, width, and height.
	 */
	export function calculatePopoverPosition(anchorBounds: EuiPopoverAnchorRect, popoverBounds: EuiPopoverDimensions, requestedPosition: EuiPopoverPosition, buffer?: number, positions?: EuiPopoverPosition[]): EuiPopoverPositionedBox;
	export {};

}
declare module '@elastic/eui/src/services/popover/popover_positioning' {
	import { EuiPopoverPosition } from '@elastic/eui/src/services/popover/types';
	export const POSITIONS: EuiPopoverPosition[];
	interface BoundingBox {
	    [position: string]: number;
	    top: number;
	    right: number;
	    bottom: number;
	    left: number;
	}
	export interface EuiClientRect extends BoundingBox {
	    height: number;
	    width: number;
	}
	interface FindPopoverPositionArgs {
	    anchor: HTMLElement;
	    popover: HTMLElement;
	    align?: EuiPopoverPosition;
	    position: EuiPopoverPosition;
	    forcePosition?: boolean;
	    buffer?: number;
	    offset?: number;
	    allowCrossAxis?: boolean;
	    container?: HTMLElement;
	    arrowConfig?: {
	        arrowWidth: number;
	        arrowBuffer: number;
	    };
	    returnBoundingBox?: boolean;
	}
	interface FindPopoverPositionResult {
	    top: number;
	    left: number;
	    position: 'top' | 'right' | 'bottom' | 'left';
	    fit: number;
	    arrow?: {
	        left: number;
	        top: number;
	    };
	    anchorBoundingBox?: EuiClientRect;
	}
	/**
	 * Calculates the absolute positioning (relative to document.body) to place a popover element
	 *
	 * @param anchor {HTMLElement} Element to anchor the popover to
	 * @param popover {HTMLElement} Element containing the popover content
	 * @param position {string} Position the user wants. One of ["top", "right", "bottom", "left"]
	 * @param [forcePosition] {boolean} If true, use only the provided `position` value and don't try any other position
	 * @param [align] {string} Cross-axis alignment. One of ["top", "right", "bottom", "left"]
	 * @param [buffer=16] {number} Minimum distance between the popover and the bounding container
	 * @param [offset=0] {number} Distance between the popover and the anchor
	 * @param [allowCrossAxis=true] {boolean} Whether to allow the popover to be positioned on the cross-axis
	 * @param [container] {HTMLElement} Element the popover must be constrained to fit within
	 * @param [arrowConfig] {{arrowWidth: number, arrowBuffer: number}} If
	 *  present, describes the size & constraints for an arrow element, and the
	 *  function return value will include an `arrow` param with position details
	 *
	 * @returns {FindPopoverPositionResult} absolute page coordinates for the
	 * popover, and the placements's relation to the anchor or undefined
	 * there's no room.
	 */
	export function findPopoverPosition({ anchor, popover, align, position, forcePosition, buffer, offset, allowCrossAxis, container, arrowConfig, returnBoundingBox, }: FindPopoverPositionArgs): FindPopoverPositionResult;
	interface GetPopoverScreenCoordinatesArgs {
	    position: EuiPopoverPosition;
	    align?: EuiPopoverPosition;
	    anchorBoundingBox: EuiClientRect;
	    popoverBoundingBox: EuiClientRect;
	    windowBoundingBox: EuiClientRect;
	    containerBoundingBox: EuiClientRect;
	    arrowConfig?: {
	        arrowWidth: number;
	        arrowBuffer: number;
	    };
	    offset?: number;
	    buffer?: number;
	}
	interface GetPopoverScreenCoordinatesResult {
	    top: number;
	    left: number;
	    fit: number;
	    arrow: {
	        top: number;
	        left: number;
	    } | undefined;
	}
	/**
	 * Given a target position and the popover's surrounding context, returns either an
	 * object with {top, left} screen coordinates or `null` if it's not possible to show
	 * content in the target position
	 * @param position {string} the target position, one of ["top", "right", "bottom", "left"]
	 * @param align {string} target alignment on the cross-axis, one of ["top", "right", "bottom", "left"]
	 * @param anchorBoundingBox {Object} bounding box of the anchor element
	 * @param popoverBoundingBox {Object} bounding box of the popover element
	 * @param windowBoundingBox {Object} bounding box of the window
	 * @param containerBoundingBox {Object} bounding box of the container
	 * @param [arrowConfig] {{arrowWidth: number, arrowBuffer: number}} If present, describes the size &
	 *  constraints for an arrow element, and the function return value will include an `arrow` param
	 *  with position details
	 * @param [offset=0] {number} Distance between the popover and the anchor
	 * @param [buffer=0] {number} Minimum distance between the popover's
	 *  placement and the container edge
	 *
	 * @returns {GetPopoverScreenCoordinatesResult}
	 *  object with top/left coordinates, the popover's relative position to the anchor, and how well the
	 *  popover fits in the location (0.0 -> 1.0) coordinates and the popover's relative position, if
	 *  there is no room in this placement then null
	 */
	export function getPopoverScreenCoordinates({ position, align, anchorBoundingBox, popoverBoundingBox, windowBoundingBox, containerBoundingBox, arrowConfig, offset, buffer, }: GetPopoverScreenCoordinatesArgs): GetPopoverScreenCoordinatesResult;
	/**
	 * Finds the client pixel coordinate of each edge for the element's bounding box,
	 * and the bounding box's width & height
	 *
	 * @param {HTMLElement} element
	 * @returns {{top: number, right: number, bottom: number, left: number, height: number, width: number}}
	 */
	export function getElementBoundingBox(element: HTMLElement): EuiClientRect;
	/**
	 * Calculates the available content space between anchor and container
	 *
	 * @param {Object} anchorBoundingBox Client bounding box of the anchor element
	 * @param {Object} containerBoundingBox Client bounding box of the container element
	 * @param {number} buffer Minimum distance between the popover and the bounding container
	 * @param {number} offset Distance between the popover and the anchor
	 * @param {string} offsetSide Side the offset needs to be applied to, one
	 *  of ["top", "right", "bottom", "left"]
	 * @returns {{top: number, right: number, bottom: number, left: number}}
	 */
	export function getAvailableSpace(anchorBoundingBox: BoundingBox, containerBoundingBox: BoundingBox, buffer: number, offset: number, offsetSide: EuiPopoverPosition): BoundingBox;
	/**
	 * Computes the fit (overlap) of the content within the container, fit is in range 0.0 => 1.0
	 * @param contentBoundingBox bounding box of content to calculate fit for
	 * @param containerBoundingBox bounding box of container
	 * @returns {number}
	 */
	export function getVisibleFit(contentBoundingBox: BoundingBox, containerBoundingBox: BoundingBox): number;
	/**
	 * Calculates the intersection space between two bounding boxes
	 *
	 * @param firstBox
	 * @param secondBox
	 * @returns {EuiClientRect}
	 */
	export function intersectBoundingBoxes(firstBox: BoundingBox, secondBox: BoundingBox): EuiClientRect;
	/**
	 * Returns the top-most defined z-index in the element's ancestor hierarchy
	 * relative to the `target` element; if no z-index is defined, returns 0
	 * @param element {HTMLElement}
	 * @param cousin {HTMLElement}
	 * @returns {number}
	 */
	export function getElementZIndex(element: HTMLElement, cousin: HTMLElement): number;
	export {};

}
declare module '@elastic/eui/src/services/popover' {
	export { calculatePopoverPosition } from '@elastic/eui/src/services/popover/calculate_popover_position';
	export { findPopoverPosition, getElementZIndex } from '@elastic/eui/src/services/popover/popover_positioning';
	export { EuiPopoverPosition } from '@elastic/eui/src/services/popover/types';

}
declare module '@elastic/eui/src/services/transition/transition' {
	export const getTransitionTimings: (element: Element) => {
	    durationMatch: number;
	    delayMatch: number;
	};
	export const getWaitDuration: (records: MutationRecord[]) => number;
	export const performOnFrame: (waitDuration: number, toPerform: () => void) => void;
	export const getDurationAndPerformOnFrame: (records: MutationRecord[], toPerform: () => void) => void;

}
declare module '@elastic/eui/src/services/transition' {
	export { getDurationAndPerformOnFrame, getTransitionTimings, getWaitDuration, performOnFrame, } from '@elastic/eui/src/services/transition/transition';

}
declare module '@elastic/eui/src/services/window_event/window_event' {
	import { Component } from 'react'; type EventNames = keyof WindowEventMap;
	interface Props<Ev extends EventNames> {
	    event: Ev;
	    handler: (this: Window, ev: WindowEventMap[Ev]) => any;
	}
	export class EuiWindowEvent<E extends EventNames> extends Component<Props<E>> {
	    componentDidMount(): void;
	    componentDidUpdate(prevProps: Props<E>): void;
	    componentWillUnmount(): void;
	    addEvent<Ev extends EventNames>({ event, handler }: Props<Ev>): void;
	    removeEvent<Ev extends EventNames>({ event, handler }: Props<Ev>): void;
	    render(): null;
	}
	export {};

}
declare module '@elastic/eui/src/services/window_event' {
	export { EuiWindowEvent } from '@elastic/eui/src/services/window_event/window_event';

}
declare module '@elastic/eui' {
	import * as keyCodes from '@elastic/eui/src/services/key_codes';
	export { keyCodes };
	export { accessibleClickKeys, cascadingMenuKeyCodes, comboBoxKeyCodes, htmlIdGenerator, } from '@elastic/eui/src/services/accessibility';
	export { HorizontalAlignment, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, CENTER_ALIGNMENT, } from '@elastic/eui/src/services/alignment';
	export { isColorDark, isValidHex, calculateContrast, calculateLuminance, hexToHsv, hexToRgb, hsvToHex, hsvToRgb, rgbToHex, rgbToHsv, VISUALIZATION_COLORS, DEFAULT_VISUALIZATION_COLOR, colorPalette, palettes, HSV, } from '@elastic/eui/src/services/color';
	export { copyToClipboard } from '@elastic/eui/src/services/copy_to_clipboard';
	export { formatAuto, formatBoolean, formatDate, formatNumber, formatText, } from '@elastic/eui/src/services/format';
	export { isEvenlyDivisibleBy, isWithinRange } from '@elastic/eui/src/services/number';
	export { Pager } from '@elastic/eui/src/services/paging';
	export { Random } from '@elastic/eui/src/services/random';
	export { getSecureRelForTarget } from '@elastic/eui/src/services/security';
	export { toInitials } from '@elastic/eui/src/services/string';
	export { PropertySortType, SortDirectionType, SortDirection, SortableProperties, Comparators, } from '@elastic/eui/src/services/sort';
	export { calculatePopoverPosition, findPopoverPosition } from '@elastic/eui/src/services/popover';
	export { getDurationAndPerformOnFrame, getTransitionTimings, getWaitDuration, performOnFrame, } from '@elastic/eui/src/services/transition';
	export { EuiWindowEvent } from '@elastic/eui/src/services/window_event';

}
declare module '@elastic/eui/src/components/accessibility/keyboard_accessible' {
	/**
	 * Interactive elements must be able to receive focus.
	 *
	 * Ideally, this means using elements that are natively keyboard accessible (<a href="">,
	 * <input type="button">, or <button>). Note that links should be used when navigating and buttons
	 * should be used when performing an action on the page.
	 *
	 * If, however, you need to use elements that aren't natively keyboard accessible (for example, <div>,
	 * <p>, or <a> without the href attribute), then you need to allow them to receive focus and to
	 * respond to keyboard input. The workaround is to:
	 *
	 *   - Give the element tabindex="0" so that it can receive keyboard focus.
	 *   - Add a JavaScript onkeyup event handler that triggers element functionality if the Enter key
	 *     is pressed while the element is focused. This is necessary because some browsers do not trigger
	 *    onclick events for such elements when activated via the keyboard.
	 *   - If the item is meant to function as a button, the onkeyup event handler should also detect the
	 *     Spacebar in addition to the Enter key, and the element should be given role="button".
	 *
	 * Wrap any such elements that aren't natively keyboard accessible in this component to automatically
	 * apply the above workaround to them.
	 */
	import { Component, KeyboardEvent, ReactElement } from 'react';
	interface Props {
	    children: ReactElement<any>;
	}
	export class EuiKeyboardAccessible extends Component<Props> {
	    onKeyDown: (e: KeyboardEvent<any>) => void;
	    onKeyUp: (e: KeyboardEvent<any>) => void;
	    applyKeyboardAccessibility: (child: ReactElement<any, string | ((props: any) => ReactElement<any, string | any | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>) => ReactElement<any, string | ((props: any) => ReactElement<any, string | any | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>;
	    render(): ReactElement<any, string | ((props: any) => ReactElement<any, string | any | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>;
	}
	export {};

}
declare module '@elastic/eui/src/components/accessibility/screen_reader' {
	import { ReactElement, FunctionComponent } from 'react';
	export interface EuiScreenReaderOnlyProps {
	    children: ReactElement<any>;
	}
	export const EuiScreenReaderOnly: FunctionComponent<EuiScreenReaderOnlyProps>;

}
declare module '@elastic/eui' {
	export { EuiKeyboardAccessible } from '@elastic/eui/src/components/accessibility/keyboard_accessible';
	export { EuiScreenReaderOnly } from '@elastic/eui/src/components/accessibility/screen_reader';

}
declare module '@elastic/eui/src/components/context/context' {
	import React, { ReactChild } from 'react';
	export interface RenderableValues {
	    [key: string]: ReactChild;
	}
	export type Renderable<T> = ReactChild | ((values: T) => ReactChild);
	export interface I18nShape {
	    mapping?: {
	        [key: string]: Renderable<object>;
	    };
	    mappingFunc?: (value: string) => string;
	    formatNumber?: (x: number) => string;
	    formatDateTime?: (x: Date) => string;
	} const EuiI18nConsumer: React.ExoticComponent<React.ConsumerProps<I18nShape>>;
	interface EuiContextProps {
	    i18n: I18nShape;
	    children: React.ReactNode;
	} const EuiContext: React.FunctionComponent<EuiContextProps>;
	export { EuiContext, EuiI18nConsumer };

}
declare module '@elastic/eui' {
	export { EuiContext, EuiI18nConsumer } from '@elastic/eui/src/components/context/context';

}
declare module '@elastic/eui/src/components/i18n/i18n_util' {
	import { ReactChild } from 'react';
	import { RenderableValues } from '@elastic/eui/src/components/context/context';
	/**
	 * Replaces placeholder values in `input` with their matching value in `values`
	 * e.g. input:'Hello, {name}' will replace `{name}` with `values[name]`
	 * @param {string} input
	 * @param {RenderableValues} values
	 * @param {Function} i18nMappingFunc
	 * @returns {string | React.ReactChild[]}
	 */
	export function processStringToChildren(input: string, values: RenderableValues, i18nMappingFunc?: (token: string) => string): string | ReactChild[];

}
declare module '@elastic/eui/src/components/i18n/i18n' {
	import { ReactChild } from 'react';
	import { Renderable } from '@elastic/eui/src/components/context/context'; type ResolvedType<T> = T extends (...args: any[]) => any ? ReturnType<T> : T;
	interface I18nTokenShape<T, DEFAULT extends Renderable<T>> {
	    token: string;
	    default: DEFAULT;
	    children?: (x: ResolvedType<DEFAULT>) => ReactChild;
	    values?: T;
	}
	interface I18nTokensShape {
	    tokens: string[];
	    defaults: ReactChild[];
	    children: (x: ReactChild[]) => ReactChild;
	} const EuiI18n: <T extends {}, DEFAULT extends Renderable<T>>(props: (import ("@elastic/eui/src/components/common").DisambiguateSet<I18nTokenShape<T, DEFAULT>, I18nTokensShape> & I18nTokensShape) | (import ("@elastic/eui/src/components/common").DisambiguateSet<I18nTokensShape, I18nTokenShape<T, DEFAULT>> & I18nTokenShape<T, DEFAULT>)) => JSX.Element;
	export { EuiI18n };

}
declare module '@elastic/eui/src/components/i18n/i18n_number' {
	import React, { ReactChild, ReactElement } from 'react';
	import { ExclusiveUnion } from '@elastic/eui/src/components/common';
	interface EuiI18nNumberValueShape {
	    value: number;
	    children?: (x: ReactChild) => ReactElement<any>;
	}
	interface EuiI18nNumberValuesShape {
	    values: number[];
	    children: (x: ReactChild[]) => ReactElement<any>;
	} type EuiI18nNumberProps = ExclusiveUnion<EuiI18nNumberValueShape, EuiI18nNumberValuesShape>; const EuiI18nNumber: React.FunctionComponent<EuiI18nNumberProps>;
	export { EuiI18nNumber };

}
declare module '@elastic/eui' {
	export { EuiI18n } from '@elastic/eui/src/components/i18n/i18n';
	export { EuiI18nNumber } from '@elastic/eui/src/components/i18n/i18n_number';

}
declare module '@elastic/eui/src/components/color_picker/hue' {
	import { InputHTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	export type EuiHueProps = Omit<InputHTMLAttributes<HTMLInputElement>, 'onChange'> & CommonProps & {
	    hex?: string;
	    hue?: string | number;
	    onChange: (hue: number) => void;
	};
	export const EuiHue: FunctionComponent<EuiHueProps>;

}
declare module '@elastic/eui/src/components/color_picker/utils' {
	export const getEventPosition: (location: {
	    x: number;
	    y: number;
	}, container: HTMLElement) => {
	    left: number;
	    top: number;
	    width: number;
	    height: number;
	};
	export const throttle: (fn: (...args: any[]) => void, wait?: number) => (...args: any[]) => void;

}
declare module '@elastic/eui/src/components/color_picker/saturation' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	import { HSV } from '@elastic/eui/src/services/color';
	export type SaturationClientRect = Pick<ClientRect, 'left' | 'top' | 'width' | 'height'>;
	export type SaturationPosition = Pick<SaturationClientRect, 'left' | 'top'>;
	interface HTMLDivElementOverrides {
	    color?: HSV;
	}
	export type EuiSaturationProps = Omit<HTMLAttributes<HTMLDivElement>, keyof HTMLDivElementOverrides> & CommonProps & HTMLDivElementOverrides & {
	    hex?: string;
	    onChange: (color: HSV) => void;
	};
	export const EuiSaturation: FunctionComponent<EuiSaturationProps>;
	export {};

}
declare module '@elastic/eui' {
	import { FunctionComponent, HTMLAttributes, ReactElement } from 'react';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';

	import { EuiColorPickerSwatchProps } from '@elastic/eui/src/components/color_picker/color_picker_swatch';
	import { EuiHueProps } from '@elastic/eui/src/components/color_picker/hue';
	import { EuiSaturationProps } from '@elastic/eui/src/components/color_picker/saturation'; module '@elastic/eui' {
	  /**
	   * @see './color_picker_swatch.js'
	   */
	  export const EuiColorPickerSwatch: FunctionComponent<
	    EuiColorPickerSwatchProps
	  >;
	  /**
	   * @see './hue.js'
	   */
	  export const EuiHue: FunctionComponent<EuiHueProps>;
	  /**
	   * @see './saturation.js'
	   */
	  export const EuiSaturation: FunctionComponent<EuiSaturationProps>;

	  /**
	   * @see './color_picker.js'
	   */
	  interface HTMLDivElementOverrides {
	    color: string;
	    onBlur?: () => void;
	    onChange: (hex: string) => void;
	    onFocus?: () => void;
	  }
	  export type EuiColorPickerProps = CommonProps &
	    Omit<HTMLAttributes<HTMLDivElement>, keyof HTMLDivElementOverrides> &
	    HTMLDivElementOverrides & {
	      button?: ReactElement;
	      compressed?: boolean;
	      disabled?: boolean;
	      fullWidth?: boolean;
	      isInvalid?: boolean;
	      mode?: 'default' | 'swatch' | 'picker';
	      readOnly?: boolean;
	      swatches?: string[];
	      popoverZIndex?: number;
	    };

	  export const EuiColorPicker: FunctionComponent<EuiColorPickerProps>;
	}

}
declare module '@elastic/eui/src/components/portal/portal' {
	/**
	 * NOTE: We can't test this component because Enzyme doesn't support rendering
	 * into portals.
	 */
	import React from 'react';
	interface InsertPositionsMap {
	    after: InsertPosition;
	    before: InsertPosition;
	}
	export const insertPositions: InsertPositionsMap;
	export const INSERT_POSITIONS: EuiPortalInsertPosition[]; type EuiPortalInsertPosition = keyof typeof insertPositions;
	interface EuiPortalProps {
	    children: React.ReactNode;
	    insert?: {
	        sibling: HTMLElement;
	        position: EuiPortalInsertPosition;
	    };
	    portalRef?: (ref: HTMLDivElement | null) => void;
	}
	export class EuiPortal extends React.Component<EuiPortalProps> {
	    portalNode: HTMLDivElement;
	    constructor(props: EuiPortalProps);
	    componentDidMount(): void;
	    componentWillUnmount(): void;
	    updatePortalRef(ref: HTMLDivElement | null): void;
	    render(): React.ReactPortal;
	}
	export {};

}
declare module '@elastic/eui' {
	export { EuiPortal } from '@elastic/eui/src/components/portal/portal';

}
declare module '@elastic/eui/src/components/tool_tip/tool_tip_popover' {
	import { HTMLAttributes, Component, ReactNode } from 'react';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common'; type Props = CommonProps & Omit<HTMLAttributes<HTMLDivElement>, 'title'> & {
	    positionToolTip: (rect: ClientRect | DOMRect) => void;
	    children?: ReactNode;
	    title?: ReactNode;
	    popoverRef?: (ref: HTMLDivElement) => void;
	};
	export class EuiToolTipPopover extends Component<Props> {
	    private popover;
	    updateDimensions: () => void;
	    setPopoverRef: (ref: HTMLDivElement) => void;
	    componentDidMount(): void;
	    componentWillUnmount(): void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/form/form_row/make_id' {
	 function makeId(): string;
	export default makeId;

}
declare module '@elastic/eui/src/components/observer/observer' {
	import { Component, ReactNode } from 'react';
	interface BaseProps {
	    children: (ref: any) => ReactNode;
	}
	interface Observer {
	    disconnect: () => void;
	    observe: (element: Element, options?: {
	        [key: string]: any;
	    }) => void;
	}
	export class EuiObserver<Props extends BaseProps> extends Component<Props> {
	    protected name: string;
	    protected childNode: null | Element;
	    protected observer: null | Observer;
	    componentDidMount(): void;
	    componentWillUnmount(): void;
	    updateChildNode: (ref: Element) => void;
	    beginObserve: () => void;
	    render(): ReactNode;
	}
	export {};

}
declare module '@elastic/eui/src/components/observer/resize_observer/resize_observer' {
	import { ReactNode } from 'react';
	import { EuiObserver } from '@elastic/eui/src/components/observer/observer';
	interface Props {
	    children: (ref: (e: HTMLElement | null) => void) => ReactNode;
	    onResize: (dimensions: {
	        height: number;
	        width: number;
	    }) => void;
	}
	export class EuiResizeObserver extends EuiObserver<Props> {
	    name: string;
	    hasResizeObserver: boolean;
	    onResize: () => void;
	    beginObserve: () => void;
	}
	export {};

}
declare module '@elastic/eui' {
	export { EuiResizeObserver } from '@elastic/eui/src/components/observer/resize_observer/resize_observer';

}
declare module '@elastic/eui/src/components/tool_tip/tool_tip' {
	import React, { Component, ReactElement, ReactNode, MouseEvent as ReactMouseEvent } from 'react';
	export type ToolTipPositions = 'top' | 'right' | 'bottom' | 'left';
	export const POSITIONS: import ("@elastic/eui/src/services/popover").EuiPopoverPosition[];
	export type ToolTipDelay = 'regular' | 'long';
	export const DELAY: ToolTipDelay[];
	interface ToolTipStyles {
	    top: number;
	    left: number | 'auto';
	    right?: number | 'auto';
	    opacity?: number;
	}
	export interface Props {
	    /**
	     * Passes onto the the trigger.
	     */
	    anchorClassName?: string;
	    /**
	     * The in-view trigger for your tooltip.
	     */
	    children: ReactElement<any>;
	    /**
	     * Passes onto the tooltip itself, not the trigger.
	     */
	    className?: string;
	    /**
	     * The main content of your tooltip.
	     */
	    content?: ReactNode;
	    /**
	     * Delay before showing tooltip. Good for repeatable items.
	     */
	    delay: ToolTipDelay;
	    /**
	     * An optional title for your tooltip.
	     */
	    title?: ReactNode;
	    /**
	     * Unless you provide one, this will be randomly generated.
	     */
	    id?: string;
	    /**
	     * Suggested position. If there is not enough room for it this will be changed.
	     */
	    position: ToolTipPositions;
	    /**
	     * If supplied, called when mouse movement causes the tool tip to be
	     * hidden.
	     */
	    onMouseOut?: (event: ReactMouseEvent<HTMLSpanElement, MouseEvent>) => void;
	}
	interface State {
	    visible: boolean;
	    hasFocus: boolean;
	    calculatedPosition: ToolTipPositions;
	    toolTipStyles: ToolTipStyles;
	    arrowStyles: undefined | {
	        left: number;
	        top: number;
	    };
	    id: string;
	}
	export class EuiToolTip extends Component<Props, State> {
	    _isMounted: boolean;
	    anchor: null | HTMLElement;
	    popover: null | HTMLElement;
	    state: State;
	    static defaultProps: Partial<Props>;
	    componentDidMount(): void;
	    componentWillUnmount(): void;
	    componentDidUpdate(prevProps: Props, prevState: State): void;
	    testAnchor: () => void;
	    setPopoverRef: (ref: HTMLElement) => void;
	    showToolTip: () => void;
	    positionToolTip: () => void;
	    hideToolTip: () => void;
	    onFocus: () => void;
	    onBlur: () => void;
	    onMouseOut: (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/tool_tip/icon_tip' {
	import { FunctionComponent } from 'react';
	import { Omit, PropsOf } from '@elastic/eui/src/components/common';
	import { EuiIcon, IconSize, IconType } from '@elastic/eui';
	import { Props as EuiToolTipProps } from '@elastic/eui/src/components/tool_tip/tool_tip';
	export interface EuiIconTipProps {
	    /**
	     * The icon color.
	     */
	    color?: string;
	    /**
	     * The icon type.
	     */
	    type?: IconType;
	    /**
	     * The icon size.
	     */
	    size?: IconSize;
	    /**
	     * Explain what this icon means for screen readers.
	     */
	    'aria-label'?: string;
	    /**
	     * Pass certain props down to `EuiIcon`
	     */
	    iconProps?: Omit<PropsOf<EuiIcon>, 'type'> & {
	        type?: never;
	    };
	} type Props = Omit<EuiToolTipProps, 'children' | 'delay' | 'position'> & EuiIconTipProps & {
	    delay?: EuiToolTipProps['delay'];
	    position?: EuiToolTipProps['position'];
	};
	export const EuiIconTip: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui' {
	export { EuiToolTip, ToolTipPositions, Props as EuiToolTipProps, } from '@elastic/eui/src/components/tool_tip/tool_tip';
	export { EuiIconTip } from '@elastic/eui/src/components/tool_tip/icon_tip';

}
declare module '@elastic/eui/src/components/badge/beta_badge/beta_badge' {
	import { FunctionComponent, HTMLAttributes, ReactNode } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';
	import { ToolTipPositions } from '@elastic/eui';
	import { IconType } from '@elastic/eui'; type LabelAsNode = ({
	    title: string;
	    tooltipContent?: ReactNode;
	} | {
	    tooltipContent: ReactNode;
	    title?: string;
	}) & {
	    label: ReactNode;
	};
	interface LabelAsString {
	    /**
	     * One word label like "Beta" or "Lab"
	     */
	    label: string;
	} type BadgeProps = {
	    /**
	     * Supply an icon type if the badge should just be an icon
	     */
	    iconType?: IconType;
	    /**
	     * One word label like "Beta" or "Lab"
	     */
	    label: ReactNode;
	    /**
	     * Content for the tooltip
	     */
	    tooltipContent?: ReactNode;
	    /**
	     * Custom position of the tooltip
	     */
	    tooltipPosition?: ToolTipPositions;
	    /**
	     * Optional title will be supplied as tooltip title or title attribute
	     * otherwise the label will be used
	     */
	    title?: string;
	} & ExclusiveUnion<LabelAsNode, LabelAsString>; type EuiBetaBadgeProps = CommonProps & HTMLAttributes<HTMLSpanElement> & BadgeProps;
	export const EuiBetaBadge: FunctionComponent<EuiBetaBadgeProps>;
	export {};

}
declare module '@elastic/eui/src/components/badge/beta_badge' {
	export { EuiBetaBadge } from '@elastic/eui/src/components/badge/beta_badge/beta_badge';

}
declare module '@elastic/eui/src/components/panel/panel' {
	import { FunctionComponent, HTMLAttributes, MouseEventHandler, ReactNode, Ref } from 'react';
	import { CommonProps, ExclusiveUnion, Omit } from '@elastic/eui/src/components/common';
	export type PanelPaddingSize = 'none' | 's' | 'm' | 'l';
	export interface EuiPanelProps {
	    /**
	     * If active, adds a deeper shadow to the panel
	     */
	    hasShadow?: boolean;
	    /**
	     * Padding applied to the panel
	     */
	    paddingSize?: PanelPaddingSize;
	    /**
	     * When true the panel will grow to match `EuiFlexItem`
	     */
	    grow?: boolean;
	    panelRef?: Ref<HTMLDivElement>;
	    /**
	     * Add a badge to the panel to label it as "Beta" or other non-GA state
	     */
	    betaBadgeLabel?: string;
	    /**
	     * Add a description to the beta badge (will appear in a tooltip)
	     */
	    betaBadgeTooltipContent?: ReactNode;
	    /**
	     * Optional title will be supplied as tooltip title or title attribute otherwise the label will be used
	     */
	    betaBadgeTitle?: string;
	} type Divlike = Omit<HTMLAttributes<HTMLDivElement>, 'onClick'>;
	interface Buttonlike {
	    onClick?: MouseEventHandler<HTMLButtonElement>;
	} type Props = CommonProps & EuiPanelProps & ExclusiveUnion<Divlike, Buttonlike>;
	export const SIZES: string[];
	export const EuiPanel: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui' {
	import {
	  ButtonHTMLAttributes,
	  HTMLAttributes,
	  ReactNode,
	  FunctionComponent,
	  FocusEventHandler,
	} from 'react';
	import { ListProps } from 'react-virtualized'; // eslint-disable-line import/named
	import {
	  EuiComboBoxOption,
	  EuiComboBoxOptionProps,
	  EuiComboBoxOptionsListPosition,
	  EuiComboBoxOptionsListProps,
	  EuiComboBoxProps,
	} from '@elastic/eui'; // eslint-disable-line import/no-unresolved
	import { RefCallback, CommonProps, Omit } from '@elastic/eui/src/components/common';
	import { EuiPanelProps } from '@elastic/eui/src/components/panel/panel'; module '@elastic/eui' {
	  export type EuiComboBoxOptionProps<
	    T = string | number | string[] | undefined
	  > = CommonProps &
	    Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'value'> & {
	      label: string;
	      isGroupLabelOption?: boolean;
	      options?: Array<EuiComboBoxOptionProps<T>>;
	      value?: T;
	    };

	  export type EuiComboBoxOptionsListPosition = 'top' | 'bottom';

	  export interface EuiComboBoxOption<T> {
	    option: EuiComboBoxOptionProps<T>;
	    children?: ReactNode;
	    className?: string;
	    optionRef?: RefCallback<HTMLButtonElement>;
	    onClick: (option: EuiComboBoxOptionProps<T>) => any;
	    onEnterKey: (option: EuiComboBoxOptionProps<T>) => any;
	    disabled?: boolean;
	  }

	  export interface EuiComboBoxOptionsListProps<T> {
	    options?: Array<EuiComboBoxOptionProps<T>>;
	    isLoading?: boolean;
	    selectedOptions?: any[];
	    onCreateOption?: any;
	    searchValue?: string;
	    matchingOptions?: Array<EuiComboBoxOptionProps<T>>;
	    optionRef?: EuiComboBoxOption<T>['optionRef'];
	    onOptionClick?: EuiComboBoxOption<T>['onClick'];
	    onOptionEnterKey?: EuiComboBoxOption<T>['onEnterKey'];
	    areAllOptionsSelected?: boolean;
	    getSelectedOptionForSearchValue?: (
	      searchValue: string,
	      selectedOptions: any[]
	    ) => EuiComboBoxOptionProps<T>;
	    updatePosition: (parameter?: UIEvent | EuiPanelProps['panelRef']) => any;
	    position?: EuiComboBoxOptionsListPosition;
	    listRef: EuiPanelProps['panelRef'];
	    renderOption?: (
	      option: EuiComboBoxOptionProps<T>,
	      searchValue: string,
	      OPTION_CONTENT_CLASSNAME: string
	    ) => ReactNode;
	    width?: number;
	    scrollToIndex?: number;
	    onScroll?: ListProps['onScroll'];
	    rowHeight?: number;
	    fullWidth?: boolean;
	  }
	  export function EuiComboBoxOptionsList<T>(
	    props: EuiComboBoxOptionsListProps<T>
	  ): ReturnType<FunctionComponent<EuiComboBoxOptionsListProps<T>>>;

	  export interface EuiComboBoxSingleSelectionShape {
	    asPlainText?: boolean;
	  }

	  export interface EuiComboBoxProps<T> {
	    id?: string;
	    isDisabled?: boolean;
	    className?: string;
	    placeholder?: string;
	    isLoading?: boolean;
	    async?: boolean;
	    singleSelection?: EuiComboBoxSingleSelectionShape | boolean;
	    noSuggestions?: boolean;
	    options?: EuiComboBoxOptionsListProps<T>['options'];
	    selectedOptions?: EuiComboBoxOptionsListProps<T>['selectedOptions'];
	    onBlur?: FocusEventHandler<HTMLInputElement>;
	    onChange?: (options: Array<EuiComboBoxOptionProps<T>>) => any;
	    onFocus?: FocusEventHandler<HTMLInputElement>;
	    onSearchChange?: (searchValue: string) => any;
	    onCreateOption?: EuiComboBoxOptionsListProps<T>['onCreateOption'];
	    renderOption?: EuiComboBoxOptionsListProps<T>['renderOption'];
	    isInvalid?: boolean;
	    rowHeight?: number;
	    isClearable?: boolean;
	    fullWidth?: boolean;
	    inputRef?: (element: HTMLInputElement) => void;
	  }

	  export function EuiComboBox<T>(
	    props: EuiComboBoxProps<T> &
	      Omit<HTMLAttributes<HTMLDivElement>, 'onChange'>
	  ): ReturnType<FunctionComponent<EuiComboBoxProps<T>>>;
	}

}
declare module '@elastic/eui/src/components/date_picker/react-datepicker' {
	// Type definitions for react-datepicker 1.8
	// Project: https://github.com/Hacker0x01/react-datepicker
	// Definitions by: Rajab Shakirov <https://github.com/radziksh>,
	//                 Andrey Balokha <https://github.com/andrewBalekha>,
	//                 Greg Smith <https://github.com/smrq>,
	//                 Platon Pronko <https://github.com/Rogach>
	//                 Roy Xue <https://github.com/royxue>
	//                 Koala Human <https://github.com/KoalaHuman>
	//                 Sean Kelley <https://github.com/seansfkelley>
	//                 Justin Grant <https://github.com/justingrant>
	// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
	// TypeScript Version: 2.8

	import * as React from 'react';
	import * as moment from 'moment';

	export interface ReactDatePickerProps {
	  adjustDateOnChange?: boolean;
	  allowSameDay?: boolean;
	  autoComplete?: string;
	  autoFocus?: boolean;
	  calendarClassName?: string;
	  children?: React.ReactNode;
	  className?: string;
	  customInput?: React.ReactNode;
	  customInputRef?: string;
	  dateFormat?: string | string[];
	  dateFormatCalendar?: string;
	  dayClassName?(date: moment.Moment): string | null;
	  disabled?: boolean;
	  disabledKeyboardNavigation?: boolean;
	  dropdownMode?: 'scroll' | 'select';
	  endDate?: moment.Moment;
	  excludeDates?: moment.Moment[];
	  excludeTimes?: moment.Moment[];
	  filterDate?(date: moment.Moment): boolean;
	  fixedHeight?: boolean;
	  forceShowMonthNavigation?: boolean;
	  formatWeekNumber?(date: moment.Moment): string | number;
	  highlightDates?: moment.Moment[];
	  id?: string;
	  includeDates?: moment.Moment[];
	  includeTimes?: moment.Moment[];
	  inline?: boolean;
	  isClearable?: boolean;
	  locale?: string;
	  maxDate?: moment.Moment;
	  maxTime?: moment.Moment;
	  minDate?: moment.Moment;
	  minTime?: moment.Moment;
	  monthsShown?: number;
	  name?: string;
	  onBlur?(event: React.FocusEvent<HTMLInputElement>): void;
	  onChange(
	    date: moment.Moment | null,
	    event: React.SyntheticEvent<any> | undefined
	  ): void;
	  onChangeRaw?(event: React.FocusEvent<HTMLInputElement>): void;
	  onClickOutside?(event: React.MouseEvent<HTMLDivElement>): void;
	  onFocus?(event: React.FocusEvent<HTMLInputElement>): void;
	  onKeyDown?(event: React.KeyboardEvent<HTMLDivElement>): void;
	  onMonthChange?(date: moment.Moment): void;
	  onSelect?(
	    date: moment.Moment,
	    event: React.SyntheticEvent<any> | undefined
	  ): void;
	  onWeekSelect?(
	    firstDayOfWeek: moment.Moment,
	    weekNumber: string | number,
	    event: React.SyntheticEvent<any> | undefined
	  ): void;
	  onYearChange?(date: moment.Moment): void;
	  openToDate?: moment.Moment;
	  peekNextMonth?: boolean;
	  placeholderText?: string;
	  popperClassName?: string;
	  popperContainer?(props: { children: React.ReactNode[] }): React.ReactNode;
	  popperPlacement?: string;
	  preventOpenOnFocus?: boolean;
	  readOnly?: boolean;
	  required?: boolean;
	  scrollableMonthYearDropdown?: boolean;
	  scrollableYearDropdown?: boolean;
	  selected?: moment.Moment | null;
	  selectsEnd?: boolean;
	  selectsStart?: boolean;
	  shouldCloseOnSelect?: boolean;
	  showDisabledMonthNavigation?: boolean;
	  showMonthDropdown?: boolean;
	  showMonthYearDropdown?: boolean;
	  showTimeSelect?: boolean;
	  showTimeSelectOnly?: boolean;
	  showWeekNumbers?: boolean;
	  showYearDropdown?: boolean;
	  startDate?: moment.Moment;
	  startOpen?: boolean;
	  tabIndex?: number;
	  timeCaption?: string;
	  timeFormat?: string;
	  timeIntervals?: number;
	  title?: string;
	  todayButton?: string;
	  useShortMonthInDropdown?: boolean;
	  useWeekdaysShort?: boolean;
	  utcOffset?: number;
	  value?: string;
	  weekLabel?: string;
	  withPortal?: boolean;
	  yearDropdownItemNumber?: number;
	} const ReactDatePicker: React.ClassicComponentClass<
	  ReactDatePickerProps
	>;
	export default ReactDatePicker;

}
declare module '@elastic/eui' {
	import React from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui';
	import _ReactDatePicker, {
	  ReactDatePickerProps as _ReactDatePickerProps,
	} from '@elastic/eui/src/components/date_picker/react-datepicker'; // eslint-disable-line import/no-unresolved
	import { Moment } from 'moment'; module '@elastic/eui' {
	  interface OnTimeChangeProps {
	    start: string;
	    end: string;
	    isInvalid: boolean;
	    isQuickSelection: boolean;
	  }

	  interface OnRefreshProps {
	    start: string;
	    end: string;
	    refreshInterval: number;
	  }

	  interface OnRefreshChangeProps {
	    isPaused: boolean;
	    refreshInterval: number;
	  }

	  interface EuiExtendedDatePickerProps extends _ReactDatePickerProps {
	    fullWidth?: boolean;
	    isInvalid?: boolean;
	    isLoading?: boolean;
	    injectTimes?: Moment[]; // added here because the type is missing in @types/react-datepicker@1.8.0
	    inputRef?: React.Ref<typeof _ReactDatePicker>;
	    placeholder?: string;
	    shadow?: boolean;
	    showIcon?: boolean;
	  }

	  export type EuiDatePickerProps = CommonProps & EuiExtendedDatePickerProps;
	  export const EuiDatePicker: React.SFC<EuiDatePickerProps>;

	  export type EuiDatePickerRangeProps = CommonProps & {
	    startDateControl: React.ReactElement<EuiDatePickerProps>;
	    endDateControl: React.ReactElement<EuiDatePickerProps>;
	    iconType?: boolean | IconType;
	    fullWidth?: boolean;
	    isCustom?: boolean;
	  };

	  export const EuiDatePickerRange: React.SFC<EuiDatePickerRangeProps>;

	  export interface EuiSuperDatePickerCommonRange {
	    start: string;
	    end: string;
	    label: string;
	  }

	  export interface EuiSuperDatePickerRecentRange {
	    start: string;
	    end: string;
	  }

	  export interface EuiSuperDatePickerQuickSelectPanel {
	    title: string;
	    content: React.ReactNode;
	  }

	  export type EuiSuperDatePickerProps = CommonProps & {
	    isLoading?: boolean;
	    start?: string;
	    end?: string;
	    isPaused?: boolean;
	    refreshInterval?: number;
	    onTimeChange: (props: OnTimeChangeProps) => void;
	    onRefresh?: (props: OnRefreshProps) => void;
	    onRefreshChange?: (props: OnRefreshChangeProps) => void;
	    commonlyUsedRanges?: EuiSuperDatePickerCommonRange[];
	    dateFormat?: string;
	    recentlyUsedRanges?: EuiSuperDatePickerRecentRange[];
	    showUpdateButton?: boolean;
	    isAutoRefreshOnly?: boolean;
	    customQuickSelectPanels?: EuiSuperDatePickerQuickSelectPanel[];
	  };

	  export const EuiSuperDatePicker: React.SFC<EuiSuperDatePickerProps>;

	  export const ReactDatePicker: typeof _ReactDatePicker;
	  export const ReactDatePickerProps: _ReactDatePickerProps;

	  interface DurationRange {
	    start: string;
	    end: string;
	    label: string;
	  }

	  export const commonDurationRanges: DurationRange[];

	  export function prettyDuration(
	    timeFrom: string,
	    timeTo: string,
	    quickRanges: DurationRange[],
	    dateFormat: string
	  ): string;
	}

}
declare module '@elastic/eui/src/components/title/title' {
	import { FunctionComponent, ReactElement } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const titleSizeToClassNameMap: {
	    xxxs: string;
	    xxs: string;
	    xs: string;
	    s: string;
	    m: string;
	    l: string;
	};
	export const TITLE_SIZES: ("s" | "m" | "l" | "xxxs" | "xxs" | "xs")[];
	export type EuiTitleSize = keyof typeof titleSizeToClassNameMap; const textTransformToClassNameMap: {
	    uppercase: string;
	};
	export const TEXT_TRANSFORM: "uppercase"[];
	export type EuiTitleTextTransform = keyof typeof textTransformToClassNameMap;
	export type EuiTitleProps = CommonProps & {
	    children: ReactElement<any>;
	    className?: string;
	    size?: EuiTitleSize;
	    textTransform?: EuiTitleTextTransform;
	};
	export const EuiTitle: FunctionComponent<EuiTitleProps>;
	export {};

}
declare module '@elastic/eui' {
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	import { IconColor, IconType } from '@elastic/eui';
	import { EuiTitleSize } from '@elastic/eui/src/components/title/title';

	import { FunctionComponent, ReactNode, HTMLAttributes } from 'react'; module '@elastic/eui' {
	  /**
	   * EuiEmptyPrompt type defs
	   *
	   * @see './empty_prompt.js'
	   */

	  export interface EuiEmptyPromptProps {
	    iconType?: IconType;
	    iconColor?: IconColor;
	    title?: ReactNode;
	    titleSize?: EuiTitleSize;
	    body?: ReactNode;
	    actions?: ReactNode;
	  }

	  export const EuiEmptyPrompt: FunctionComponent<
	    CommonProps &
	      EuiEmptyPromptProps &
	      Omit<HTMLAttributes<HTMLDivElement>, 'title'>
	  >;
	}

}
declare module '@elastic/eui' {
	import { HTMLAttributes, Component } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; module '@elastic/eui' {
	  // eslint-disable-next-line react/prefer-stateless-function
	  export class EuiErrorBoundary extends Component<
	    CommonProps & HTMLAttributes<HTMLDivElement>
	  > {}
	}

}
declare module '@elastic/eui/src/components/inner_text/inner_text' {
	import { FunctionComponent, ReactElement } from 'react'; type RefT = HTMLElement | Element | undefined | null;
	export function useInnerText(innerTextFallback?: string): [((node: RefT) => void), string | undefined];
	export interface EuiInnerTextProps {
	    children: (ref?: (node: RefT) => void, innerText?: string) => ReactElement;
	    fallback?: string;
	}
	export const EuiInnerText: FunctionComponent<EuiInnerTextProps>;
	export {};

}
declare module '@elastic/eui' {
	export { useInnerText, EuiInnerText } from '@elastic/eui/src/components/inner_text/inner_text';

}
declare module '@elastic/eui/src/components/badge/badge' {
	import { FunctionComponent, MouseEventHandler, HTMLAttributes } from 'react';
	import { CommonProps, ExclusiveUnion, PropsOf, Omit } from '@elastic/eui/src/components/common';
	import { EuiIcon, IconColor, IconType } from '@elastic/eui'; type IconSide = 'left' | 'right'; type WithButtonProps = {
	    /**
	     * Will apply an onclick to the badge itself
	     */
	    onClick: MouseEventHandler<HTMLButtonElement>;
	    /**
	     * Aria label applied to the iconOnClick button
	     */
	    onClickAriaLabel: string;
	} & Omit<HTMLAttributes<HTMLButtonElement>, 'onClick' | 'color'>; type WithSpanProps = Omit<HTMLAttributes<HTMLSpanElement>, 'onClick' | 'color'>;
	interface WithIconOnClick {
	    /**
	     * Will apply an onclick to icon within the badge
	     */
	    iconOnClick: MouseEventHandler<HTMLButtonElement>;
	    /**
	     * Aria label applied to the iconOnClick button
	     */
	    iconOnClickAriaLabel: string;
	}
	export type EuiBadgeProps = {
	    /**
	     * Accepts any string from our icon library
	     */
	    iconType?: IconType;
	    /**
	     * The side of the badge the icon should sit
	     */
	    iconSide?: IconSide;
	    /**
	     * Accepts either our palette colors (primary, secondary ..etc) or a hex value `#FFFFFF`, `#000`.
	     */
	    color?: IconColor;
	    /**
	     * Props passed to the close button.
	     */
	    closeButtonProps?: Partial<PropsOf<EuiIcon>>;
	} & CommonProps & ExclusiveUnion<WithIconOnClick, {}> & ExclusiveUnion<WithSpanProps, WithButtonProps>;
	export const COLORS: string[];
	export const ICON_SIDES: IconSide[];
	export const EuiBadge: FunctionComponent<EuiBadgeProps>;
	export {};

}
declare module '@elastic/eui/src/components/badge/notification_badge/badge_notification' {
	import { HTMLAttributes, ReactNode, FunctionComponent } from 'react';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common'; const colorToClassMap: {
	    [color: string]: string | null;
	};
	export const COLORS: BadgeNotificationColor[];
	export type BadgeNotificationColor = keyof typeof colorToClassMap; const sizeToClassNameMap: {
	    s: null;
	    m: string;
	};
	export const SIZES: BadgeNotificationSize[];
	export type BadgeNotificationSize = keyof typeof sizeToClassNameMap;
	export interface EuiNotificationBadgeProps extends CommonProps, Omit<HTMLAttributes<HTMLSpanElement>, 'color'> {
	    children: ReactNode;
	    size?: BadgeNotificationSize;
	    color?: BadgeNotificationColor;
	}
	export const EuiNotificationBadge: FunctionComponent<EuiNotificationBadgeProps>;
	export {};

}
declare module '@elastic/eui/src/components/badge/notification_badge' {
	export { EuiNotificationBadge } from '@elastic/eui/src/components/badge/notification_badge/badge_notification';

}
declare module '@elastic/eui' {
	export { EuiBadge, EuiBadgeProps } from '@elastic/eui/src/components/badge/badge';
	export { EuiBetaBadge } from '@elastic/eui/src/components/badge/beta_badge';
	export { EuiNotificationBadge } from '@elastic/eui/src/components/badge/notification_badge';

}
declare module '@elastic/eui/src/components/loading/loading_kibana' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const sizeToClassNameMap: {
	    m: string;
	    l: string;
	    xl: string;
	};
	export const SIZES: ("m" | "l" | "xl")[];
	export interface EuiLoadingKibanaProps {
	    size?: keyof typeof sizeToClassNameMap;
	}
	export const EuiLoadingKibana: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement> & EuiLoadingKibanaProps>;
	export {};

}
declare module '@elastic/eui/src/components/loading/loading_chart' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const sizeToClassNameMap: {
	    m: string;
	    l: string;
	    xl: string;
	};
	export const SIZES: ("m" | "l" | "xl")[];
	export type EuiLoadingChartSize = keyof typeof sizeToClassNameMap;
	export const EuiLoadingChart: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement> & {
	    /**
	     * Makes the loader animation black and white
	     */
	    mono?: boolean;
	    size?: EuiLoadingChartSize;
	}>;
	export {};

}
declare module '@elastic/eui/src/components/loading/loading_content' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type LineRange = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;
	export const EuiLoadingContent: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement> & {
	    lines?: LineRange;
	}>;

}
declare module '@elastic/eui/src/components/loading/loading_spinner' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const sizeToClassNameMap: {
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	};
	export const SIZES: ("s" | "m" | "l" | "xl")[];
	export type EuiLoadingSpinnerSize = keyof typeof sizeToClassNameMap;
	export const EuiLoadingSpinner: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement> & {
	    size?: EuiLoadingSpinnerSize;
	}>;
	export {};

}
declare module '@elastic/eui' {
	export { EuiLoadingKibana } from '@elastic/eui/src/components/loading/loading_kibana';
	export { EuiLoadingChart } from '@elastic/eui/src/components/loading/loading_chart';
	export { EuiLoadingContent } from '@elastic/eui/src/components/loading/loading_content';
	export { EuiLoadingSpinner } from '@elastic/eui/src/components/loading/loading_spinner';

}
declare module '@elastic/eui/src/components/facet/facet_button' {
	import { FunctionComponent, HTMLAttributes, MouseEventHandler, ReactNode } from 'react';
	import { CommonProps, RefCallback } from '@elastic/eui/src/components/common';
	export interface EuiFacetButtonProps {
	    buttonRef?: RefCallback<HTMLButtonElement>;
	    children: ReactNode;
	    /**
	     * Any node, but preferrably a `EuiIcon` or `EuiAvatar`
	     */
	    icon?: ReactNode;
	    isDisabled?: boolean;
	    /**
	     * Adds/swaps for loading spinner & disables
	     */
	    isLoading?: boolean;
	    /**
	     * Changes visual of button to indicate it's currently selected
	     */
	    isSelected?: boolean;
	    onClick?: MouseEventHandler<HTMLButtonElement>;
	    /**
	     * Adds a notification indicator for displaying the quantity provided
	     */
	    quantity?: number;
	}
	export const EuiFacetButton: FunctionComponent<CommonProps & HTMLAttributes<HTMLButtonElement> & EuiFacetButtonProps>;

}
declare module '@elastic/eui' {
	import { ButtonHTMLAttributes, HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	

	import { EuiFacetButtonProps as ButtonProps } from '@elastic/eui/src/components/facet/facet_button'; module '@elastic/eui' {
	  /**
	   * Facet button type defs
	   *
	   * @see './facet_button.js'
	   */

	  export type EuiFacetButtonProps = ButtonProps;

	  export const EuiFacetButton: FunctionComponent<
	    CommonProps & ButtonHTMLAttributes<HTMLButtonElement> & EuiFacetButtonProps
	  >;

	  /**
	   * Facet group type defs
	   *
	   * @see './facet_group.js'
	   */

	  export type FacetGroupLayouts = 'vertical' | 'horizontal';
	  export interface EuiFacetGroupProps {
	    layout?: FacetGroupLayouts;
	  }

	  export const EuiFacetGroup: FunctionComponent<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiFacetGroupProps
	  >;
	}

}
declare module '@elastic/eui/src/components/button/button' {
	import { FunctionComponent, HTMLAttributes, Ref } from 'react';
	import { CommonProps, ExclusiveUnion, PropsForAnchor, PropsForButton } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui';
	export type ButtonIconSide = 'left' | 'right';
	export type ButtonColor = 'primary' | 'secondary' | 'warning' | 'danger' | 'ghost' | 'text';
	export type ButtonSize = 's' | 'm';
	export const COLORS: ButtonColor[];
	export const SIZES: ("s" | "m")[];
	export const ICON_SIDES: ("left" | "right")[];
	export interface EuiButtonProps extends CommonProps {
	    iconType?: IconType;
	    iconSide?: ButtonIconSide;
	    fill?: boolean;
	    color?: ButtonColor;
	    size?: ButtonSize;
	    isLoading?: boolean;
	    isDisabled?: boolean;
	    fullWidth?: boolean;
	    contentProps?: HTMLAttributes<HTMLSpanElement>;
	    textProps?: HTMLAttributes<HTMLSpanElement>;
	} type EuiButtonPropsForAnchor = PropsForAnchor<EuiButtonProps, {
	    buttonRef?: Ref<HTMLAnchorElement>;
	}>; type EuiButtonPropsForButton = PropsForButton<EuiButtonProps, {
	    buttonRef?: Ref<HTMLButtonElement>;
	}>;
	export type Props = ExclusiveUnion<EuiButtonPropsForAnchor, EuiButtonPropsForButton>;
	export const EuiButton: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/button/button_empty/button_empty' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps, ExclusiveUnion, PropsForAnchor, PropsForButton } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui'; const colorToClassNameMap: {
	    primary: string;
	    danger: string;
	    disabled: string;
	    text: string;
	    ghost: string;
	};
	export const COLORS: ("primary" | "danger" | "text" | "ghost" | "disabled")[]; const sizeToClassNameMap: {
	    xs: string;
	    s: string;
	    l: string;
	};
	export const SIZES: ("s" | "l" | "xs")[]; const iconSideToClassNameMap: {
	    left: string;
	    right: string;
	};
	export const ICON_SIDES: ("left" | "right")[]; const flushTypeToClassNameMap: {
	    left: string;
	    right: string;
	};
	export const FLUSH_TYPES: ("left" | "right")[];
	export interface EuiButtonEmptyProps extends CommonProps {
	    iconType?: IconType;
	    iconSide?: keyof typeof iconSideToClassNameMap;
	    color?: keyof typeof colorToClassNameMap;
	    size?: keyof typeof sizeToClassNameMap;
	    flush?: keyof typeof flushTypeToClassNameMap;
	    isDisabled?: boolean;
	    href?: string;
	    target?: string;
	    rel?: string;
	    /**
	     * Adds/swaps for loading spinner & disables
	     */
	    isLoading?: boolean;
	    type?: 'button' | 'submit';
	    buttonRef?: () => void;
	    /**
	     * Passes props to `euiButtonEmpty__content` span
	     */
	    contentProps?: Partial<HTMLAttributes<HTMLSpanElement>>;
	    /**
	     * Passes props to `euiButtonEmpty__text` span
	     */
	    textProps?: Partial<HTMLAttributes<HTMLSpanElement>>;
	} type EuiButtonEmptyPropsForAnchor = PropsForAnchor<EuiButtonEmptyProps>; type EuiButtonEmptyPropsForButton = PropsForButton<EuiButtonEmptyProps>; type Props = ExclusiveUnion<EuiButtonEmptyPropsForAnchor, EuiButtonEmptyPropsForButton>;
	export const EuiButtonEmpty: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/button/button_empty' {
	export { COLORS, ICON_SIDES, EuiButtonEmpty, EuiButtonEmptyProps, } from '@elastic/eui/src/components/button/button_empty/button_empty';

}
declare module '@elastic/eui/src/components/button/button_icon/button_icon' {
	import { FunctionComponent, Ref } from 'react';
	import { CommonProps, ExclusiveUnion, PropsForAnchor, PropsForButton } from '@elastic/eui/src/components/common';
	import { IconType, IconSize } from '@elastic/eui';
	import { ButtonSize } from '@elastic/eui/src/components/button/button';
	export type ButtonIconColor = 'danger' | 'disabled' | 'ghost' | 'primary' | 'subdued' | 'success' | 'text' | 'warning';
	export interface EuiButtonIconProps extends CommonProps {
	    iconType?: IconType;
	    color?: ButtonIconColor;
	    'aria-label'?: string;
	    'aria-labelledby'?: string;
	    isDisabled?: boolean;
	    size?: ButtonSize;
	    iconSize?: IconSize;
	} type EuiButtonIconPropsForAnchor = PropsForAnchor<EuiButtonIconProps, {
	    buttonRef?: Ref<HTMLAnchorElement>;
	}>;
	export type EuiButtonIconPropsForButton = PropsForButton<EuiButtonIconProps, {
	    buttonRef?: Ref<HTMLButtonElement>;
	}>; type Props = ExclusiveUnion<EuiButtonIconPropsForAnchor, EuiButtonIconPropsForButton>;
	export const COLORS: ButtonIconColor[];
	export const EuiButtonIcon: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/button/button_icon' {
	export { EuiButtonIcon, EuiButtonIconProps, EuiButtonIconPropsForButton, } from '@elastic/eui/src/components/button/button_icon/button_icon';

}
declare module '@elastic/eui/src/components/toggle/toggle' {
	import React, { ChangeEventHandler, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const typeToInputTypeMap: {
	    single: string;
	    multi: string;
	};
	export const TYPES: string[];
	export type ToggleType = keyof typeof typeToInputTypeMap;
	export type EuiToggleProps = HTMLAttributes<HTMLDivElement> & CommonProps & {
	    id?: string;
	    /**
	     * Initial state of the toggle
	     */
	    checked?: boolean;
	    /**
	     * For handling the onChange event of the input
	     */
	    onChange?: ChangeEventHandler<HTMLInputElement>;
	    isDisabled?: boolean;
	    name?: string;
	    /**
	     * Determines the input type based on multiple or single item(s)
	     */
	    type?: ToggleType;
	    /**
	     * What would typically be the input's label. Required for accessibility.
	     */
	    label: string;
	    /**
	     * Additional classNames for the input itself
	     */
	    inputClassName?: string;
	    value?: string | number;
	};
	export const EuiToggle: React.SFC<EuiToggleProps>;
	export {};

}
declare module '@elastic/eui' {
	export { EuiToggle, ToggleType, TYPES as TOGGLE_TYPES } from '@elastic/eui/src/components/toggle/toggle';

}
declare module '@elastic/eui/src/components/button/button_toggle/button_toggle' {
	import { AnchorHTMLAttributes, ButtonHTMLAttributes, ChangeEventHandler, FunctionComponent, MouseEventHandler } from 'react';
	import { ExclusiveUnion, Omit } from '@elastic/eui/src/components/common';
	import { ToggleType } from '@elastic/eui';
	import { EuiButtonProps } from '@elastic/eui/src/components/button/button';
	export interface EuiButtonToggleProps extends EuiButtonProps {
	    /**
	     * Simulates a `EuiButtonEmpty`
	     */
	    isEmpty?: boolean;
	    /**
	     * Hides the label from the button content and only displays the icon
	     */
	    isIconOnly?: boolean;
	    /**
	     * Initial state of the toggle
	     */
	    isSelected?: boolean;
	    /**
	     * Button label, which is also passed to `EuiToggle` as the input's label
	     */
	    label: string;
	    /**
	     * Classnames to add to `EuiToggle` instead of the `EuiButton`
	     */
	    toggleClassName?: string;
	    /**
	     * Is the button a single action or part of a group (multi)?
	     * Used primarily for `EuiButtonGroup`
	     */
	    type?: ToggleType;
	    onChange?: ChangeEventHandler<HTMLInputElement>;
	} type EuiButtonTogglePropsForAnchor = EuiButtonToggleProps & Omit<AnchorHTMLAttributes<HTMLAnchorElement>, 'name'> & {
	    href?: string;
	    name?: string;
	    onClick?: MouseEventHandler<HTMLAnchorElement>;
	}; type EuiButtonTogglePropsForButtonToggle = EuiButtonToggleProps & Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'name'> & {
	    onClick?: MouseEventHandler<HTMLButtonElement>;
	    name?: string;
	    value?: string;
	}; type Props = ExclusiveUnion<EuiButtonTogglePropsForAnchor, EuiButtonTogglePropsForButtonToggle>;
	export const EuiButtonToggle: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/button/button_toggle' {
	export { EuiButtonToggle } from '@elastic/eui/src/components/button/button_toggle/button_toggle';

}
declare module '@elastic/eui/src/components/button/button_group/button_group' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { ToggleType } from '@elastic/eui';
	import { IconType } from '@elastic/eui';
	import { Omit } from '@elastic/eui/src/components/common';
	import { ButtonColor } from '@elastic/eui/src/components/button/button';
	export interface EuiButtonGroupIdToSelectedMap {
	    [id: string]: boolean;
	}
	export type GroupButtonSize = 's' | 'm';
	export interface EuiButtonGroupOption {
	    id: string;
	    label: string;
	    isDisabled?: boolean;
	    name?: string;
	    value?: any;
	    iconSide?: 'left' | 'right';
	    iconType?: IconType;
	}
	export interface EuiButtonGroupProps {
	    options?: EuiButtonGroupOption[];
	    onChange: (id: string, value: any) => void;
	    buttonSize?: GroupButtonSize;
	    isDisabled?: boolean;
	    isFullWidth?: boolean;
	    isIconOnly?: boolean;
	    idSelected?: string;
	    idToSelectedMap?: EuiButtonGroupIdToSelectedMap;
	    legend?: string;
	    color?: ButtonColor;
	    type?: ToggleType;
	    name?: string;
	} type Props = Omit<HTMLAttributes<HTMLDivElement>, 'onChange'> & EuiButtonGroupProps;
	export const EuiButtonGroup: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/button/button_group' {
	export { EuiButtonGroup, EuiButtonGroupOption, EuiButtonGroupProps, } from '@elastic/eui/src/components/button/button_group/button_group';

}
declare module '@elastic/eui' {
	export { COLORS, ButtonColor, EuiButton, EuiButtonProps } from '@elastic/eui/src/components/button/button';
	export { EuiButtonEmpty, EuiButtonEmptyProps } from '@elastic/eui/src/components/button/button_empty';
	export { EuiButtonIcon, EuiButtonIconProps, EuiButtonIconPropsForButton, } from '@elastic/eui/src/components/button/button_icon';
	export { EuiButtonToggle } from '@elastic/eui/src/components/button/button_toggle';
	export { EuiButtonGroup, EuiButtonGroupOption, EuiButtonGroupProps, } from '@elastic/eui/src/components/button/button_group';

}
declare module '@elastic/eui/src/components/filter_group/filter_group' {
	import { HTMLAttributes, ReactNode, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiFilterGroupProps = HTMLAttributes<HTMLDivElement> & CommonProps & {
	    children?: ReactNode;
	    /**
	     * Expand the whole bar to fill its parent's width
	     */
	    fullWidth?: boolean;
	};
	export const EuiFilterGroup: FunctionComponent<EuiFilterGroupProps>;

}
declare module '@elastic/eui' {
	import { Component, FunctionComponent, ButtonHTMLAttributes } from 'react';

	import {
	  CommonProps,
	  ExclusiveUnion,
	  PropsForAnchor,
	  PropsForButton,
	} from '@elastic/eui/src/components/common';
	import { EuiButtonEmptyProps } from '@elastic/eui';
	import { EuiFilterGroupProps } from '@elastic/eui/src/components/filter_group/filter_group'; module '@elastic/eui' {
	  /**
	   * Filter button type defs
	   *
	   * @see './filter_button.js'
	   */

	  export interface EuiFilterButtonProps extends EuiButtonEmptyProps {
	    numFilters?: number;
	    numActiveFilters?: number;
	    hasActiveFilters?: boolean;
	    isSelected?: boolean;
	    isDisabled?: boolean;
	    grow?: boolean;
	    withNext?: boolean;
	    /**
	     * _DEPRECATED use `withNext`_
	     */
	    noDivider?: boolean;
	  }
	  type EuiFilterButtonPropsForAnchor = PropsForAnchor<EuiFilterButtonProps>;

	  type EuiFilterButtonPropsForButton = PropsForButton<EuiFilterButtonProps>;

	  type Props = ExclusiveUnion<
	    EuiFilterButtonPropsForAnchor,
	    EuiFilterButtonPropsForButton
	  >;
	  export const EuiFilterButton: FunctionComponent<Props>;

	  /**
	   * Filter group type defs
	   *
	   * @see './filter_group.js'
	   */
	  export const EuiFilterGroup: FunctionComponent<EuiFilterGroupProps>;

	  /**
	   * Filter select item type defs
	   *
	   * @see './filter_select_item.js'
	   */

	  export type FilterChecked = 'on' | 'off';
	  export interface EuiFilterSelectItemProps {
	    checked?: FilterChecked;
	    onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
	  }

	  // eslint-disable-next-line react/prefer-stateless-function
	  export class EuiFilterSelectItem extends Component<
	    CommonProps &
	      ButtonHTMLAttributes<HTMLButtonElement> &
	      EuiFilterSelectItemProps
	  > {
	    render: () => JSX.Element;
	  }
	}

}
declare module '@elastic/eui/src/components/flyout/flyout_footer' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiFlyoutFooterProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps>;
	export const EuiFlyoutFooter: EuiFlyoutFooterProps;

}
declare module '@elastic/eui/src/components/flyout/flyout_header' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiFlyoutHeaderProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps & {
	    hasBorder?: boolean;
	}>;
	export const EuiFlyoutHeader: EuiFlyoutHeaderProps;

}
declare module '@elastic/eui/src/components/flyout/flyout_body' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiFlyoutBodyProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps>;
	export const EuiFlyoutBody: EuiFlyoutBodyProps;

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { EuiFlyoutFooterProps } from '@elastic/eui/src/components/flyout/flyout_footer';
	import { EuiFlyoutHeaderProps } from '@elastic/eui/src/components/flyout/flyout_header';
	import { EuiFlyoutBodyProps } from '@elastic/eui/src/components/flyout/flyout_body'; module '@elastic/eui' {
	  export interface EuiFlyoutProps {
	    onClose: () => void;
	    size?: 's' | 'm' | 'l';
	    /**
	     * Hides the default close button. You must provide another close button somewhere within the flyout.
	     */
	    hideCloseButton?: boolean;
	    /**
	     * Locks the mouse / keyboard focus to within the flyout
	     */
	    ownFocus?: boolean;
	    /**
	     * Specify an aria-label for the close button of the flyout.
	     */
	    closeButtonAriaLabel?: string;
	    /**
	     * Sets the max-width of the page,
	     * set to `true` to use the default size,
	     * set to `false` to not restrict the width,
	     * set to a number for a custom width in px,
	     * set to a string for a custom width in custom measurement.
	     */
	    maxWidth?: boolean | number | string;
	  }

	  export const EuiFlyout: React.FunctionComponent<CommonProps & EuiFlyoutProps>;

	  /**
	   * Flyout body type defs
	   *
	   * @see './flyout_body.js'
	   */
	  export const EuiFlyoutBody: EuiFlyoutBodyProps;

	  /**
	   * Flyout footer type defs
	   *
	   * @see './flyout_footer.js'
	   */
	  export const EuiFlyoutFooter: EuiFlyoutFooterProps;

	  /**
	   * Flyout header type defs
	   *
	   * @see './flyout_header.js'
	   */
	  export const EuiFlyoutHeader: EuiFlyoutHeaderProps;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';
	
	
	
	
	
	
	
	
	
	
	
	

	import { FunctionComponent, FormHTMLAttributes, ReactNode } from 'react'; module '@elastic/eui' {
	  /**
	   * @see './form.js'
	   */
	  export type EuiFormProps = CommonProps &
	    FormHTMLAttributes<HTMLFormElement> & {
	      isInvalid?: boolean;
	      error?: ReactNode | ReactNode[];
	    };

	  export const EuiForm: FunctionComponent<EuiFormProps>;
	}

}
declare module '@elastic/eui' {
	import { IconColor } from '@elastic/eui';

	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; module '@elastic/eui' {
	  /**
	   * health type defs
	   *
	   * @see './health.js'
	   */

	  type EuiHealthProps = CommonProps &
	    HTMLAttributes<HTMLDivElement> & {
	      color: IconColor;
	    };

	  export const EuiHealth: FunctionComponent<EuiHealthProps>;
	}

}
declare module '@elastic/eui/src/components/header/header_logo' {
	import { FunctionComponent, HTMLAttributes, ReactNode } from 'react';
	import { IconType } from '@elastic/eui';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export interface EuiHeaderLogoProps {
	    href?: string;
	    iconType?: IconType;
	    iconTitle?: string;
	    children?: ReactNode;
	}
	export const EuiHeaderLogo: FunctionComponent<CommonProps & HTMLAttributes<HTMLAnchorElement> & EuiHeaderLogoProps>;

}
declare module '@elastic/eui' {
	import {
	  EuiHeaderLogoProps as HeaderLogoProps,
	  EuiHeaderLogo as HeaderLogo,
	} from '@elastic/eui/src/components/header/header_logo'; module '@elastic/eui' {
	  /**
	   * header logo type defs
	   *
	   * @see './header_logo.js'
	   */
	  export interface EuiHeaderLogoProps extends HeaderLogoProps {}
	  export const EuiHeaderLogo: typeof HeaderLogo;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui';

	import {
	  AnchorHTMLAttributes,
	  ButtonHTMLAttributes,
	  HTMLAttributes,
	  ReactNode,
	  FunctionComponent,
	} from 'react'; module '@elastic/eui' {
	  export const EuiKeyPadMenu: FunctionComponent<
	    CommonProps & HTMLAttributes<HTMLDivElement>
	  >;

	  interface EuiKeyPadMenuItemCommonProps {
	    label: ReactNode;
	    betaBadgeLabel?: string;
	    betaBadgeIconType?: IconType;
	    betaBadgeTooltipContent?: ReactNode;
	  }

	  export const EuiKeyPadMenuItemButton: FunctionComponent<
	    CommonProps &
	      ButtonHTMLAttributes<HTMLButtonElement> &
	      EuiKeyPadMenuItemCommonProps
	  >;

	  export const EuiKeyPadMenuItem: FunctionComponent<
	    CommonProps &
	      AnchorHTMLAttributes<HTMLAnchorElement> &
	      EuiKeyPadMenuItemCommonProps
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';

	import {
	  FunctionComponent,
	  AnchorHTMLAttributes,
	  ButtonHTMLAttributes,
	  MouseEventHandler,
	} from 'react'; module '@elastic/eui' {
	  /**
	   * link type defs
	   *
	   * @see './link.js'
	   */

	  export type EuiLinkType = 'button' | 'reset' | 'submit';
	  export type EuiLinkColor =
	    | 'primary'
	    | 'subdued'
	    | 'secondary'
	    | 'accent'
	    | 'danger'
	    | 'warning'
	    | 'text'
	    | 'ghost';

	  export interface LinkButtonProps {
	    type?: EuiLinkType;
	    color?: EuiLinkColor;
	    onClick?: MouseEventHandler<HTMLButtonElement>;
	  }

	  type EuiLinkButtonProps = CommonProps &
	    ButtonHTMLAttributes<HTMLButtonElement> &
	    LinkButtonProps;

	  export interface LinkAnchorProps {
	    type?: EuiLinkType;
	    color?: EuiLinkColor;
	  }

	  type EuiLinkAnchorProps = CommonProps &
	    Omit<AnchorHTMLAttributes<HTMLAnchorElement>, 'onClick'> &
	    LinkAnchorProps;

	  export const EuiLink: FunctionComponent<
	    EuiLinkButtonProps | EuiLinkAnchorProps
	  >;
	}

}
declare module '@elastic/eui/src/components/outside_click_detector/outside_click_detector' {
	import { Component, EventHandler, MouseEvent as ReactMouseEvent, ReactElement } from 'react';
	export interface EuiEvent extends Event {
	    euiGeneratedBy: string[];
	}
	interface Props {
	    children: ReactElement<any>;
	    onOutsideClick: (event: EuiEvent) => void;
	    isDisabled?: boolean;
	    onMouseDown?: (event: ReactMouseEvent<any, EuiEvent>) => void;
	    onMouseUp?: (event: ReactMouseEvent<any, EuiEvent>) => void;
	    onTouchStart?: (event: ReactMouseEvent<any, EuiEvent>) => void;
	    onTouchEnd?: (event: ReactMouseEvent<any, EuiEvent>) => void;
	}
	export class EuiOutsideClickDetector extends Component<Props> {
	    private id;
	    private capturedDownIds;
	    constructor(props: Props);
	    onClickOutside: EventHandler<any>;
	    componentDidMount(): void;
	    componentWillUnmount(): void;
	    onChildClick: (event: ReactMouseEvent<any, EuiEvent>, cb: (event: ReactMouseEvent<any, EuiEvent>) => void) => void;
	    onChildMouseDown: (event: ReactMouseEvent<any, EuiEvent>) => void;
	    onChildMouseUp: (event: ReactMouseEvent<any, EuiEvent>) => void;
	    render(): ReactElement<any, string | ((props: any) => ReactElement<any, string | any | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>;
	}
	export {};

}
declare module '@elastic/eui' {
	export { EuiOutsideClickDetector } from '@elastic/eui/src/components/outside_click_detector/outside_click_detector';

}
declare module '@elastic/eui/src/components/focus_trap/focus_trap' {
	import React, { Component } from 'react';
	import { Props as ReactFocusLockProps } from 'react-focus-lock';
	import { CommonProps } from '@elastic/eui/src/components/common';
	/**
	 * A DOM node, a selector string (which will be passed to
	 * `document.querySelector()` to find the DOM node), or a function that
	 * returns a DOM node.
	 */
	export type FocusTarget = HTMLElement | string | (() => HTMLElement);
	interface EuiFocusTrapProps {
	    clickOutsideDisables?: boolean;
	    initialFocus?: FocusTarget;
	} type Props = CommonProps & ReactFocusLockProps & EuiFocusTrapProps;
	interface State {
	    hasBeenDisabledByClick: boolean;
	}
	export class EuiFocusTrap extends Component<Props, State> {
	    state: State;
	    lastInterceptedEvent: Event | null;
	    preventFocusExit: boolean;
	    componentDidMount(): void;
	    setInitalFocus: (initialFocus?: string | HTMLElement | (() => HTMLElement) | undefined) => void;
	    toggleDisabled: (shouldDisable?: boolean) => void;
	    toggleExitPrevented: (shouldPrevent?: boolean) => void;
	    handleOutsideClick: (event: Event) => void;
	    handleBubbledEvent: (e: React.MouseEvent<Element, MouseEvent>) => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui' {
	export { EuiFocusTrap, FocusTarget } from '@elastic/eui/src/components/focus_trap/focus_trap';

}
declare module '@elastic/eui/src/components/modal/modal_footer' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiModalFooterProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps>;
	export const EuiModalFooter: EuiModalFooterProps;

}
declare module '@elastic/eui/src/components/modal/modal_header' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiModalHeaderProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps>;
	export const EuiModalHeader: EuiModalHeaderProps;

}
declare module '@elastic/eui/src/components/modal/modal_body' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiModalBodyProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps>;
	export const EuiModalBody: EuiModalBodyProps;

}
declare module '@elastic/eui/src/components/modal/modal_header_title' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiModalHeaderTitleProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps>;
	export const EuiModalHeaderTitle: EuiModalHeaderTitleProps;

}
declare module '@elastic/eui' {
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	import { FocusTarget } from '@elastic/eui';

	import { ReactNode, FunctionComponent, HTMLAttributes } from 'react';

	import { ButtonColor } from '@elastic/eui';

	import { EuiModalFooterProps } from '@elastic/eui/src/components/modal/modal_footer';
	import { EuiModalHeaderProps } from '@elastic/eui/src/components/modal/modal_header';
	import { EuiModalBodyProps } from '@elastic/eui/src/components/modal/modal_body';
	import { EuiModalHeaderTitleProps } from '@elastic/eui/src/components/modal/modal_header_title'; module '@elastic/eui' {
	  /**
	   * Modal type defs
	   *
	   * @see './modal.js'
	   */
	  export interface EuiModalProps {
	    onClose: () => void;
	    /**
	     * Sets the max-width of the modal,
	     * set to `true` to use the default size,
	     * set to `false` to not restrict the width,
	     * set to a number for a custom width in px,
	     * set to a string for a custom width in custom measurement.
	     */
	    maxWidth?: boolean | number | string;

	    /**
	     * Specifies what element should initially have focus;
	     * Can be a DOM node, or a selector string (which will be passed to document.querySelector() to find the DOM node), or a function that returns a DOM node.
	     */
	    initialFocus?: FocusTarget;
	  }

	  export const EuiModal: FunctionComponent<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiModalProps
	  >;

	  /**
	   * Confirm modal type defs
	   *
	   * @see './confirm_modal.js'
	   */

	  // index.js re-exports values from confirm_modal.js with these names.
	  export const EUI_MODAL_CONFIRM_BUTTON: 'confirm';
	  export const EUI_MODAL_CANCEL_BUTTON: 'cancel';

	  export interface EuiConfirmModalProps {
	    buttonColor?: ButtonColor;
	    cancelButtonText?: ReactNode;
	    confirmButtonText?: ReactNode;
	    confirmButtonDisabled?: boolean;
	    defaultFocusedButton?: 'confirm' | 'cancel';
	    title?: ReactNode;
	    onCancel?: () => void;
	    onConfirm?: () => void;
	    /**
	     * Sets the max-width of the modal,
	     * set to `true` to use the default size,
	     * set to `false` to not restrict the width,
	     * set to a number for a custom width in px,
	     * set to a string for a custom width in custom measurement.
	     */
	    maxWidth?: boolean | number | string;
	  }

	  // `title` from the React defs conflicts with our definition above
	  export const EuiConfirmModal: FunctionComponent<
	    CommonProps &
	      Omit<HTMLAttributes<HTMLDivElement>, 'title'> &
	      EuiConfirmModalProps
	  >;

	  /**
	   * Modal body type defs
	   *
	   * @see './modal_body.js'
	   */
	  export const EuiModalBody: EuiModalBodyProps;

	  /**
	   * Modal footer type defs
	   *
	   * @see './modal_footer.js'
	   */
	  export const EuiModalFooter: EuiModalFooterProps;

	  /**
	   * Modal header type defs
	   *
	   * @see './modal_header.js'
	   */
	  export const EuiModalHeader: EuiModalHeaderProps;

	  /**
	   * Modal header title type defs
	   *
	   * @see './modal_header_title.js'
	   */
	  export const EuiModalHeaderTitle: EuiModalHeaderTitleProps;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiPanelProps } from '@elastic/eui/src/components/panel/panel';

	import { FunctionComponent, HTMLAttributes } from 'react'; module '@elastic/eui' {
	  export interface EuiPageWidthProps {
	    /**
	     * Sets the max-width of the page,
	     * set to `true` to use the default size,
	     * set to `false` to not restrict the width,
	     * set to a number for a custom width in px,
	     * set to a string for a custom width in custom measurement.
	     */
	    restrictWidth?: boolean | number | string;
	  }

	  /**
	   * @see './page.js'
	   */
	  export const EuiPage: FunctionComponent<
	    CommonProps & EuiPageWidthProps & HTMLAttributes<HTMLDivElement>
	  >;

	  /**
	   * @see ./page_header/page_header.js
	   */
	  export const EuiPageHeader: FunctionComponent<
	    CommonProps & HTMLAttributes<HTMLDivElement>
	  >;

	  /**
	   * @see ./page_header/page_header_section.js
	   */
	  export const EuiPageHeaderSection: FunctionComponent<
	    CommonProps & HTMLAttributes<HTMLDivElement>
	  >;

	  /**
	   * @see ./page_body/page_body.js
	   */
	  export const EuiPageBody: FunctionComponent<
	    CommonProps & EuiPageWidthProps & HTMLAttributes<HTMLDivElement>
	  >;

	  /**
	   * @see ./page_content/page_content.js
	   */

	  export type EuiPageContentPaddingSize = 'none' | 's' | 'm' | 'l';
	  export type EuiPageContentVerticalPosition = 'center';
	  export type EuiPageContentHorizontalPosition = 'center';

	  export interface EuiPageContentProps {
	    panelPaddingSize?: EuiPageContentPaddingSize;
	    verticalPosition?: EuiPageContentVerticalPosition;
	    horizontalPosition?: EuiPageContentHorizontalPosition;
	  }

	  export const EuiPageContent: FunctionComponent<
	    CommonProps & EuiPanelProps & EuiPageContentProps
	  >;

	  /**
	   * @see ./page_content/page_content_body.js
	   */
	  export const EuiPageContentBody: FunctionComponent<
	    CommonProps & HTMLAttributes<HTMLDivElement>
	  >;

	  /**
	   * @see ./page_content/page_content_header.js
	   */
	  export const EuiPageContentHeader: FunctionComponent<
	    CommonProps & HTMLAttributes<HTMLDivElement>
	  >;

	  /**
	   * @see ./page_content/page_content_header_section.js
	   */
	  export const EuiPageContentHeaderSection: FunctionComponent<
	    CommonProps & HTMLAttributes<HTMLDivElement>
	  >;

	  /**
	   * @see ./page_side_bar/page_side_bar.js
	   */
	  export const EuiPageSideBar: FunctionComponent<
	    CommonProps & HTMLAttributes<HTMLDivElement>
	  >;
	}

}
declare module '@elastic/eui/src/components/tabs/tab' {
	import { MouseEventHandler, AnchorHTMLAttributes, ButtonHTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';
	export interface EuiTabProps extends CommonProps {
	    isSelected?: boolean;
	    disabled?: boolean;
	} type EuiTabPropsForAnchor = EuiTabProps & AnchorHTMLAttributes<HTMLAnchorElement> & {
	    href?: string;
	    onClick?: MouseEventHandler<HTMLAnchorElement>;
	}; type EuiTabPropsForButton = EuiTabProps & ButtonHTMLAttributes<HTMLButtonElement> & {
	    onClick?: MouseEventHandler<HTMLButtonElement>;
	};
	export type Props = ExclusiveUnion<EuiTabPropsForAnchor, EuiTabPropsForButton>;
	export const EuiTab: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui' {
	import { ReactNode, FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { Props as EuiTabProps } from '@elastic/eui/src/components/tabs/tab'; module '@elastic/eui' {
	  type TAB_SIZES = 's' | 'm';

	  type TAB_DISPLAYS = 'default' | 'condensed';

	  interface EuiTabsProps {
	    size?: TAB_SIZES;
	    display?: TAB_DISPLAYS;
	    expand?: boolean;
	  }

	  export interface EuiTabbedContentTab {
	    id: string;
	    name: string;
	    content: ReactNode;
	  }

	  type TABBED_CONTENT_AUTOFOCUS = 'initial' | 'selected';

	  interface EuiTabbedContentProps {
	    tabs: EuiTabbedContentTab[];
	    onTabClick?: (tab: EuiTabbedContentTab) => void;
	    selectedTab?: EuiTabbedContentTab;
	    initialSelectedTab?: EuiTabbedContentTab;
	    size?: TAB_SIZES;
	    display?: TAB_DISPLAYS;
	    expand?: boolean;
	    autoFocus?: TABBED_CONTENT_AUTOFOCUS;
	  }

	  export const EuiTabs: FunctionComponent<
	    EuiTabsProps & CommonProps & HTMLAttributes<HTMLDivElement>
	  >;
	  export const EuiTabbedContent: FunctionComponent<
	    EuiTabbedContentProps & CommonProps & HTMLAttributes<HTMLDivElement>
	  >;
	  export const EuiTab: FunctionComponent<EuiTabProps>;
	}

}




















declare module '@elastic/eui' {
  // @ts-ignore
  export * from '@elastic/eui/src/components/common'; // eslint-disable-line import/no-unresolved
}
declare module '@elastic/eui/dist/eui_theme_*.json' {
  const value: any;
  export default value;
}


declare module '@elastic/eui/src/components/accessibility/keyboard_accessible.test' {
	export {};

}
declare module '@elastic/eui/src/components/accessibility/screen_reader.test' {
	export {};

}
declare module '@elastic/eui/src/test/required_props' {
	export const requiredProps: {
	    'aria-label': string;
	    className: string;
	    'data-test-subj': string;
	};

}
declare module '@elastic/eui/src/components/observer/mutation_observer/mutation_observer' {
	import { ReactNode } from 'react';
	import { EuiObserver } from '@elastic/eui/src/components/observer/observer';
	interface Props {
	    children: (ref: (e: HTMLElement | null) => void) => ReactNode;
	    onMutation: MutationCallback;
	    observerOptions?: MutationObserverInit;
	}
	export class EuiMutationObserver extends EuiObserver<Props> {
	    name: string;
	    beginObserve: () => void;
	}
	export {};

}
declare module '@elastic/eui' {
	export { EuiMutationObserver } from '@elastic/eui/src/components/observer/mutation_observer/mutation_observer';

}
declare module '@elastic/eui/src/components/accordion/accordion' {
	import { Component, HTMLAttributes, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const paddingSizeToClassNameMap: {
	    none: null;
	    xs: string;
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	};
	export const PADDING_SIZES: ("s" | "m" | "l" | "xl" | "none" | "xs")[];
	export type EuiAccordionSize = keyof typeof paddingSizeToClassNameMap;
	export type EuiAccordionProps = HTMLAttributes<HTMLDivElement> & CommonProps & {
	    id: string;
	    /**
	     * Class that will apply to the trigger for the accordion.
	     */
	    buttonClassName?: string;
	    /**
	     * Class that will apply to the trigger content for the accordion.
	     */
	    buttonContentClassName?: string;
	    /**
	     * The content of the clickable trigger
	     */
	    buttonContent?: ReactNode;
	    /**
	     * Will appear right aligned against the button. Useful for separate actions like deletions.
	     */
	    extraAction?: ReactNode;
	    /**
	     * The accordion will start in the open state.
	     */
	    initialIsOpen: boolean;
	    /**
	     * Optional callback method called on open and close with a single `isOpen` parameter
	     */
	    onToggle?: (isOpen: boolean) => void;
	    /**
	     * The padding around the exposed accordion content.
	     */
	    paddingSize: EuiAccordionSize;
	};
	export class EuiAccordion extends Component<EuiAccordionProps, {
	    isOpen: boolean;
	}> {
	    static defaultProps: {
	        initialIsOpen: boolean;
	        paddingSize: string;
	    };
	    childContent: HTMLDivElement | null;
	    childWrapper: HTMLDivElement | null;
	    state: {
	        isOpen: boolean;
	    };
	    setChildContentHeight: () => void;
	    onMutation: (records: MutationRecord[]) => void;
	    componentDidMount(): void;
	    componentDidUpdate(): void;
	    onToggle: () => void;
	    setChildContentRef: (node: HTMLDivElement | null) => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/accordion/accordion.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiAccordion, EuiAccordionProps } from '@elastic/eui/src/components/accordion/accordion';

}
declare module '@elastic/eui/src/components/avatar/avatar' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const sizeToClassNameMap: {
	    none: null;
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	};
	export const SIZES: ("s" | "m" | "l" | "xl" | "none")[];
	export type EuiAvatarSize = keyof typeof sizeToClassNameMap; const typeToClassNameMap: {
	    space: string;
	    user: string;
	};
	export const TYPES: ("user" | "space")[];
	export type EuiAvatarType = keyof typeof typeToClassNameMap;
	export type EuiAvatarProps = HTMLAttributes<HTMLDivElement> & CommonProps & {
	    /**
	     * Full name of avatar for title attribute and calculating initial if not provided
	     */
	    name: string;
	    /**
	     * Accepts hex value `#FFFFFF`, `#000` otherwise a viz palette color will be assigned
	     */
	    color?: string;
	    /**
	     * Custom initials (max 2 characters).
	     * By default will take the first character (of each word).
	     */
	    initials?: string;
	    /**
	     * Specify how many characters to show (max 2 allowed).
	     * By default, will show based on number of words.
	     */
	    initialsLength?: 1 | 2;
	    /**
	     * The type of avatar this is displaying
	     */
	    type?: EuiAvatarType;
	    imageUrl?: string;
	    size?: EuiAvatarSize;
	};
	export const EuiAvatar: FunctionComponent<EuiAvatarProps>;
	export {};

}
declare module '@elastic/eui/src/components/avatar/avatar.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiAvatar } from '@elastic/eui/src/components/avatar/avatar';

}
declare module '@elastic/eui/src/components/badge/badge.test' {
	export {};

}
declare module '@elastic/eui/src/test/take_mounted_snapshot' {
	import { ReactWrapper } from 'enzyme';
	import { Component } from 'react';
	/**
	 * Use this function to generate a Jest snapshot of components that have been fully rendered
	 * using Enzyme's `mount` method. Typically, a mounted component will result in a snapshot
	 * containing both React components and HTML elements. This function removes the React components,
	 * leaving only HTML elements in the snapshot.
	 */
	export const takeMountedSnapshot: (mountedComponent: ReactWrapper<{}, {}, Component<{}, {}, any>>) => ChildNode | null;

}
declare module '@elastic/eui/src/test/find_test_subject' {
	import { ReactWrapper, ShallowWrapper } from 'enzyme'; type FindTestSubject<T extends ShallowWrapper | ReactWrapper> = (mountedComponent: T, testSubjectSelector: string) => ReturnType<T['find']>;
	export const findTestSubject: FindTestSubject<ShallowWrapper | ReactWrapper>;
	export {};

}
declare module '@elastic/eui/src/test/react_warnings' {
	export const startThrowingReactWarnings: () => void;
	export const stopThrowingReactWarnings: () => void;

}
declare module '@elastic/eui/src/test/sleep' {
	export function sleep(ms?: number): Promise<{}>;

}
declare module '@elastic/eui' {
	export { requiredProps } from '@elastic/eui/src/test/required_props';
	export { takeMountedSnapshot } from '@elastic/eui/src/test/take_mounted_snapshot';
	export { findTestSubject } from '@elastic/eui/src/test/find_test_subject';
	export { startThrowingReactWarnings, stopThrowingReactWarnings, } from '@elastic/eui/src/test/react_warnings';
	export { sleep } from '@elastic/eui/src/test/sleep';

}
declare module '@elastic/eui/src/components/badge/beta_badge/beta_badge.test' {
	export {};

}
declare module '@elastic/eui/src/components/badge/notification_badge/badge_notification.test' {
	export {};

}
declare module '@elastic/eui/src/components/button/button.test' {
	export {};

}
declare module '@elastic/eui/src/components/button/button_empty/button_empty.test' {
	export {};

}
declare module '@elastic/eui/src/components/button/button_group/button_group.test' {
	export {};

}
declare module '@elastic/eui/src/components/button/button_icon/button_icon.test' {
	export {};

}
declare module '@elastic/eui/src/components/button/button_toggle/button_toggle.test' {
	export {};

}
declare module '@elastic/eui/src/components/card/card_graphic.test' {
	export {};

}
declare module '@elastic/eui/src/components/color_picker/color_picker_swatch.test' {
	export {};

}
declare module '@elastic/eui/src/components/color_picker/hue.test' {
	export {};

}
declare module '@elastic/eui/src/components/color_picker/saturation.test' {
	export {};

}
declare module '@elastic/eui/src/components/combo_box/matching_options' {
	import { EuiComboBoxOptionProps } from '@elastic/eui';
	export const flattenOptionGroups: <T>(optionsOrGroups: EuiComboBoxOptionProps<T>[]) => EuiComboBoxOptionProps<T>[];
	export const getSelectedOptionForSearchValue: <T>(searchValue: string, selectedOptions: EuiComboBoxOptionProps<T>[]) => EuiComboBoxOptionProps<T> | undefined;
	export const getMatchingOptions: <T>(options: EuiComboBoxOptionProps<T>[], selectedOptions: EuiComboBoxOptionProps<T>[], searchValue: string, isPreFiltered: boolean, showPrevSelected: boolean) => EuiComboBoxOptionProps<T>[];

}
declare module '@elastic/eui/src/components/combo_box/matching_options.test' {
	export {};

}
declare module '@elastic/eui/src/components/combo_box/combo_box_options_list/combo_box_title' {
	import { FunctionComponent } from 'react';
	export const EuiComboBoxTitle: FunctionComponent<{}>;

}
declare module '@elastic/eui' {
	export { EuiPanel, PanelPaddingSize, SIZES } from '@elastic/eui/src/components/panel/panel';

}
declare module '@elastic/eui/src/components/popover/popover' {
	import React, { Component, CSSProperties, HTMLAttributes, ReactNode, Ref } from 'react';
	import { CommonProps, NoArgCallback, RefCallback } from '@elastic/eui/src/components/common';
	import { FocusTarget } from '@elastic/eui';
	import { PanelPaddingSize } from '@elastic/eui';
	import { EuiPopoverPosition } from '@elastic/eui/src/services/popover';
	export type PopoverAnchorPosition = 'upCenter' | 'upLeft' | 'upRight' | 'downCenter' | 'downLeft' | 'downRight' | 'leftCenter' | 'leftUp' | 'leftDown' | 'rightCenter' | 'rightUp' | 'rightDown';
	export interface EuiPopoverProps {
	    anchorClassName?: string;
	    anchorPosition?: PopoverAnchorPosition;
	    /** Style and position alteration for arrow-less, left-aligned
	     * attachment. Intended for use with inputs as anchors, à la
	     * EuiColorPicker */
	    attachToAnchor?: boolean;
	    button: NonNullable<ReactNode>;
	    buttonRef?: RefCallback<HTMLElement | null>;
	    closePopover: NoArgCallback<void>;
	    container?: HTMLElement;
	    /** CSS display type for both the popover and anchor */
	    display?: keyof typeof displayToClassNameMap;
	    hasArrow?: boolean;
	    /** specifies what element should initially have focus; Can be a DOM
	     * node, or a selector string (which will be passed to
	     * document.querySelector() to find the DOM node), or a function that
	     * returns a DOM node. */
	    initialFocus?: FocusTarget;
	    /** Passed directly to EuiPortal for DOM positioning. Both properties are
	     * required if prop is specified **/
	    insert?: {
	        sibling: HTMLElement;
	        position: 'before' | 'after';
	    };
	    isOpen?: boolean;
	    ownFocus?: boolean;
	    panelClassName?: string;
	    panelPaddingSize?: PanelPaddingSize;
	    panelRef?: RefCallback<HTMLElement | null>;
	    popoverRef?: Ref<HTMLDivElement>;
	    /** When `true`, the popover's position is re-calculated when the user
	     * scrolls, this supports having fixed-position popover anchors. */
	    repositionOnScroll?: boolean;
	    withTitle?: boolean;
	    /** By default, popover content inherits the z-index of the anchor
	     * component; pass zIndex to override */
	    zIndex?: number;
	}
	export function getPopoverPositionFromAnchorPosition(anchorPosition: PopoverAnchorPosition): EuiPopoverPosition;
	export function getPopoverAlignFromAnchorPosition(anchorPosition: PopoverAnchorPosition): EuiPopoverPosition;
	export const ANCHOR_POSITIONS: string[]; const displayToClassNameMap: {
	    inlineBlock: undefined;
	    block: string;
	};
	export const DISPLAY: string[];
	export type Props = CommonProps & HTMLAttributes<HTMLDivElement> & EuiPopoverProps;
	interface State {
	    prevProps: {
	        isOpen?: boolean;
	    };
	    suppressingPopover?: boolean;
	    isClosing: boolean;
	    isOpening: boolean;
	    popoverStyles: CSSProperties;
	    arrowStyles?: CSSProperties;
	    arrowPosition: any;
	    openPosition: any;
	    isOpenStable: boolean;
	} type PropsWithDefaults = Props & {
	    anchorPosition: PopoverAnchorPosition;
	    /** CSS display type for both the popover and anchor */
	    display: keyof typeof displayToClassNameMap;
	    hasArrow: boolean;
	    isOpen: boolean;
	    ownFocus: boolean;
	    panelPaddingSize: PanelPaddingSize;
	};
	export class EuiPopover extends Component<Props, State> {
	    static defaultProps: Partial<PropsWithDefaults>;
	    static getDerivedStateFromProps(nextProps: Props, prevState: State): Partial<State> | null;
	    private closingTransitionTimeout;
	    private button;
	    private panel;
	    constructor(props: Props);
	    onKeyDown: (e: React.KeyboardEvent<HTMLDivElement>) => void;
	    updateFocus(): void;
	    componentDidMount(): void;
	    componentDidUpdate(prevProps: Props): void;
	    componentWillUnmount(): void;
	    onMutation: (records: MutationRecord[]) => void;
	    positionPopover: (allowEnforcePosition: boolean) => void;
	    positionPopoverFixed: () => void;
	    positionPopoverFluid: () => void;
	    panelRef: (node: HTMLElement | null) => void;
	    buttonRef: (node: HTMLElement | null) => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/popover/input_popover' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	import { EuiPopoverProps } from '@elastic/eui/src/components/popover/popover';
	interface EuiInputPopoverProps extends Omit<EuiPopoverProps, 'button' | 'buttonRef'> {
	    fullWidth?: boolean;
	    input: EuiPopoverProps['button'];
	    inputRef?: EuiPopoverProps['buttonRef'];
	} type Props = CommonProps & HTMLAttributes<HTMLDivElement> & EuiInputPopoverProps;
	export const EuiInputPopover: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/popover/popover_title' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiPopoverTitleProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps>;
	export const EuiPopoverTitle: EuiPopoverTitleProps;

}
declare module '@elastic/eui/src/components/popover/popover_footer' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiPopoverFooterProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps>;
	export const EuiPopoverFooter: EuiPopoverFooterProps;

}
declare module '@elastic/eui/src/components/popover/wrapping_popover' {
	import { Component } from 'react';
	import { Props as EuiPopoverProps } from '@elastic/eui/src/components/popover/popover';
	interface Props extends EuiPopoverProps {
	    button: HTMLElement;
	}
	/**
	 * Injects the EuiPopover next to the button via EuiPortal
	 * then the button element is moved into the popover dom.
	 * On unmount, the button is moved back to its original location.
	 */
	export class EuiWrappingPopover extends Component<Props> {
	    private portal;
	    private anchor;
	    componentDidMount(): void;
	    componentWillUnmount(): void;
	    setPortalRef: (node: HTMLElement | null) => void;
	    setAnchorRef: (node: HTMLElement | null) => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui' {
	export { EuiInputPopover } from '@elastic/eui/src/components/popover/input_popover';
	export { EuiPopover, EuiPopoverProps, PopoverAnchorPosition } from '@elastic/eui/src/components/popover/popover';
	export { EuiPopoverTitle } from '@elastic/eui/src/components/popover/popover_title';
	export { EuiPopoverFooter } from '@elastic/eui/src/components/popover/popover_footer';
	export { EuiWrappingPopover } from '@elastic/eui/src/components/popover/wrapping_popover';

}
declare module '@elastic/eui/src/components/context_menu/context_menu_panel' {
	import React, { Component, HTMLAttributes, ReactElement, ReactNode } from 'react';
	import { CommonProps, NoArgCallback, Omit } from '@elastic/eui/src/components/common';
	export type EuiContextMenuPanelHeightChangeHandler = (height: number) => void;
	export type EuiContextMenuPanelTransitionType = 'in' | 'out';
	export type EuiContextMenuPanelTransitionDirection = 'next' | 'previous';
	export type EuiContextMenuPanelShowPanelCallback = (currentPanelIndex?: number) => void;
	export interface EuiContextMenuPanelProps {
	    hasFocus?: boolean;
	    initialFocusedItemIndex?: number;
	    items?: ReactElement[];
	    onClose?: NoArgCallback<void>;
	    onHeightChange?: EuiContextMenuPanelHeightChangeHandler;
	    onTransitionComplete?: NoArgCallback<void>;
	    onUseKeyboardToNavigate?: NoArgCallback<void>;
	    showNextPanel?: EuiContextMenuPanelShowPanelCallback;
	    showPreviousPanel?: NoArgCallback<void>;
	    title?: ReactNode;
	    transitionDirection?: EuiContextMenuPanelTransitionDirection;
	    transitionType?: EuiContextMenuPanelTransitionType;
	    watchedItemProps?: string[];
	} type Props = CommonProps & Omit<HTMLAttributes<HTMLDivElement>, 'onKeyDown' | 'tabIndex' | 'onAnimationEnd'> & EuiContextMenuPanelProps;
	interface State {
	    prevProps: {
	        items: Props['items'];
	    };
	    menuItems: HTMLElement[];
	    isTransitioning: boolean;
	    focusedItemIndex?: number;
	    currentHeight?: number;
	    height?: number;
	}
	export class EuiContextMenuPanel extends Component<Props, State> {
	    static defaultProps: Partial<Props>;
	    private _isMounted;
	    private backButton?;
	    private content?;
	    private panel?;
	    constructor(props: Props);
	    incrementFocusedItemIndex: (amount: number) => void;
	    onKeyDown: (e: React.KeyboardEvent<HTMLDivElement>) => void;
	    updateFocus(): void;
	    onTransitionComplete: () => void;
	    componentDidMount(): void;
	    componentWillUnmount(): void;
	    static getDerivedStateFromProps(nextProps: Props, prevState: State): Partial<State> | null;
	    getWatchedPropsForItems(items: ReactElement[]): string | null;
	    didItemsChange(prevItems: ReactElement[], nextItems: ReactElement[]): true | undefined;
	    shouldComponentUpdate(nextProps: Props, nextState: State): boolean;
	    updateHeight(): void;
	    componentDidUpdate(): void;
	    menuItemRef: (index: number, node: HTMLElement) => void;
	    panelRef: (node: HTMLElement | null) => void;
	    contentRef: (node: HTMLElement | null) => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/context_menu/context_menu_item' {
	import React, { ButtonHTMLAttributes, Component, ReactElement, ReactNode, Ref } from 'react';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	import { ToolTipPositions } from '@elastic/eui';
	export type EuiContextMenuItemIcon = ReactElement<any> | string | HTMLElement; type LayoutAlignment = 'center' | 'top' | 'bottom';
	export interface EuiContextMenuItemProps extends CommonProps {
	    icon?: EuiContextMenuItemIcon;
	    hasPanel?: boolean;
	    disabled?: boolean;
	    onClick?: (event: React.MouseEvent) => void;
	    buttonRef?: Ref<HTMLButtonElement>;
	    /**
	     * Required if using a tooltip. Add an optional tooltip on hover
	     */
	    toolTipContent?: ReactNode;
	    /**
	     * Optional title for the tooltip
	     */
	    toolTipTitle?: ReactNode;
	    /**
	     * Dictates the position of the tooltip.
	     */
	    toolTipPosition?: ToolTipPositions;
	    href?: string;
	    target?: string;
	    rel?: string;
	    /**
	     * How to align icon with content of button
	     */
	    layoutAlign?: LayoutAlignment;
	} type Props = CommonProps & Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'type'> & EuiContextMenuItemProps;
	export const LAYOUT_ALIGN: LayoutAlignment[];
	export class EuiContextMenuItem extends Component<Props> {
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/context_menu/context_menu' {
	import React, { Component, HTMLAttributes, ReactElement, ReactNode } from 'react';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	import { EuiContextMenuPanelTransitionDirection, EuiContextMenuPanelTransitionType } from '@elastic/eui/src/components/context_menu/context_menu_panel';
	import { EuiContextMenuItemProps } from '@elastic/eui/src/components/context_menu/context_menu_item';
	export type EuiContextMenuPanelId = string | number;
	export type EuiContextMenuPanelItemDescriptor = Omit<EuiContextMenuItemProps, 'hasPanel'> & {
	    name: string;
	    panel?: EuiContextMenuPanelId;
	};
	export interface EuiContextMenuPanelDescriptor {
	    id: EuiContextMenuPanelId;
	    title?: string;
	    items?: EuiContextMenuPanelItemDescriptor[];
	    content?: ReactNode;
	    width?: number;
	}
	export type EuiContextMenuProps = CommonProps & Omit<HTMLAttributes<HTMLDivElement>, 'style'> & {
	    panels?: EuiContextMenuPanelDescriptor[];
	    initialPanelId?: EuiContextMenuPanelId;
	};
	interface State {
	    prevProps: {
	        panels?: EuiContextMenuPanelDescriptor[];
	    };
	    idToPanelMap: {
	        [id: string]: EuiContextMenuPanelDescriptor;
	    };
	    idToPreviousPanelIdMap: {
	        [panel: string]: EuiContextMenuPanelId;
	    };
	    idAndItemIndexToPanelIdMap: {
	        [id: string]: {
	            [index: string]: EuiContextMenuPanelId;
	        };
	    };
	    idToRenderedItemsMap: {
	        [id: string]: ReactElement[];
	    };
	    height?: number;
	    outgoingPanelId?: EuiContextMenuPanelId;
	    incomingPanelId?: EuiContextMenuPanelId;
	    transitionDirection?: EuiContextMenuPanelTransitionDirection;
	    isOutgoingPanelVisible: boolean;
	    focusedItemIndex?: number;
	    isUsingKeyboardToNavigate: boolean;
	}
	export class EuiContextMenu extends Component<EuiContextMenuProps, State> {
	    static defaultProps: Partial<EuiContextMenuProps>;
	    static getDerivedStateFromProps(nextProps: EuiContextMenuProps, prevState: State): Partial<State> | null;
	    constructor(props: EuiContextMenuProps);
	    componentDidUpdate(prevProps: EuiContextMenuProps): void;
	    hasPreviousPanel: (panelId: React.ReactText) => boolean;
	    showPanel(panelId: EuiContextMenuPanelId, direction?: EuiContextMenuPanelTransitionDirection): void;
	    showNextPanel: (itemIndex?: number | undefined) => void;
	    showPreviousPanel: () => void;
	    onIncomingPanelHeightChange: (height: number) => void;
	    onOutGoingPanelTransitionComplete: () => void;
	    onUseKeyboardToNavigate: () => void;
	    mapIdsToRenderedItems: (panels?: EuiContextMenuPanelDescriptor[]) => {
	        [id: string]: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>[];
	    };
	    renderItems(items?: EuiContextMenuPanelItemDescriptor[]): JSX.Element[];
	    renderPanel(panelId: EuiContextMenuPanelId, transitionType: EuiContextMenuPanelTransitionType): JSX.Element | undefined;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/context_menu/context_menu.test' {
	export const tick: (ms?: number) => Promise<{}>;

}
declare module '@elastic/eui/src/components/context_menu/context_menu_item.test' {
	export {};

}
declare module '@elastic/eui/src/components/context_menu/context_menu_panel.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiContextMenu, EuiContextMenuPanelDescriptor, EuiContextMenuPanelItemDescriptor, } from '@elastic/eui/src/components/context_menu/context_menu';
	export { EuiContextMenuPanel, EuiContextMenuPanelProps, } from '@elastic/eui/src/components/context_menu/context_menu_panel';
	export { EuiContextMenuItem, EuiContextMenuItemIcon, } from '@elastic/eui/src/components/context_menu/context_menu_item';

}
declare module '@elastic/eui/src/components/copy/copy' {
	import React, { ReactElement, ReactNode } from 'react';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	import { EuiToolTipProps } from '@elastic/eui';
	interface EuiCopyProps extends CommonProps, Partial<Omit<EuiToolTipProps, 'children'>> {
	    /**
	     * Text that will be copied to clipboard when copy function is executed.
	     */
	    textToCopy: string;
	    /**
	     * Tooltip message displayed before copy function is called.
	     */
	    beforeMessage?: ReactNode;
	    /**
	     * Tooltip message displayed after copy function is called that lets the user know that
	     * 'textToCopy' has been copied to the clipboard.
	     */
	    afterMessage?: string;
	    /**
	     * Function that must return a component. First argument is 'copy' function.
	     * Use your own logic to create the component that users interact with when triggering copy.
	     */
	    children(copy: () => void): ReactElement;
	}
	interface EuiCopyState {
	    tooltipText: ReactNode;
	}
	export class EuiCopy extends React.Component<EuiCopyProps, EuiCopyState> {
	    static defaultProps: {
	        afterMessage: string;
	    };
	    constructor(props: EuiCopyProps);
	    copy: () => void;
	    resetTooltipText: () => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui' {
	export { EuiCopy } from '@elastic/eui/src/components/copy/copy';

}
declare module '@elastic/eui/src/components/date_picker/super_date_picker/pretty_interval' {
	export const prettyInterval: (isPaused: boolean, intervalInMs: number) => string;

}
declare module '@elastic/eui/src/components/date_picker/super_date_picker/pretty_interval.test' {
	export {};

}
declare module '@elastic/eui/src/components/date_picker/super_date_picker/relative_options' {
	export const relativeOptions: {
	    text: string;
	    value: string;
	}[];
	export const relativeUnitsFromLargestToSmallest: string[];

}
declare module '@elastic/eui/src/components/date_picker/super_date_picker/relative_options.test' {
	export {};

}
declare module '@elastic/eui/src/components/delay_hide/delay_hide' {
	import { Component, ReactNode } from 'react';
	export interface EuiDelayHideProps {
	    hide: boolean;
	    minimumDuration: number;
	    render: () => ReactNode;
	}
	interface EuiDelayHideState {
	    hide: boolean;
	    countdownExpired?: boolean;
	}
	export class EuiDelayHide extends Component<EuiDelayHideProps, EuiDelayHideState> {
	    static defaultProps: {
	        hide: boolean;
	        minimumDuration: number;
	    };
	    static getDerivedStateFromProps(nextProps: EuiDelayHideProps, prevState: EuiDelayHideState): {
	        hide: boolean;
	        countdownExpired: boolean | undefined;
	    };
	    state: {
	        hide: boolean;
	        countdownExpired: boolean;
	    };
	    private timeoutId?;
	    componentDidMount(): void;
	    componentDidUpdate(prevProps: EuiDelayHideProps): void;
	    componentWillUnmount(): void;
	    startCountdown: () => void;
	    finishCountdown: () => void;
	    render(): {} | null | undefined;
	}
	export {};

}
declare module '@elastic/eui' {
	export { EuiDelayHide } from '@elastic/eui/src/components/delay_hide/delay_hide';

}
declare module '@elastic/eui/src/components/delay_hide/delay_hide.test' {
	export {};

}
declare module '@elastic/eui/src/components/delay_render/delay_render' {
	import { Component } from 'react';
	interface EuiDelayRenderProps {
	    delay: number;
	}
	interface EuiDelayRenderState {
	    toggle: boolean;
	}
	export class EuiDelayRender extends Component<EuiDelayRenderProps, EuiDelayRenderState> {
	    static defaultProps: {
	        delay: number;
	    };
	    private delayID;
	    private toBeDelayed;
	    constructor(props: EuiDelayRenderProps);
	    shouldUpdate(): void;
	    startDelaying: () => void;
	    stopDelaying: () => void;
	    componentDidMount(): void;
	    shouldComponentUpdate(): boolean;
	    componentWillUnmount(): void;
	    componentDidUpdate(): void;
	    render(): {} | null | undefined;
	}
	export {};

}
declare module '@elastic/eui' {
	export { EuiDelayRender } from '@elastic/eui/src/components/delay_render/delay_render';

}
declare module '@elastic/eui/src/components/description_list/description_list_title' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export const EuiDescriptionListTitle: FunctionComponent<CommonProps & HTMLAttributes<HTMLElement>>;

}
declare module '@elastic/eui/src/components/description_list/description_list_description' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export const EuiDescriptionListDescription: FunctionComponent<CommonProps & HTMLAttributes<HTMLElement>>;

}
declare module '@elastic/eui/src/components/description_list/description_list' {
	import { HTMLAttributes, ReactNode, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiDescriptionListType = keyof typeof typesToClassNameMap;
	export type EuiDescriptionListAlignment = keyof typeof alignmentsToClassNameMap;
	export type EuiDescriptionListTextStyle = keyof typeof textStylesToClassNameMap;
	export interface EuiDescriptionListProps {
	    listItems?: Array<{
	        title: NonNullable<ReactNode>;
	        description: NonNullable<ReactNode>;
	    }>;
	    /**
	     * Text alignment
	     */
	    align?: EuiDescriptionListAlignment;
	    /**
	     * Smaller text and condensed spacing
	     */
	    compressed?: boolean;
	    /**
	     * How should the content be styled, by default
	     * this will emphasize the title
	     */
	    textStyle?: EuiDescriptionListTextStyle;
	    /**
	     * How each item should be layed out
	     */
	    type?: EuiDescriptionListType;
	    /**
	     * Props object to be passed to `EuiDescriptionListTitle`
	     */
	    titleProps?: HTMLAttributes<HTMLElement>;
	    /**
	     * Props object to be passed to `EuiDescriptionListDescription`
	     */
	    descriptionProps?: HTMLAttributes<HTMLElement>;
	} const typesToClassNameMap: {
	    row: string;
	    inline: string;
	    column: string;
	    responsiveColumn: string;
	};
	export const TYPES: ("inline" | "row" | "column" | "responsiveColumn")[]; const alignmentsToClassNameMap: {
	    center: string;
	    left: string;
	};
	export const ALIGNMENTS: ("center" | "left")[]; const textStylesToClassNameMap: {
	    normal: string;
	    reverse: string;
	};
	export const TEXT_STYLES: ("reverse" | "normal")[];
	export const EuiDescriptionList: FunctionComponent<CommonProps & HTMLAttributes<HTMLDListElement> & EuiDescriptionListProps>;
	export {};

}
declare module '@elastic/eui/src/components/description_list/description_list.test' {
	export {};

}
declare module '@elastic/eui/src/components/description_list/description_list_description.test' {
	export {};

}
declare module '@elastic/eui/src/components/description_list/description_list_title.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiDescriptionList } from '@elastic/eui/src/components/description_list/description_list';
	export { EuiDescriptionListTitle } from '@elastic/eui/src/components/description_list/description_list_title';
	export { EuiDescriptionListDescription } from '@elastic/eui/src/components/description_list/description_list_description';

}
declare module '@elastic/eui/src/components/drag_and_drop/drag_drop_context' {
	import React, { FunctionComponent } from 'react';
	import { DragDropContextProps } from 'react-beautiful-dnd'; type EuiDraggingType = string | null;
	interface EuiDraggingContext {
	    isDraggingType: EuiDraggingType;
	}
	export const EuiDragDropContextContext: React.Context<EuiDraggingContext>;
	export const EuiDragDropContext: FunctionComponent<DragDropContextProps>;
	export {};

}
declare module '@elastic/eui/src/components/drag_and_drop/droppable' {
	import React, { CSSProperties, FunctionComponent, ReactElement } from 'react';
	import { DroppableProps } from 'react-beautiful-dnd';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common'; const spacingToClassNameMap: {
	    none: null;
	    s: string;
	    m: string;
	    l: string;
	};
	export type EuiDroppableSpacing = keyof typeof spacingToClassNameMap;
	export interface EuiDroppableProps extends CommonProps, Omit<DroppableProps, 'children'> {
	    children: ReactElement | DroppableProps['children'];
	    className?: string;
	    /**
	     * Makes its items immutable. Dragging creates cloned items that can be dropped elsewhere.
	     */
	    cloneDraggables?: boolean;
	    style?: CSSProperties;
	    /**
	     * Adds padding to the droppable area
	     */
	    spacing?: EuiDroppableSpacing;
	    /**
	     * Adds an EuiPanel style to the droppable area
	     */
	    withPanel?: boolean;
	    /**
	     * Allow the panel to flex-grow?
	     */
	    grow?: boolean;
	}
	export const EuiDroppableContext: React.Context<{
	    cloneItems: boolean;
	}>;
	export const EuiDroppable: FunctionComponent<EuiDroppableProps>;
	export {};

}
declare module '@elastic/eui/src/components/drag_and_drop/draggable' {
	import { CSSProperties, FunctionComponent, ReactElement } from 'react';
	import { DraggableProps } from 'react-beautiful-dnd';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common'; const spacingToClassNameMap: {
	    none: null;
	    s: string;
	    m: string;
	    l: string;
	};
	export type EuiDraggableSpacing = keyof typeof spacingToClassNameMap;
	export interface EuiDraggableProps extends CommonProps, Omit<DraggableProps, 'children'> {
	    children: ReactElement | DraggableProps['children'];
	    className?: string;
	    /**
	     * Whether the `children` will provide and set up its own drag handle
	     */
	    customDragHandle?: boolean;
	    /**
	     * Whether the item is currently in a position to be removed
	     */
	    isRemovable?: boolean;
	    /**
	     * Adds padding to the draggable item
	     */
	    spacing?: EuiDraggableSpacing;
	    style?: CSSProperties;
	}
	export const EuiDraggable: FunctionComponent<EuiDraggableProps>;
	export {};

}
declare module '@elastic/eui/src/components/drag_and_drop/services' {
	
	import { DraggableLocation } from 'react-beautiful-dnd';
	interface DropResult {
	    [droppableId: string]: any[];
	}
	export const reorder: (list: [], startIndex: number, endIndex: number) => {}[];
	export const move: (sourceList: any[], destinationList: any[], dropResultSource: DraggableLocation, dropResultDestination: DraggableLocation) => DropResult;
	export const copy: (sourceList: any[], destinationList: any[], dropResultSource: DraggableLocation, dropResultDestination: DraggableLocation, idModification: {
	    property: import("react").ReactText;
	    modifier: () => import("react").ReactText;
	}) => DropResult;
	export {};

}
declare module '@elastic/eui' {
	export { EuiDragDropContext } from '@elastic/eui/src/components/drag_and_drop/drag_drop_context';
	export { EuiDraggable } from '@elastic/eui/src/components/drag_and_drop/draggable';
	export { EuiDroppable } from '@elastic/eui/src/components/drag_and_drop/droppable';
	export { copy, move, reorder } from '@elastic/eui/src/components/drag_and_drop/services';
	export { DraggableLocation, DraggableProps, DragDropContextProps, DragStart, DroppableProps, DropResult, ResponderProvided, } from 'react-beautiful-dnd';

}
declare module '@elastic/eui/src/components/drag_and_drop/drag_drop_context.test' {
	export {};

}
declare module '@elastic/eui/src/components/drag_and_drop/draggable.test' {
	export {};

}
declare module '@elastic/eui/src/components/drag_and_drop/droppable.test' {
	export {};

}
declare module '@elastic/eui/src/components/expression/expression' {
	import React, { ButtonHTMLAttributes, HTMLAttributes, MouseEventHandler, ReactNode } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common'; const colorToClassNameMap: {
	    subdued: string;
	    primary: string;
	    secondary: string;
	    accent: string;
	    warning: string;
	    danger: string;
	};
	export const COLORS: ("primary" | "secondary" | "accent" | "warning" | "danger" | "subdued")[];
	export type ExpressionColor = keyof typeof colorToClassNameMap;
	export type EuiExpressionProps = CommonProps & {
	    /**
	     * First part of the expression
	     */
	    description: ReactNode;
	    descriptionProps?: HTMLAttributes<HTMLSpanElement>;
	    /**
	     * Second part of the expression
	     */
	    value: ReactNode;
	    valueProps?: HTMLAttributes<HTMLSpanElement>;
	    /**
	     * Color of the `description`
	     */
	    color?: ExpressionColor;
	    /**
	     * Should the `description` auto-uppercase?
	     */
	    uppercase?: boolean;
	    /**
	     * Adds an solid border at the bottom
	     */
	    isActive?: boolean;
	    /**
	     * Turns the component into a button and adds an editable style border at the bottom
	     */
	    onClick?: MouseEventHandler<HTMLButtonElement>;
	}; type Buttonlike = EuiExpressionProps & ButtonHTMLAttributes<HTMLButtonElement> & {
	    onClick: MouseEventHandler<HTMLButtonElement>;
	}; type Spanlike = EuiExpressionProps & HTMLAttributes<HTMLSpanElement>;
	export const EuiExpression: React.FunctionComponent<ExclusiveUnion<Buttonlike, Spanlike>>;
	export {};

}
declare module '@elastic/eui/src/components/expression/expression.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiExpression } from '@elastic/eui/src/components/expression/expression';

}
declare module '@elastic/eui/src/components/facet/facet_button.test' {
	export {};

}
declare module '@elastic/eui/src/components/filter_group/filter_group.test' {
	export {};

}
declare module '@elastic/eui/src/components/flex/flex_grid' {
	import { HTMLAttributes, ReactNode, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type FlexGridGutterSize = keyof typeof gutterSizeToClassNameMap;
	export type FlexGridColumns = 0 | 1 | 2 | 3 | 4;
	export type FlexGridDirection = keyof typeof directionToClassNameMap;
	export interface EuiFlexGridProps {
	    children?: ReactNode;
	    /**
	     * Number of columns `1-4`, pass `0` for normal display
	     */
	    columns?: FlexGridColumns;
	    /**
	     * Flex layouts default to left-right then top-down (`row`).
	     * Change this prop to `column` to create a top-down then left-right display.
	     * Only works with column count of `1-4`.
	     */
	    direction?: FlexGridDirection;
	    /**
	     * Space between flex items
	     */
	    gutterSize?: FlexGridGutterSize;
	    /**
	     * Force each item to be display block on smaller screens
	     */
	    responsive?: boolean;
	} const directionToClassNameMap: {
	    row: null;
	    column: string;
	};
	export const DIRECTIONS: ("row" | "column")[]; const gutterSizeToClassNameMap: {
	    none: string;
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	};
	export const GUTTER_SIZES: FlexGridGutterSize[];
	export const COLUMNS: FlexGridColumns[];
	export const EuiFlexGrid: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement> & EuiFlexGridProps>;
	export {};

}
declare module '@elastic/eui/src/components/flex/flex_grid.test' {
	export {};

}
declare module '@elastic/eui/src/components/flex/flex_group' {
	import React from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type FlexGroupAlignItems = keyof typeof alignItemsToClassNameMap;
	export type FlexGroupComponentType = 'div' | 'span';
	export type FlexGroupDirection = keyof typeof directionToClassNameMap;
	export type FlexGroupGutterSize = keyof typeof gutterSizeToClassNameMap;
	export type FlexGroupJustifyContent = keyof typeof justifyContentToClassNameMap;
	export interface EuiFlexGroupProps {
	    alignItems?: FlexGroupAlignItems;
	    component?: FlexGroupComponentType;
	    direction?: FlexGroupDirection;
	    gutterSize?: FlexGroupGutterSize;
	    justifyContent?: FlexGroupJustifyContent;
	    responsive?: boolean;
	    wrap?: boolean;
	} const gutterSizeToClassNameMap: {
	    none: null;
	    xs: string;
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	};
	export const GUTTER_SIZES: ("s" | "m" | "l" | "xl" | "none" | "xs")[]; const alignItemsToClassNameMap: {
	    stretch: null;
	    flexStart: string;
	    flexEnd: string;
	    center: string;
	    baseline: string;
	};
	export const ALIGN_ITEMS: ("baseline" | "center" | "stretch" | "flexStart" | "flexEnd")[]; const justifyContentToClassNameMap: {
	    flexStart: null;
	    flexEnd: string;
	    center: string;
	    spaceBetween: string;
	    spaceAround: string;
	    spaceEvenly: string;
	};
	export const JUSTIFY_CONTENTS: ("center" | "flexStart" | "flexEnd" | "spaceBetween" | "spaceAround" | "spaceEvenly")[]; const directionToClassNameMap: {
	    row: string;
	    rowReverse: string;
	    column: string;
	    columnReverse: string;
	};
	export const DIRECTIONS: ("row" | "column" | "rowReverse" | "columnReverse")[]; const EuiFlexGroup: React.ForwardRefExoticComponent<CommonProps & React.HTMLAttributes<HTMLSpanElement | HTMLDivElement> & EuiFlexGroupProps & React.RefAttributes<HTMLSpanElement | HTMLDivElement>>;
	export { EuiFlexGroup };

}
declare module '@elastic/eui/src/components/flex/flex_group.test' {
	export {};

}
declare module '@elastic/eui/src/components/flex/flex_item' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type FlexItemGrowSize = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | true | false | null;
	export type FlexItemComponentType = 'div' | 'span' | 'figure';
	export interface EuiFlexItemProps {
	    grow?: FlexItemGrowSize;
	    component?: FlexItemComponentType;
	}
	export const GROW_SIZES: FlexItemGrowSize[];
	export const EuiFlexItem: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement | HTMLSpanElement> & EuiFlexItemProps>;

}
declare module '@elastic/eui/src/components/flex/flex_item.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiFlexGroup } from '@elastic/eui/src/components/flex/flex_group';
	export { EuiFlexGrid } from '@elastic/eui/src/components/flex/flex_grid';
	export { EuiFlexItem } from '@elastic/eui/src/components/flex/flex_item';

}
declare module '@elastic/eui/src/components/flyout/flyout_body.test' {
	export {};

}
declare module '@elastic/eui/src/components/flyout/flyout_footer.test' {
	export {};

}
declare module '@elastic/eui/src/components/flyout/flyout_header.test' {
	export {};

}
declare module '@elastic/eui/src/components/focus_trap/focus_trap.test' {
	export {};

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import {
	  FunctionComponent,
	  ReactNode,
	  HTMLAttributes,
	  ChangeEventHandler,
	  InputHTMLAttributes,
	} from 'react'; module '@elastic/eui' {
	  /**
	   * checkbox type defs
	   *
	   * @see './checkbox.js'
	   */

	  export type EuiCheckboxType = 'inList';

	  export interface EuiCheckboxProps {
	    id: string;
	    checked?: boolean;
	    onChange: ChangeEventHandler<HTMLInputElement>; // overriding to make it required
	    label?: ReactNode;
	    type?: EuiCheckboxType;
	    disabled?: boolean;
	    indeterminate?: boolean;
	  }

	  export const EuiCheckbox: FunctionComponent<
	    CommonProps & InputHTMLAttributes<HTMLInputElement> & EuiCheckboxProps
	  >;

	  /**
	   * checkbox group type defs
	   *
	   * @see './checkbox_group.js'
	   */

	  export interface EuiCheckboxGroupOption {
	    id: string;
	    label?: ReactNode;
	  }

	  export interface EuiCheckboxGroupIdToSelectedMap {
	    [id: string]: boolean;
	  }

	  export interface EuiCheckboxGroupProps {
	    options: EuiCheckboxGroupOption[];
	    idToSelectedMap: EuiCheckboxGroupIdToSelectedMap;
	    onChange: ChangeEventHandler<HTMLInputElement>;
	  }

	  export const EuiCheckboxGroup: FunctionComponent<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiCheckboxGroupProps
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui';

	import { ReactNode, FunctionComponent, InputHTMLAttributes, Ref } from 'react'; module '@elastic/eui' {
	  /**
	   * text field type defs
	   *
	   * @see './field_number.js'
	   */
	  export interface EuiFieldNumberProps {
	    icon?: IconType;
	    isInvalid?: boolean;
	    fullWidth?: boolean;
	    isLoading?: boolean;
	    compressed?: boolean;
	    prepend?: ReactNode | ReactNode[];
	    append?: ReactNode | ReactNode[];
	    inputRef?: Ref<HTMLInputElement>;
	  }

	  export const EuiFieldNumber: FunctionComponent<
	    CommonProps & InputHTMLAttributes<HTMLInputElement> & EuiFieldNumberProps
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { FunctionComponent, InputHTMLAttributes, Ref } from 'react'; module '@elastic/eui' {
	  /**
	   * password field type defs
	   *
	   * @see './field_password.js'
	   */
	  export interface EuiFieldPasswordProps {
	    isInvalid?: boolean;
	    inputRef?: Ref<HTMLInputElement>;
	    fullWidth?: boolean;
	    isLoading?: boolean;
	    compressed?: boolean;
	  }

	  export const EuiFieldPassword: FunctionComponent<
	    CommonProps & InputHTMLAttributes<HTMLInputElement> & EuiFieldPasswordProps
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { FunctionComponent, InputHTMLAttributes } from 'react'; module '@elastic/eui' {
	  /**
	   * search field type defs
	   *
	   * @see './field_search.js'
	   */

	  export interface EuiFieldSearchProps {
	    name?: string;
	    id?: string;
	    placeholder?: string;
	    value?: string;
	    isInvalid?: boolean;
	    fullWidth?: boolean;
	    isLoading?: boolean;
	    incremental?: boolean;
	    onSearch?: (value: string) => void;
	  }

	  export const EuiFieldSearch: FunctionComponent<
	    CommonProps & InputHTMLAttributes<HTMLInputElement> & EuiFieldSearchProps
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { FunctionComponent, InputHTMLAttributes, Ref } from 'react'; module '@elastic/eui' {
	  /**
	   * text field type defs
	   *
	   * @see './field_text.js'
	   */
	  export interface EuiFieldTextProps {
	    icon?: string;
	    isInvalid?: boolean;
	    inputRef?: Ref<HTMLInputElement>;
	    fullWidth?: boolean;
	    isLoading?: boolean;
	    prepend?: React.ReactNode;
	    append?: React.ReactNode;
	    compressed?: boolean;
	  }

	  export const EuiFieldText: FunctionComponent<
	    CommonProps & InputHTMLAttributes<HTMLInputElement> & EuiFieldTextProps
	  >;
	}

}
declare module '@elastic/eui/src/components/form/form_control_layout/form_control_layout_clear_button' {
	import { FunctionComponent, ButtonHTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiFormControlLayoutClearButtonProps = CommonProps & ButtonHTMLAttributes<HTMLButtonElement>;
	export const EuiFormControlLayoutClearButton: FunctionComponent<EuiFormControlLayoutClearButtonProps>;

}
declare module '@elastic/eui/src/components/form/form_control_layout/form_control_layout_custom_icon' {
	import { ButtonHTMLAttributes, FunctionComponent, HTMLAttributes } from 'react';
	import { IconType } from '@elastic/eui';
	import { CommonProps, ExclusiveUnion, Omit } from '@elastic/eui/src/components/common';
	export type EuiFormControlLayoutCustomIconProps = CommonProps & ExclusiveUnion<Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'type'>, HTMLAttributes<HTMLSpanElement>> & {
	    type: IconType;
	    iconRef?: string | ((el: HTMLButtonElement | HTMLSpanElement | null) => void);
	};
	export const EuiFormControlLayoutCustomIcon: FunctionComponent<EuiFormControlLayoutCustomIconProps>;

}
declare module '@elastic/eui/src/components/form/form_control_layout/form_control_layout_icons' {
	import { Component } from 'react';
	import { EuiFormControlLayoutClearButtonProps } from '@elastic/eui/src/components/form/form_control_layout/form_control_layout_clear_button';
	import { EuiFormControlLayoutCustomIconProps } from '@elastic/eui/src/components/form/form_control_layout/form_control_layout_custom_icon';
	import { IconType } from '@elastic/eui';
	import { DistributiveOmit } from '@elastic/eui/src/components/common';
	export const ICON_SIDES: ['left', 'right']; type IconShape = DistributiveOmit<EuiFormControlLayoutCustomIconProps, 'type' | 'iconRef'> & {
	    type: IconType;
	    side?: typeof ICON_SIDES[number];
	    ref?: EuiFormControlLayoutCustomIconProps['iconRef'];
	};
	export interface EuiFormControlLayoutIconsProps {
	    icon?: IconType | IconShape;
	    clear?: EuiFormControlLayoutClearButtonProps;
	    isLoading?: boolean;
	}
	export class EuiFormControlLayoutIcons extends Component<EuiFormControlLayoutIconsProps> {
	    render(): JSX.Element;
	    renderCustomIcon(): JSX.Element | null;
	    renderLoadingSpinner(): JSX.Element | null;
	    renderClearButton(): JSX.Element | null;
	}
	export {};

}
declare module '@elastic/eui/src/components/form/form_control_layout/form_control_layout' {
	import React, { Component, HTMLAttributes, ReactElement, ReactNode } from 'react';
	import { EuiFormControlLayoutIconsProps } from '@elastic/eui/src/components/form/form_control_layout/form_control_layout_icons';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export { ICON_SIDES } from '@elastic/eui/src/components/form/form_control_layout/form_control_layout_icons'; type ReactElements = ReactElement | ReactElement[];
	interface AppendWithChildren {
	    append: ReactElements;
	    children?: ReactElement;
	}
	interface PrependWithChildren {
	    prepend: ReactElements;
	    children?: ReactElement;
	} type SiblingsWithChildren = AppendWithChildren | PrependWithChildren; type ChildrenOptions = SiblingsWithChildren | {
	    append?: undefined | null;
	    prepend?: undefined | null;
	    children?: ReactNode;
	}; type EuiFormControlLayoutProps = CommonProps & HTMLAttributes<HTMLDivElement> & ChildrenOptions & {
	    /**
	     * Creates an input group with element(s) coming before children
	     */
	    prepend?: ReactElements;
	    /**
	     * Creates an input group with element(s) coming after children
	     */
	    append?: ReactElements;
	    icon?: EuiFormControlLayoutIconsProps['icon'];
	    clear?: EuiFormControlLayoutIconsProps['clear'];
	    fullWidth?: boolean;
	    isLoading?: boolean;
	    isDisabled?: boolean;
	    className?: string;
	    compressed?: boolean;
	    readOnly?: boolean;
	};
	export class EuiFormControlLayout extends Component<EuiFormControlLayoutProps> {
	    render(): JSX.Element;
	    renderPrepends(): React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>[] | undefined;
	    renderAppends(): React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>[] | undefined;
	    createSideNode(node: ReactElement, side: 'append' | 'prepend', key: React.Key): React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
	}

}
declare module '@elastic/eui/src/components/form/form_control_layout/form_control_layout.test' {
	export {};

}
declare module '@elastic/eui/src/components/form/form_control_layout/form_control_layout_clear_button.test' {
	export {};

}
declare module '@elastic/eui/src/components/form/form_control_layout/form_control_layout_custom_icon.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiFormControlLayout, ICON_SIDES } from '@elastic/eui/src/components/form/form_control_layout/form_control_layout';
	export { EuiFormControlLayoutClearButton, } from '@elastic/eui/src/components/form/form_control_layout/form_control_layout_clear_button';
	export { EuiFormControlLayoutCustomIcon, } from '@elastic/eui/src/components/form/form_control_layout/form_control_layout_custom_icon';

}
declare module '@elastic/eui/src/components/form/form_error_text/form_error_text' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export const EuiFormErrorText: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement>>;

}
declare module '@elastic/eui/src/components/form/form_error_text/form_error_text.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiFormErrorText } from '@elastic/eui/src/components/form/form_error_text/form_error_text';

}
declare module '@elastic/eui/src/components/form/form_help_text/form_help_text' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export const EuiFormHelpText: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement>>;

}
declare module '@elastic/eui/src/components/form/form_help_text/form_help_text.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiFormHelpText } from '@elastic/eui/src/components/form/form_help_text/form_help_text';

}
declare module '@elastic/eui/src/components/form/form_label/form_label' {
	import { FunctionComponent, LabelHTMLAttributes, HTMLAttributes } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';
	interface EuiFormLabelCommonProps {
	    isFocused?: boolean;
	    isInvalid?: boolean;
	    /**
	     * Default type is a `label` but can be changed to a `legend`
	     * if using inside a `fieldset`.
	     */
	    type?: 'label' | 'legend';
	} type LabelProps = {
	    type?: 'label';
	} & EuiFormLabelCommonProps & LabelHTMLAttributes<HTMLLabelElement>; type LegendProps = {
	    type: 'legend';
	} & EuiFormLabelCommonProps & HTMLAttributes<HTMLLegendElement>;
	export type EuiFormLabelProps = CommonProps & ExclusiveUnion<LabelProps, LegendProps>;
	export const EuiFormLabel: FunctionComponent<EuiFormLabelProps>;
	export {};

}
declare module '@elastic/eui/src/components/form/form_label/form_label.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiFormLabel } from '@elastic/eui/src/components/form/form_label/form_label';

}
declare module '@elastic/eui' {
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';

	import {
	  FunctionComponent,
	  ReactNode,
	  ReactElement,
	  HTMLAttributes,
	} from 'react'; module '@elastic/eui' {
	  /**
	   * @see './form_row.js'
	   */
	  export type EuiFormRowCommonProps = CommonProps & {
	    error?: ReactNode | ReactNode[];
	    fullWidth?: boolean;
	    hasEmptyLabelSpace?: boolean;
	    helpText?: ReactNode;
	    isInvalid?: boolean;
	    label?: ReactNode;
	    labelAppend?: ReactNode;
	    describedByIds?: string[];
	    compressed?: boolean;
	    displayOnly?: boolean;
	  };

	  type LabelProps = {
	    labelType?: 'label';
	  } & EuiFormRowCommonProps &
	    HTMLAttributes<HTMLDivElement>;

	  type LegendProps = {
	    labelType?: 'legend';
	  } & EuiFormRowCommonProps &
	    HTMLAttributes<HTMLFieldSetElement>;

	  export type EuiFormRowProps = ExclusiveUnion<LabelProps, LegendProps> & {
	    children: ReactElement;
	  };

	  export const EuiFormRow: FunctionComponent<EuiFormRowProps>;
	}

}
declare module '@elastic/eui/src/components/form/form_row/make_id.test' {
	export {};

}
declare module '@elastic/eui' {
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';

	import {
	  FunctionComponent,
	  ChangeEventHandler,
	  HTMLAttributes,
	  ReactNode,
	} from 'react'; module '@elastic/eui' {
	  /**
	   * @see './radio_group.js'
	   */
	  export interface EuiRadioGroupOption {
	    id: string;
	    label?: ReactNode;
	  }

	  export type EuiRadioGroupChangeCallback = (id: string, value: string) => void;

	  export type EuiRadioGroupProps = CommonProps &
	    Omit<HTMLAttributes<HTMLDivElement>, 'onChange'> & {
	      disabled?: boolean;
	      name?: string;
	      options?: EuiRadioGroupOption[];
	      idSelected?: string;
	      onChange: EuiRadioGroupChangeCallback;
	    };

	  export type x = EuiRadioGroupProps['onChange'];

	  export const EuiRadioGroup: FunctionComponent<EuiRadioGroupProps>;

	  export interface EuiRadioProps {
	    autoFocus?: boolean;
	    compressed?: boolean;
	    label?: ReactNode;
	    name?: string;
	    value?: string;
	    checked?: boolean;
	    disabled?: boolean;
	    onChange: ChangeEventHandler<HTMLInputElement>; // overriding to make it required
	  }

	  export const EuiRadio: FunctionComponent<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiRadioProps
	  >;
	}

}
declare module '@elastic/eui/src/components/form/range/range_highlight' {
	import { FunctionComponent } from 'react';
	export interface EuiRangeHighlightProps {
	    hasFocus?: boolean;
	    showTicks?: boolean;
	    lowerValue: number;
	    upperValue: number;
	    max: number;
	    min: number;
	}
	export const EuiRangeHighlight: FunctionComponent<EuiRangeHighlightProps>;

}
declare module '@elastic/eui/src/components/form/range/range_label' {
	import { FunctionComponent } from 'react';
	export interface EuiRangeLabelProps {
	    children: string | number;
	    disabled?: boolean;
	    side?: 'min' | 'max';
	}
	export const EuiRangeLabel: FunctionComponent<EuiRangeLabelProps>;

}
declare module '@elastic/eui/src/components/form/range/range_levels' {
	import { FunctionComponent } from 'react';
	export type EuiRangeLevelColor = 'primary' | 'success' | 'warning' | 'danger';
	export const LEVEL_COLORS: EuiRangeLevelColor[];
	export interface EuiRangeLevel {
	    min: number;
	    max: number;
	    color: EuiRangeLevelColor;
	}
	export interface EuiRangeLevelsProps {
	    levels?: EuiRangeLevel[];
	    max: number;
	    min: number;
	    showTicks?: boolean;
	}
	export const EuiRangeLevels: FunctionComponent<EuiRangeLevelsProps>;

}
declare module '@elastic/eui/src/components/form/range/range_slider' {
	import { ChangeEventHandler, FunctionComponent, InputHTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiRangeSliderProps = InputHTMLAttributes<HTMLInputElement> & CommonProps & {
	    id?: string;
	    name?: string;
	    min: number;
	    max: number;
	    step?: number;
	    hasFocus?: boolean;
	    showRange?: boolean;
	    showTicks?: boolean;
	    disabled?: boolean;
	    tabIndex?: number;
	    onChange?: ChangeEventHandler<HTMLInputElement>;
	};
	export const EuiRangeSlider: FunctionComponent<EuiRangeSliderProps>;

}
declare module '@elastic/eui/src/components/form/range/range_thumb' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiRangeThumbProps = HTMLAttributes<HTMLDivElement> & CommonProps & {
	    min: number;
	    max: number;
	    value?: number | string;
	    disabled?: boolean;
	    showInput?: boolean;
	    showTicks?: boolean;
	};
	export const EuiRangeThumb: FunctionComponent<EuiRangeThumbProps>;

}
declare module '@elastic/eui/src/components/form/range/range_ticks' {
	import { ButtonHTMLAttributes, MouseEventHandler, FunctionComponent, ReactNode } from 'react';
	import { Omit } from '@elastic/eui/src/components/common';
	export interface EuiRangeTick {
	    value: number;
	    label: ReactNode;
	}
	export type EuiRangeTicksProps = Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'value'> & {
	    ticks?: EuiRangeTick[];
	    tickSequence: number[];
	    value?: number | string | Array<string | number>;
	    min: number;
	    max: number;
	    interval?: number;
	    disabled?: boolean;
	    onChange?: MouseEventHandler<HTMLButtonElement>;
	};
	export const EuiRangeTicks: FunctionComponent<EuiRangeTicksProps>;

}
declare module '@elastic/eui/src/components/form/range/range_tooltip' {
	import { FunctionComponent, ReactNode } from 'react';
	export interface EuiRangeTooltipProps {
	    value?: number | string;
	    valueAppend?: ReactNode;
	    valuePrepend?: ReactNode;
	    max: number;
	    min: number;
	    name?: string;
	    showTicks?: boolean;
	}
	export const EuiRangeTooltip: FunctionComponent<EuiRangeTooltipProps>;

}
declare module '@elastic/eui/src/components/form/range/range_track' {
	import { Component, MouseEventHandler } from 'react';
	import { EuiRangeLevel, LEVEL_COLORS } from '@elastic/eui/src/components/form/range/range_levels';
	import { EuiRangeTick } from '@elastic/eui/src/components/form/range/range_ticks';
	export { LEVEL_COLORS };
	export interface EuiRangeTrackProps {
	    min: number;
	    max: number;
	    step?: number;
	    value?: number | string | Array<string | number>;
	    disabled?: boolean;
	    showTicks?: boolean;
	    tickInterval?: number;
	    ticks?: EuiRangeTick[];
	    onChange?: MouseEventHandler<HTMLButtonElement>;
	    levels?: EuiRangeLevel[];
	}
	export class EuiRangeTrack extends Component<EuiRangeTrackProps> {
	    validateValueIsInStep: (value: number) => number;
	    calculateSequence: (min: number, max: number, interval?: number | undefined) => number[];
	    calculateTicks: (min: number, max: number, step?: number | undefined, tickInterval?: number | undefined, customTicks?: EuiRangeTick[] | undefined) => number[];
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src/components/form/range/range_wrapper' {
	import { FunctionComponent } from 'react';
	export interface EuiRangeWrapperProps {
	    className?: string;
	    fullWidth?: boolean;
	}
	export const EuiRangeWrapper: FunctionComponent<EuiRangeWrapperProps>;

}
declare module '@elastic/eui' {
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';

	import { ReactNode, FunctionComponent, InputHTMLAttributes } from 'react';

	import { EuiRangeHighlightProps } from '@elastic/eui/src/components/form/range/range_highlight';
	import { EuiRangeLabelProps } from '@elastic/eui/src/components/form/range/range_label';
	import { EuiRangeLevelsProps, EuiRangeLevel } from '@elastic/eui/src/components/form/range/range_levels';
	import { EuiRangeSliderProps } from '@elastic/eui/src/components/form/range/range_slider';
	import { EuiRangeThumbProps } from '@elastic/eui/src/components/form/range/range_thumb';
	import { EuiRangeTicksProps } from '@elastic/eui/src/components/form/range/range_ticks';
	import { EuiRangeTooltipProps } from '@elastic/eui/src/components/form/range/range_tooltip';
	import { EuiRangeTrackProps } from '@elastic/eui/src/components/form/range/range_track';
	import { EuiRangeWrapperProps } from '@elastic/eui/src/components/form/range/range_wrapper'; module '@elastic/eui' {
	  export type EuiRangeLevelColor = 'primary' | 'success' | 'warning' | 'danger';

	  export const EuiRangeHighlight: FunctionComponent<EuiRangeHighlightProps>;
	  export const EuiRangeLabel: FunctionComponent<EuiRangeLabelProps>;
	  export const EuiRangeLevels: FunctionComponent<EuiRangeLevelsProps>;
	  export const EuiRangeSlider: FunctionComponent<EuiRangeSliderProps>;
	  export const EuiRangeThumb: FunctionComponent<EuiRangeThumbProps>;
	  export const EuiRangeTicks: FunctionComponent<EuiRangeTicksProps>;
	  export const EuiRangeTooltip: FunctionComponent<EuiRangeTooltipProps>;
	  export const EuiRangeTrack: FunctionComponent<EuiRangeTrackProps>;
	  export const EuiRangeWrapper: FunctionComponent<EuiRangeWrapperProps>;

	  /**
	   * single range type def
	   *
	   * @see './range.js'
	   */

	  export interface EuiRangeProps {
	    compressed?: boolean;
	    fullWidth?: boolean;
	    id?: string;
	    levels?: EuiRangeLevel[];
	    // `min` and `max` are optional in HTML but required for our component,
	    // so we override them.
	    max: number;
	    min: number;
	    // The spec allows string values for `step` but the component requires
	    // a number.
	    step?: number;
	    showInput?: boolean;
	    showLabels?: boolean;
	    showRange?: boolean;
	    showTicks?: boolean;
	    showValue?: boolean;
	    tickInterval?: number;
	    valueAppend?: ReactNode;
	    valuePrepend?: ReactNode;

	    onChange?: (
	      event:
	        | React.ChangeEvent<HTMLInputElement>
	        | React.MouseEvent<HTMLButtonElement>,
	      isValid: boolean
	    ) => void;
	  }

	  export const EuiRange: FunctionComponent<
	    CommonProps & InputHTMLAttributes<HTMLInputElement> & EuiRangeProps
	  >;

	  /**
	   * dual range type defs
	   *
	   * @see './dual_range.js'
	   */

	  export interface EuiDualRangeProps {
	    // Override acceptable value type
	    value: [number | string, number | string];
	  }

	  export const EuiDualRange: FunctionComponent<
	    CommonProps &
	      Omit<InputHTMLAttributes<HTMLInputElement>, 'value'> &
	      EuiRangeProps &
	      EuiDualRangeProps
	  >;
	}

}
declare module '@elastic/eui/src/components/form/range/range_levels.test' {
	export {};

}
declare module '@elastic/eui/src/components/form/range/range_track.test' {
	export {};

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import {
	  FunctionComponent,
	  ReactNode,
	  Ref,
	  OptionHTMLAttributes,
	  SelectHTMLAttributes,
	} from 'react'; module '@elastic/eui' {
	  /**
	   * @see './select.js'
	   */

	  export type EuiSelectProps = CommonProps &
	    SelectHTMLAttributes<HTMLSelectElement> & {
	      name?: string;
	      id?: string;
	      options: Array<
	        { text: ReactNode } & OptionHTMLAttributes<HTMLOptionElement>
	      >;
	      isInvalid?: boolean;
	      fullWidth?: boolean;
	      isLoading?: boolean;
	      hasNoInitialSelection?: boolean;
	      inputRef?: Ref<HTMLSelectElement>;
	      compressed?: boolean;
	      prepend?: ReactNode | ReactNode[];
	      append?: ReactNode | ReactNode[];
	    };

	  export const EuiSelect: FunctionComponent<EuiSelectProps>;
	}

}
declare module '@elastic/eui' {
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';

	import { FunctionComponent, ReactNode, ButtonHTMLAttributes } from 'react'; module '@elastic/eui' {
	  /**
	   * @see './super_select.js'
	   */

	  export type EuiSuperSelectProps<T extends string> = CommonProps &
	    Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'onChange'> & {
	      /**
	       * Pass an array of options that must at least include:
	       * `value`: storing unique value of item,
	       * `inputDisplay`: what shows inside the form input when selected
	       * `dropdownDisplay` (optional): what shows for the item in the dropdown
	       */
	      options: Array<{
	        value: T;
	        inputDisplay?: ReactNode;
	        dropdownDisplay?: ReactNode;
	        disabled?: boolean;
	        'data-test-subj'?: string;
	      }>;

	      valueOfSelected?: T;

	      /**
	       * Classes for the context menu item
	       */
	      itemClassName?: string;

	      /**
	       * You must pass an `onChange` function to handle the update of the value
	       */
	      onChange?: (value: T) => void;

	      /**
	       * Change to `true` if you want horizontal lines between options.
	       * This is best used when options are multi-line.
	       */
	      hasDividers?: boolean;

	      /**
	       * Change `EuiContextMenuItem` layout position of icon
	       */
	      itemLayoutAlign?: string;

	      /**
	       * Make it wide. Default: false
	       */
	      fullWidth?: boolean;

	      /**
	       * Provides invalid styling. Default: false
	       */
	      isInvalid?: boolean;

	      /**
	       * Provides a loading indicator. Default: false
	       */
	      isLoading?: boolean;

	      /**
	       * Make it short. Default: false
	       */
	      compressed?: boolean;

	      /**
	       * Applied to the outermost wrapper (popover)
	       */
	      popoverClassName?: string;

	      /**
	       * Controls whether the options are shown. Default: false
	       */
	      isOpen?: boolean;
	    };

	  export const EuiSuperSelect: <T extends string>(
	    props: EuiSuperSelectProps<T>
	  ) => ReturnType<FunctionComponent<EuiSuperSelectProps<T>>>;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { FunctionComponent, InputHTMLAttributes, ReactNode } from 'react'; module '@elastic/eui' {
	  /**
	   * @see './switch.js'
	   */
	  export type EuiSwitchProps = CommonProps &
	    InputHTMLAttributes<HTMLInputElement> & {
	      label?: ReactNode;
	    };

	  export const EuiSwitch: FunctionComponent<EuiSwitchProps>;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { FunctionComponent, TextareaHTMLAttributes } from 'react'; module '@elastic/eui' {
	  export type EuiTextAreaResize = 'vertical' | 'horizontal' | 'both' | 'none';
	  /**
	   * @see './text_area.js'
	   */
	  export interface EuiTextAreaProps {
	    compressed?: boolean;
	    resize?: EuiTextAreaResize;
	    rows?: number;
	    isInvalid?: boolean;
	    fullWidth?: boolean;
	    inputRef?: (input: any) => void;
	  }

	  export const EuiTextArea: FunctionComponent<
	    CommonProps & TextareaHTMLAttributes<HTMLTextAreaElement> & EuiTextAreaProps
	  >;
	}

}
declare module '@elastic/eui/src/components/form/validatable_control/validatable_control' {
	import { Component, ReactElement } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export interface HTMLConstraintValidityElement extends Element {
	    setCustomValidity: (error: string) => void;
	}
	export interface ReactElementWithRef extends ReactElement {
	    ref?: (element: HTMLConstraintValidityElement) => void;
	}
	export interface EuiValidatableControlProps {
	    isInvalid?: boolean;
	    children: ReactElementWithRef;
	}
	export class EuiValidatableControl extends Component<CommonProps & EuiValidatableControlProps> {
	    private control?;
	    updateValidity(): void;
	    componentDidMount(): void;
	    componentDidUpdate(): void;
	    setRef: (element: HTMLConstraintValidityElement) => void;
	    render(): ReactElement<any, string | ((props: any) => ReactElement<any, string | any | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>;
	}

}
declare module '@elastic/eui' {
	export { EuiValidatableControl } from '@elastic/eui/src/components/form/validatable_control/validatable_control';

}
declare module '@elastic/eui/src/components/form/validatable_control/validatable_control.test' {
	export {};

}
declare module '@elastic/eui/src/components/header/header_logo.test' {
	export {};

}
declare module '@elastic/eui/src/components/horizontal_rule/horizontal_rule' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiHorizontalRuleSize = keyof typeof sizeToClassNameMap;
	export type EuiHorizontalRuleMargin = keyof typeof marginToClassNameMap;
	export interface EuiHorizontalRuleProps {
	    /**
	     * Defines the width of the HR.
	     */
	    size?: EuiHorizontalRuleSize;
	    margin?: EuiHorizontalRuleMargin;
	} const sizeToClassNameMap: {
	    full: string;
	    half: string;
	    quarter: string;
	};
	export const SIZES: string[]; const marginToClassNameMap: {
	    none: null;
	    xs: string;
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	    xxl: string;
	};
	export const MARGINS: string[];
	export const EuiHorizontalRule: FunctionComponent<CommonProps & HTMLAttributes<HTMLHRElement> & EuiHorizontalRuleProps>;
	export {};

}
declare module '@elastic/eui/src/components/horizontal_rule/horizontal_rule.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiHorizontalRule } from '@elastic/eui/src/components/horizontal_rule/horizontal_rule';

}
declare module '@elastic/eui/src/components/i18n/i18n.test' {
	export {};

}
declare module '@elastic/eui/src/components/i18n/i18n_util.test' {
	export {};

}
declare module '@elastic/eui/src/components/icon/icon.test' {
	export {};

}
declare module '@elastic/eui/src/components/inner_text/inner_text.test' {
	export {};

}
declare module '@elastic/eui/src/components/list_group/list_group_item' {
	import { HTMLAttributes, AnchorHTMLAttributes, ButtonHTMLAttributes, ReactNode, ReactElement, MouseEventHandler, FunctionComponent } from 'react';
	import { EuiButtonIconPropsForButton } from '@elastic/eui';
	import { IconType } from '@elastic/eui';
	import { ExclusiveUnion, CommonProps } from '@elastic/eui/src/components/common'; type ItemSize = 'xs' | 's' | 'm' | 'l';
	export const SIZES: ItemSize[];
	export type EuiListGroupItemProps = CommonProps & ExclusiveUnion<ExclusiveUnion<ButtonHTMLAttributes<HTMLButtonElement>, AnchorHTMLAttributes<HTMLAnchorElement>>, HTMLAttributes<HTMLSpanElement>> & {
	    /**
	     * Size of the label text
	     */
	    size?: ItemSize;
	    /**
	     * Content to be displayed in the list item
	     */
	    label: ReactNode;
	    /**
	     * Apply styles indicating an item is active
	     */
	    isActive?: boolean;
	    /**
	     * Apply styles indicating an item is disabled
	     */
	    isDisabled?: boolean;
	    /**
	     * Make the list item label a link.
	     * While permitted, `href` and `onClick` should not be used together in most cases and may create problems.
	     */
	    href?: string;
	    /**
	     * Adds `EuiIcon` of `EuiIcon.type`
	     */
	    iconType?: IconType;
	    /**
	     * Custom node to pass as the icon. Cannot be used in conjunction
	     * with `iconType`.
	     */
	    icon?: ReactElement;
	    /**
	     * Display tooltip on list item
	     */
	    showToolTip?: boolean;
	    /**
	     * Adds an `EuiButtonIcon` to the right side of the item; `iconType` is required;
	     * pass `alwaysShow` if you don't want the default behavior of only showing on hover
	     */
	    extraAction?: EuiButtonIconPropsForButton & {
	        alwaysShow?: boolean;
	    };
	    /**
	     * Make the list item label a button.
	     * While permitted, `href` and `onClick` should not be used together in most cases and may create problems.
	     */
	    onClick?: MouseEventHandler<HTMLButtonElement>;
	    /**
	     * Allow link text to wrap
	     */
	    wrapText?: boolean;
	};
	export const EuiListGroupItem: FunctionComponent<EuiListGroupItemProps>;
	export {};

}
declare module '@elastic/eui/src/components/list_group/list_group' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { EuiListGroupItemProps } from '@elastic/eui/src/components/list_group/list_group_item';
	import { CommonProps } from '@elastic/eui/src/components/common'; type EuiListGroupProps = CommonProps & HTMLAttributes<HTMLUListElement> & {
	    /**
	     * Add a border to the list container
	     */
	    bordered?: boolean;
	    /**
	     * Remove container padding, stretching list items to the edges
	     */
	    flush?: boolean;
	    /**
	     * Items to display in this group
	     */
	    listItems?: EuiListGroupItemProps[];
	    /**
	     * Sets the max-width of the page,
	     * set to `true` to use the default size,
	     * set to `false` to not restrict the width,
	     * set to a number for a custom width in px,
	     * set to a string for a custom width in custom measurement.
	     */
	    maxWidth?: boolean | number | string;
	    /**
	     * Display tooltips on all list items
	     */
	    showToolTips?: boolean;
	    /**
	     * Allow link text to wrap
	     */
	    wrapText?: boolean;
	};
	export const EuiListGroup: FunctionComponent<EuiListGroupProps>;
	export {};

}
declare module '@elastic/eui' {
	export { EuiListGroup } from '@elastic/eui/src/components/list_group/list_group';
	export { EuiListGroupItem } from '@elastic/eui/src/components/list_group/list_group_item';

}
declare module '@elastic/eui/src/components/list_group/list_group.test' {
	export {};

}
declare module '@elastic/eui/src/components/list_group/list_group_item.test' {
	export {};

}
declare module '@elastic/eui/src/components/loading/loading_chart.test' {
	export {};

}
declare module '@elastic/eui/src/components/loading/loading_content.test' {
	export {};

}
declare module '@elastic/eui/src/components/loading/loading_kibana.test' {
	export {};

}
declare module '@elastic/eui/src/components/loading/loading_spinner.test' {
	export {};

}
declare module '@elastic/eui/src/components/modal/modal_body.test' {
	export {};

}
declare module '@elastic/eui/src/components/modal/modal_footer.test' {
	export {};

}
declare module '@elastic/eui/src/components/modal/modal_header.test' {
	export {};

}
declare module '@elastic/eui/src/components/modal/modal_header_title.test' {
	export {};

}
declare module '@elastic/eui/src/components/observer/mutation_observer/mutation_observer.test' {
	export function waitforMutationObserver(period?: number): Promise<void>;

}
declare module '@elastic/eui/src/components/observer/resize_observer/resize_observer.test' {
	export function waitforResizeObserver(period?: number): Promise<void>;

}
declare module '@elastic/eui/src/components/outside_click_detector/outside_click_detector.test' {
	export {};

}
declare module '@elastic/eui/src/components/overlay_mask/overlay_mask' {
	/**
	 * NOTE: We can't test this component because Enzyme doesn't support rendering
	 * into portals.
	 */
	import { Component, HTMLAttributes, ReactNode } from 'react';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	export interface EuiOverlayMaskProps {
	    onClick?: () => void;
	    children?: ReactNode;
	}
	export type Props = CommonProps & Omit<Partial<Record<keyof HTMLAttributes<HTMLDivElement>, string>>, keyof EuiOverlayMaskProps> & EuiOverlayMaskProps;
	export class EuiOverlayMask extends Component<Props> {
	    private overlayMaskNode?;
	    constructor(props: Props);
	    componentDidMount(): void;
	    componentWillUnmount(): void;
	    render(): import("react").ReactPortal;
	}

}
declare module '@elastic/eui' {
	export { EuiOverlayMask } from '@elastic/eui/src/components/overlay_mask/overlay_mask';

}
declare module '@elastic/eui/src/components/pagination/pagination_button' {
	import { FunctionComponent } from 'react';
	import { ExclusiveUnion, PropsForAnchor, PropsForButton } from '@elastic/eui/src/components/common';
	import { EuiButtonEmptyProps } from '@elastic/eui';
	export interface EuiPaginationButtonProps extends EuiButtonEmptyProps {
	    isActive?: boolean;
	    /**
	     * For ellipsis or other non-clickable buttons.
	     */
	    isPlaceholder?: boolean;
	    hideOnMobile?: boolean;
	} type EuiPaginationButtonPropsForAnchor = PropsForAnchor<EuiPaginationButtonProps>; type EuiPaginationButtonPropsForButton = PropsForButton<EuiPaginationButtonProps>; type Props = ExclusiveUnion<EuiPaginationButtonPropsForAnchor, EuiPaginationButtonPropsForButton>;
	export const EuiPaginationButton: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/pagination/pagination' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type PageClickHandler = (pageIndex: number) => void;
	export interface EuiPaginationProps {
	    /**
	     * The total number of pages.
	     */
	    pageCount?: number;
	    /**
	     * The current page using a zero based index.
	     * So if you set the activePage to 1, it will activate the second page.
	     */
	    activePage?: number;
	    onPageClick?: PageClickHandler;
	    /**
	     * If true, will only show next/prev arrows instead of page numbers.
	     */
	    compressed?: boolean;
	} type Props = CommonProps & HTMLAttributes<HTMLDivElement> & EuiPaginationProps;
	export const EuiPagination: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui' {
	export { EuiPagination } from '@elastic/eui/src/components/pagination/pagination';
	export { EuiPaginationButton } from '@elastic/eui/src/components/pagination/pagination_button';

}
declare module '@elastic/eui/src/components/pagination/pagination.test' {
	export {};

}
declare module '@elastic/eui/src/components/pagination/pagination_button.test' {
	export {};

}
declare module '@elastic/eui/src/components/panel/panel.test' {
	export {};

}
declare module '@elastic/eui/src/components/popover/popover.test' {
	export {};

}
declare module '@elastic/eui/src/components/popover/popover_footer.test' {
	export {};

}
declare module '@elastic/eui/src/components/popover/popover_title.test' {
	export {};

}
declare module '@elastic/eui/src/components/portal/portal.test' {
	export {};

}
declare module '@elastic/eui/src/components/progress/progress' {
	import { FunctionComponent, HTMLAttributes, ProgressHTMLAttributes } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common'; const sizeToClassNameMap: {
	    xs: string;
	    s: string;
	    m: string;
	    l: string;
	};
	export const SIZES: string[];
	export type EuiProgressSize = keyof typeof sizeToClassNameMap; const colorToClassNameMap: {
	    primary: string;
	    secondary: string;
	    danger: string;
	    subdued: string;
	    accent: string;
	};
	export const COLORS: string[];
	export type EuiProgressColor = keyof typeof colorToClassNameMap; const positionsToClassNameMap: {
	    fixed: string;
	    absolute: string;
	    static: string;
	};
	export const POSITIONS: string[];
	export type EuiProgressPosition = keyof typeof positionsToClassNameMap;
	export type EuiProgressProps = CommonProps & {
	    size?: EuiProgressSize;
	    color?: EuiProgressColor;
	    position?: EuiProgressPosition;
	}; type Indeterminate = EuiProgressProps & HTMLAttributes<HTMLDivElement>; type Determinate = EuiProgressProps & ProgressHTMLAttributes<HTMLProgressElement> & {
	    max: number;
	};
	export const EuiProgress: FunctionComponent<ExclusiveUnion<Determinate, Indeterminate>>;
	export {};

}
declare module '@elastic/eui' {
	export { EuiProgress } from '@elastic/eui/src/components/progress/progress';

}
declare module '@elastic/eui/src/components/progress/progress.test' {
	export {};

}
declare module '@elastic/eui/src/components/selectable/types' {
	import React from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type OptionCheckedType = 'on' | 'off' | undefined;
	export interface Option extends CommonProps {
	    /**
	     * Must be unique across items (todo: fix this)
	     */
	    label: string;
	    /**
	     * Leave off to indicate not selected,
	     * 'on' to indicate inclusion and
	     * 'off' to indicate exclusion
	     */
	    checked?: OptionCheckedType;
	    disabled?: boolean;
	    /**
	     * Set to true to indicate object is just a grouping label, not a selectable item
	     */
	    isGroupLabel?: boolean;
	    /**
	     * Node to add between the selection icon and the label
	     */
	    prepend?: React.ReactNode;
	    /**
	     * Node to add to the far right of the item
	     */
	    append?: React.ReactNode;
	    ref?: (optionIndex: number) => void;
	}

}
declare module '@elastic/eui/src/components/selectable/matching_options' {
	import { Option } from '@elastic/eui/src/components/selectable/types';
	export const getMatchingOptions: (options: Option[], searchValue: string, isPreFiltered?: boolean | undefined, selectedOptions?: Option[] | undefined) => Option[];

}
declare module '@elastic/eui/src/components/selectable/selectable_search/selectable_search' {
	import { Component, InputHTMLAttributes } from 'react';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	import { Option } from '@elastic/eui/src/components/selectable/types';
	import { EuiFieldSearchProps } from '@elastic/eui';
	export type EuiSelectableSearchProps = Omit<InputHTMLAttributes<HTMLInputElement> & EuiFieldSearchProps, 'onChange'> & CommonProps & {
	    /**
	     * Passes back (matchingOptions, searchValue)
	     */
	    onChange?: (matchingOptions: Option[], searchValue: string) => void;
	    options: Option[];
	    defaultValue: string;
	};
	export interface EuiSelectableSearchState {
	    searchValue: string;
	}
	export class EuiSelectableSearch extends Component<EuiSelectableSearchProps, EuiSelectableSearchState> {
	    static defaultProps: {
	        defaultValue: string;
	    };
	    constructor(props: EuiSelectableSearchProps);
	    componentDidMount(): void;
	    onSearchChange: (value: string) => void;
	    passUpMatches: (matches: Option[], searchValue: string) => void;
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src/components/selectable/selectable_search' {
	export { EuiSelectableSearch } from '@elastic/eui/src/components/selectable/selectable_search/selectable_search';

}
declare module '@elastic/eui/src/components/text/text_color' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const colorsToClassNameMap: {
	    default: string;
	    subdued: string;
	    secondary: string;
	    accent: string;
	    danger: string;
	    warning: string;
	    ghost: string;
	};
	export type TextColor = keyof typeof colorsToClassNameMap;
	export const COLORS: ("default" | "secondary" | "accent" | "warning" | "danger" | "subdued" | "ghost")[]; type Props = CommonProps & HTMLAttributes<HTMLDivElement> & HTMLAttributes<HTMLSpanElement> & {
	    color?: TextColor;
	    /**
	     * Determines the root element
	     */
	    component?: 'div' | 'span';
	};
	export const EuiTextColor: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/text/text_align' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export const alignmentToClassNameMap: {
	    left: string;
	    right: string;
	    center: string;
	};
	export type TextAlignment = keyof typeof alignmentToClassNameMap;
	export const ALIGNMENTS: ("center" | "left" | "right")[]; type Props = CommonProps & HTMLAttributes<HTMLDivElement> & {
	    textAlign?: TextAlignment;
	};
	export const EuiTextAlign: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/text/text' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	import { TextColor } from '@elastic/eui/src/components/text/text_color';
	import { TextAlignment } from '@elastic/eui/src/components/text/text_align'; const textSizeToClassNameMap: {
	    xs: string;
	    s: string;
	    m: string;
	};
	export type TextSize = keyof typeof textSizeToClassNameMap;
	export const TEXT_SIZES: ("s" | "m" | "xs")[]; type Props = CommonProps & Omit<HTMLAttributes<HTMLDivElement>, 'color'> & {
	    textAlign?: TextAlignment;
	    size?: TextSize;
	    color?: TextColor;
	    grow?: boolean;
	};
	export const EuiText: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui' {
	export { EuiText } from '@elastic/eui/src/components/text/text';
	export { EuiTextColor } from '@elastic/eui/src/components/text/text_color';
	export { EuiTextAlign } from '@elastic/eui/src/components/text/text_align';

}
declare module '@elastic/eui/src/components/selectable/selectable_message/selectable_message' {
	import React, { HTMLAttributes } from 'react';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	export type EuiSelectableMessageProps = Omit<HTMLAttributes<HTMLDivElement>, 'color'> & CommonProps & {};
	export const EuiSelectableMessage: React.FunctionComponent<EuiSelectableMessageProps>;

}
declare module '@elastic/eui/src/components/selectable/selectable_message' {
	export { EuiSelectableMessage } from '@elastic/eui/src/components/selectable/selectable_message/selectable_message';

}
declare module '@elastic/eui/src/components/selectable/selectable_list/selectable_list_item' {
	import React, { Component, ButtonHTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { OptionCheckedType } from '@elastic/eui/src/components/selectable/types';
	export type EuiSelectableListItemProps = ButtonHTMLAttributes<HTMLButtonElement> & CommonProps & {
	    children?: React.ReactNode;
	    /**
	     * Applies an icon and visual styling to activated items
	     */
	    checked?: OptionCheckedType;
	    /**
	     * Shows icons based on `checked` type
	     */
	    showIcons: boolean;
	    /**
	     * Highlights the item for pseudo focus
	     */
	    isFocused?: boolean;
	    disabled?: boolean;
	    prepend?: React.ReactNode;
	    append?: React.ReactNode;
	};
	export class EuiSelectableListItem extends Component<EuiSelectableListItemProps> {
	    static defaultProps: {
	        showIcons: boolean;
	    };
	    constructor(props: EuiSelectableListItemProps);
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src/components/selectable/selectable_list/selectable_list' {
	import { Component, HTMLAttributes, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { ListProps } from 'react-virtualized';
	import { Option } from '@elastic/eui/src/components/selectable/types';
	export type EuiSelectableSingleOptionProps = 'always' | boolean;
	export type EuiSelectableOptionsListProps = HTMLAttributes<HTMLDivElement> & CommonProps & {
	    /**
	     * The index of the option to be highlighted as pseudo-focused;
	     * Good for use when only one selection is allowed and needing to open
	     * directly to that option
	     */
	    activeOptionIndex?: number;
	    /**
	     *  The height of each option in pixels. Defaults to `32`
	     */
	    rowHeight: number;
	    /**
	     * Show the check/cross selection indicator icons
	     */
	    showIcons?: boolean;
	    singleSelection?: EuiSelectableSingleOptionProps;
	    /**
	     * Any props to send specifically to the react-virtualized `List`
	     */
	    virtualizedProps?: ListProps;
	    /**
	     * Adds a border around the list to indicate the bounds;
	     * Useful when the list scrolls, otherwise use your own container
	     */
	    bordered?: boolean;
	};
	export type EuiSelectableListProps = EuiSelectableOptionsListProps & {
	    /**
	     * All possible options
	     */
	    options: Option[];
	    /**
	     * Filtered options list (if applicable)
	     */
	    visibleOptions?: Option[];
	    /**
	     * Search value to highlight on the option render
	     */
	    searchValue: string;
	    /**
	     * Returns the array of options with altered checked state
	     */
	    onOptionClick: (options: Option[]) => void;
	    /**
	     * Custom render for the label portion of the option;
	     * Takes (option, searchValue), returns ReactNode
	     */
	    renderOption?: (option: Option, searchValue: string) => ReactNode;
	    /**
	     * Sets the max height in pixels or pass `full` to allow
	     * the whole group to fill the height of its container and
	     * allows the list grow as well
	     */
	    height?: number | 'full';
	    /**
	     * Allow cycling through the on, off and undefined state of option.checked
	     * and not just on and undefined
	     */
	    allowExclusions?: boolean;
	    rootId?: (appendix?: string) => string;
	};
	export class EuiSelectableList extends Component<EuiSelectableListProps> {
	    static defaultProps: {
	        rowHeight: number;
	        searchValue: string;
	    };
	    rootId: (suffix?: string | undefined) => string;
	    constructor(props: EuiSelectableListProps);
	    render(): JSX.Element;
	    onAddOrRemoveOption: (option: Option) => void;
	    private onAddOption;
	    private onRemoveOption;
	    private onExcludeOption;
	}

}
declare module '@elastic/eui/src/components/selectable/selectable_list' {
	export { EuiSelectableList } from '@elastic/eui/src/components/selectable/selectable_list/selectable_list';
	export { EuiSelectableListItem } from '@elastic/eui/src/components/selectable/selectable_list/selectable_list_item';

}
declare module '@elastic/eui/src/components/selectable/selectable' {
	import { Component, HTMLAttributes, ReactNode, ReactElement } from 'react';
	import { CommonProps, Omit, ExclusiveUnion } from '@elastic/eui/src/components/common';
	import { EuiSelectableSearch } from '@elastic/eui/src/components/selectable/selectable_search';
	import { EuiSelectableMessage } from '@elastic/eui/src/components/selectable/selectable_message';
	import { EuiSelectableList } from '@elastic/eui/src/components/selectable/selectable_list';
	import { Option } from '@elastic/eui/src/components/selectable/types';
	import { EuiSelectableOptionsListProps, EuiSelectableSingleOptionProps } from '@elastic/eui/src/components/selectable/selectable_list/selectable_list'; type RequiredEuiSelectableOptionsListProps = Omit<EuiSelectableOptionsListProps, keyof typeof EuiSelectableList['defaultProps']>; type OptionalEuiSelectableOptionsListProps = Omit<EuiSelectableOptionsListProps, keyof RequiredEuiSelectableOptionsListProps>; type EuiSelectableOptionsListPropsWithDefaults = RequiredEuiSelectableOptionsListProps & Partial<OptionalEuiSelectableOptionsListProps>; type EuiSelectableSearchableProps = ExclusiveUnion<{
	    searchable?: false;
	}, {
	    /**
	     * Hooks up a search box to filter the list
	     */
	    searchable: true;
	    /**
	     * Passes props down to the `EuiFieldSearch`
	     */
	    searchProps?: {};
	}>;
	export type EuiSelectableProps = Omit<HTMLAttributes<HTMLDivElement>, 'children' | 'onChange'> & CommonProps & EuiSelectableSearchableProps & {
	    /**
	     * Function that takes the `list` node and then
	     * the `search` node (if `searchable` is applied)
	     */
	    children?: (list: ReactElement<typeof EuiSelectableMessage | typeof EuiSelectableList>, search: ReactElement<EuiSelectableSearch> | undefined) => ReactNode;
	    /**
	     * Array or Option objects, see docs for props
	     */
	    options: Option[];
	    /**
	     * Passes back the altered `options` array with selected options as
	     */
	    onChange?: (options: Option[]) => void;
	    /**
	     * Sets the single selection policy of
	     * `false`: allows multiple selection
	     * `true`: only allows one selection
	     * `always`: can and must have only one selection
	     */
	    singleSelection?: EuiSelectableSingleOptionProps;
	    /**
	     * Allows marking options as checked = 'off' as well as 'on'
	     */
	    allowExclusions?: boolean;
	    /**
	     * Show an loading indicator while you load and hook up your data
	     */
	    isLoading?: boolean;
	    /**
	     * Sets the max height in pixels or pass `full` to allow
	     * the whole group to fill the height of its container and
	     * allows the list grow as well
	     */
	    height?: number | 'full';
	    /**
	     * See `EuiSelectableList`
	     */
	    listProps?: EuiSelectableOptionsListPropsWithDefaults;
	    /**
	     * Custom render function for each option.
	     * Returns (option, searchValue)
	     */
	    renderOption?: (option: Option, searchValue: string) => {};
	};
	export interface EuiSelectableState {
	    activeOptionIndex?: number;
	    searchValue: string;
	    visibleOptions: Option[];
	}
	export class EuiSelectable extends Component<EuiSelectableProps, EuiSelectableState> {
	    static defaultProps: {
	        options: never[];
	        singleSelection: boolean;
	    };
	    private optionsListRef;
	    constructor(props: EuiSelectableProps);
	    hasActiveOption: () => boolean;
	    onKeyDown: (e: any) => void;
	    incrementActiveOptionIndex: (amount: number) => void;
	    clearActiveOption: () => void;
	    onSearchChange: (visibleOptions: Option[], searchValue: string) => void;
	    onContainerBlur: () => void;
	    onOptionClick: (options: Option[]) => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui' {
	export { EuiSelectable } from '@elastic/eui/src/components/selectable/selectable';
	export { EuiSelectableList, EuiSelectableListItem } from '@elastic/eui/src/components/selectable/selectable_list';
	export { EuiSelectableMessage } from '@elastic/eui/src/components/selectable/selectable_message';
	export { EuiSelectableSearch } from '@elastic/eui/src/components/selectable/selectable_search';

}
declare module '@elastic/eui/src/components/selectable/selectable.test' {
	export {};

}
declare module '@elastic/eui/src/components/selectable/selectable_list/selectable_list.test' {
	export {};

}
declare module '@elastic/eui/src/components/selectable/selectable_list/selectable_list_item.test' {
	export {};

}
declare module '@elastic/eui/src/components/selectable/selectable_message/selectable_message.test' {
	export {};

}
declare module '@elastic/eui/src/components/selectable/selectable_search/selectable_search.test' {
	export {};

}
declare module '@elastic/eui/src/components/spacer/spacer' {
	import React, { HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const sizeToClassNameMap: {
	    xs: string;
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	    xxl: string;
	};
	export const SIZES: string[];
	export type SpacerSize = keyof typeof sizeToClassNameMap;
	export type EuiSpacerProps = HTMLAttributes<HTMLDivElement> & CommonProps & {
	    size?: SpacerSize;
	};
	export const EuiSpacer: React.FunctionComponent<EuiSpacerProps>;
	export {};

}
declare module '@elastic/eui' {
	export { EuiSpacer } from '@elastic/eui/src/components/spacer/spacer';

}
declare module '@elastic/eui/src/components/spacer/spacer.test' {
	export {};

}
declare module '@elastic/eui/src/components/stat/stat' {
	import { HTMLAttributes, FunctionComponent, ReactNode } from 'react';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	import { EuiTitleSize } from '@elastic/eui/src/components/title/title'; const colorToClassNameMap: {
	    default: null;
	    subdued: string;
	    primary: string;
	    secondary: string;
	    danger: string;
	    accent: string;
	};
	export const COLORS: ("default" | "primary" | "secondary" | "accent" | "danger" | "subdued")[]; const textAlignToClassNameMap: {
	    left: string;
	    center: string;
	    right: string;
	};
	export const ALIGNMENTS: ("center" | "left" | "right")[];
	export interface EuiStatProps {
	    /**
	     * Set the description (label) text
	     */
	    description: ReactNode;
	    /**
	     * Will hide the title with an animation until false
	     */
	    isLoading?: boolean;
	    /**
	     * Flips the order of the description and title
	     */
	    reverse?: boolean;
	    textAlign?: keyof typeof textAlignToClassNameMap;
	    /**
	     * The (value) text
	     */
	    title: ReactNode;
	    /**
	     * The color of the title text
	     */
	    titleColor?: keyof typeof colorToClassNameMap;
	    /**
	     * Size of the title. See EuiTitle for options ('s', 'm', 'l'... etc)
	     */
	    titleSize?: EuiTitleSize;
	}
	export const EuiStat: FunctionComponent<CommonProps & Omit<HTMLAttributes<HTMLDivElement>, 'title'> & EuiStatProps>;
	export {};

}
declare module '@elastic/eui' {
	export { EuiStat } from '@elastic/eui/src/components/stat/stat';

}
declare module '@elastic/eui/src/components/stat/stat.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiTitle } from '@elastic/eui/src/components/title/title';

}
declare module '@elastic/eui/src/components/steps/step_number' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export const STATUS: ("warning" | "danger" | "disabled" | "incomplete" | "complete")[];
	export type EuiStepStatus = 'complete' | 'incomplete' | 'warning' | 'danger' | 'disabled';
	export interface EuiStepNumberProps {
	    /**
	     * May replace the number provided in props.number with alternate styling
	     */
	    status?: EuiStepStatus;
	    number?: number;
	    /**
	     * Uses a border and removes the step number
	     */
	    isHollow?: boolean;
	}
	export const EuiStepNumber: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement> & EuiStepNumberProps>;

}
declare module '@elastic/eui/src/components/steps/step' {
	import { FunctionComponent, HTMLAttributes, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiStepStatus } from '@elastic/eui/src/components/steps/step_number';
	export interface EuiStepProps {
	    children: ReactNode;
	    /**
	     * The HTML tag used for the title
	     */
	    headingElement?: string;
	    /**
	     * The number of the step in the list of steps
	     */
	    step?: number;
	    title: string;
	    /**
	     * May replace the number provided in props.step with alternate styling.
	     */
	    status?: EuiStepStatus;
	}
	export type StandaloneEuiStepProps = CommonProps & HTMLAttributes<HTMLDivElement> & EuiStepProps;
	export const EuiStep: FunctionComponent<StandaloneEuiStepProps>;

}
declare module '@elastic/eui/src/components/steps/steps' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	import { StandaloneEuiStepProps } from '@elastic/eui/src/components/steps/step';
	export type EuiContainedStepProps = Omit<StandaloneEuiStepProps, 'step'>;
	export interface EuiStepsProps {
	    /**
	     * An array of `EuiStep` objects excluding the `step` prop
	     */
	    steps: EuiContainedStepProps[];
	    /**
	     * The number the steps should begin from
	     */
	    firstStepNumber?: number;
	    /**
	     * The HTML tag used for the title
	     */
	    headingElement?: string;
	}
	export const EuiSteps: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement> & EuiStepsProps>;

}
declare module '@elastic/eui/src/components/steps/sub_steps' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiSubStepsProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps>;
	export const EuiSubSteps: EuiSubStepsProps;

}
declare module '@elastic/eui/src/components/steps/step_horizontal' {
	import { FunctionComponent, HTMLAttributes, MouseEventHandler } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiStepStatus } from '@elastic/eui/src/components/steps/step_number';
	export interface EuiStepHorizontalProps {
	    /**
	     * Is the current step
	     */
	    isSelected?: boolean;
	    /**
	     * Is a previous step that has been completed
	     */
	    isComplete?: boolean;
	    onClick: MouseEventHandler<HTMLDivElement>;
	    disabled?: boolean;
	    /**
	     * The number of the step in the list of steps
	     */
	    step?: number;
	    title?: string;
	    /**
	     * May replace the number provided in props.step with alternate styling.
	     * The `isSelected`, `isComplete`, and `disabled` props will override these.
	     */
	    status?: EuiStepStatus;
	}
	export const EuiStepHorizontal: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement> & EuiStepHorizontalProps>;

}
declare module '@elastic/eui/src/components/steps/steps_horizontal' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	import { EuiStepHorizontalProps } from '@elastic/eui/src/components/steps/step_horizontal'; type ContainedEuiStepHorizontalProps = Omit<EuiStepHorizontalProps, 'step'>;
	export interface EuiStepsHorizontalProps {
	    /**
	     * An array of `EuiStepHorizontal` objects excluding the `step` prop
	     */
	    steps: ContainedEuiStepHorizontalProps[];
	}
	export const EuiStepsHorizontal: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement> & EuiStepsHorizontalProps>;
	export {};

}
declare module '@elastic/eui' {
	export { EuiStep } from '@elastic/eui/src/components/steps/step';
	export { EuiSteps } from '@elastic/eui/src/components/steps/steps';
	export { EuiSubSteps } from '@elastic/eui/src/components/steps/sub_steps';
	export { EuiStepsHorizontal } from '@elastic/eui/src/components/steps/steps_horizontal';
	export { EuiStepStatus } from '@elastic/eui/src/components/steps/step_number';

}
declare module '@elastic/eui/src/components/steps/step.test' {
	export {};

}
declare module '@elastic/eui/src/components/steps/step_horizontal.test' {
	export {};

}
declare module '@elastic/eui/src/components/steps/step_number.test' {
	export {};

}
declare module '@elastic/eui/src/components/steps/steps.test' {
	export {};

}
declare module '@elastic/eui/src/components/steps/steps_horizontal.test' {
	export {};

}
declare module '@elastic/eui/src/components/steps/sub_steps.test' {
	export {};

}
declare module '@elastic/eui/src/components/table/table' {
	import { FunctionComponent, TableHTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type Props = {
	    compressed?: boolean;
	    responsive?: boolean;
	} & CommonProps & TableHTMLAttributes<HTMLTableElement>;
	export const EuiTable: FunctionComponent<Props>;

}
declare module '@elastic/eui/src/components/table/table_body' {
	import { FunctionComponent, Ref } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; type Props = CommonProps & {
	    bodyRef?: Ref<HTMLTableSectionElement>;
	};
	export const EuiTableBody: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/table/table_footer' {
	import { FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export const EuiTableFooter: FunctionComponent<CommonProps>;

}
declare module '@elastic/eui/src/components/table/table_footer_cell' {
	import { FunctionComponent, TdHTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { HorizontalAlignment } from '@elastic/eui'; type Props = CommonProps & TdHTMLAttributes<HTMLTableCellElement> & {
	    align?: HorizontalAlignment;
	};
	export const EuiTableFooterCell: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/table/table_header' {
	import { FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export const EuiTableHeader: FunctionComponent<CommonProps>;

}
declare module '@elastic/eui/src/components/table/table_header_button' {
	import { ButtonHTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui'; type Props = CommonProps & ButtonHTMLAttributes<HTMLButtonElement> & {
	    iconType?: IconType;
	};
	export const EuiTableHeaderButton: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/table/table_header_cell' {
	import { FunctionComponent, ThHTMLAttributes } from 'react';
	import { CommonProps, NoArgCallback } from '@elastic/eui/src/components/common';
	import { HorizontalAlignment } from '@elastic/eui';
	export type TableHeaderCellScope = 'col' | 'row' | 'colgroup' | 'rowgroup'; type Props = CommonProps & ThHTMLAttributes<HTMLTableHeaderCellElement> & {
	    align?: HorizontalAlignment;
	    /**
	     * Set `allowNeutralSort` on EuiInMemoryTable to false to force column
	     * sorting.  EuiBasicTable always forces column sorting.
	     */
	    allowNeutralSort?: boolean;
	    /**
	     * _DEPRECATED: use `mobileOptions.show = false`_ Indicates if the
	     * column should not show for mobile users (typically hidden because a
	     * custom mobile header utilizes the column's contents)
	     */
	    hideForMobile?: boolean;
	    /**
	     * _DEPRECATED: use `mobileOptions.only = true`_ Indicates if the
	     * column was created to be the row's heading in mobile view (this
	     * column will be hidden at larger screens)
	     */
	    isMobileHeader?: boolean;
	    isSortAscending?: boolean;
	    isSorted?: boolean;
	    /**
	     * Mobile options for displaying differently at small screens
	     */
	    mobileOptions?: {
	        /**
	         * If false, will not render the column at all for mobile
	         */
	        show?: boolean;
	        /**
	         * Only show for mobile? If true, will not render the column at all
	         * for desktop
	         */
	        only?: boolean;
	    };
	    onSort?: NoArgCallback<void>;
	    scope?: TableHeaderCellScope;
	};
	export const EuiTableHeaderCell: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/table/table_header_cell_checkbox' {
	import { FunctionComponent, ThHTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiTableHeaderCellCheckboxScope = 'col' | 'row' | 'colgroup' | 'rowgroup';
	export interface EuiTableHeaderCellCheckboxProps {
	    width?: string;
	    scope?: EuiTableHeaderCellCheckboxScope;
	}
	export const EuiTableHeaderCellCheckbox: FunctionComponent<CommonProps & ThHTMLAttributes<HTMLTableHeaderCellElement> & EuiTableHeaderCellCheckboxProps>;

}
declare module '@elastic/eui/src/components/table/table_pagination/table_pagination' {
	import { Component } from 'react';
	export type PageChangeHandler = (pageIndex: number) => void;
	export type ItemsPerPageChangeHandler = (pageSize: number) => void;
	export interface Props {
	    activePage?: number;
	    hidePerPageOptions?: boolean;
	    itemsPerPage?: number;
	    itemsPerPageOptions?: number[];
	    onChangeItemsPerPage?: ItemsPerPageChangeHandler;
	    onChangePage?: PageChangeHandler;
	    pageCount?: number;
	}
	interface State {
	    isPopoverOpen: boolean;
	}
	export class EuiTablePagination extends Component<Props, State> {
	    state: {
	        isPopoverOpen: boolean;
	    };
	    onButtonClick: () => void;
	    closePopover: () => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/table/table_pagination' {
	export { EuiTablePagination } from '@elastic/eui/src/components/table/table_pagination/table_pagination';

}
declare module '@elastic/eui/src/components/table/mobile/table_header_mobile' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export const EuiTableHeaderMobile: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement>>;

}
declare module '@elastic/eui/src/components/table/mobile/table_sort_mobile_item' {
	import { FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	interface Props extends CommonProps {
	    /**
	     * Callback to know when an item has been clicked
	     */
	    onSort?: () => void;
	    /**
	     * Indicates current option is the sorted on column
	     */
	    isSorted?: boolean;
	    /**
	     * Indicates which direction the current column is sorted on
	     */
	    isSortAscending?: boolean;
	    ariaLabel?: string;
	}
	export const EuiTableSortMobileItem: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/table/mobile/table_sort_mobile' {
	import { Component } from 'react';
	import { PopoverAnchorPosition } from '@elastic/eui';
	interface Props {
	    className?: string;
	    anchorPosition?: PopoverAnchorPosition;
	    items?: any[];
	}
	interface State {
	    isPopoverOpen: boolean;
	}
	export class EuiTableSortMobile extends Component<Props, State> {
	    state: {
	        isPopoverOpen: boolean;
	    };
	    onButtonClick: () => void;
	    closePopover: () => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/table/table_row' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	interface EuiTableRowProps {
	    /**
	     * Indicates if the table has a single column of checkboxes for selecting
	     * rows (affects mobile only)
	     */
	    isSelectable?: boolean;
	    /**
	     * Indicates the current row has been selected
	     */
	    isSelected?: boolean;
	    /**
	     * Indicates if the table has a dedicated column for icon-only actions
	     * (affects mobile only)
	     */
	    hasActions?: boolean;
	    /**
	     * Indicates if the row will have an expanded row
	     */
	    isExpandable?: boolean;
	    /**
	     * Indicates if the row will be the expanded row
	     */
	    isExpandedRow?: boolean;
	} type Props = CommonProps & HTMLAttributes<HTMLTableRowElement> & EuiTableRowProps;
	export const EuiTableRow: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/table/table_row_cell' {
	import { FunctionComponent, ReactNode, TdHTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { HorizontalAlignment } from '@elastic/eui';
	interface EuiTableRowCellSharedPropsShape {
	    /**
	     * Horizontal alignment of the text in the cell
	     */
	    align?: HorizontalAlignment;
	    /**
	     * Don't allow line breaks within cells
	     */
	    showOnHover?: boolean;
	    /**
	     * Setting `textOnly` to `false` will break words unnecessarily on FF and
	     * IE.  To combat this problem on FF, wrap contents with the css utility
	     * `.eui-textBreakWord`.
	     */
	    textOnly?: boolean;
	    /**
	     * _Should only be used for action cells_
	     */
	    truncateText?: boolean;
	}
	interface EuiTableRowCellMobileOptionsShape {
	    /**
	     * If false, will not render the cell at all for mobile
	     */
	    show?: boolean;
	    /**
	     * Only show for mobile? If true, will not render the column at all for desktop
	     */
	    only?: boolean;
	    /**
	     * Custom render/children if different from desktop
	     */
	    render?: ReactNode;
	    /**
	     * The column's header for use in mobile view (automatically passed down
	     * when using `EuiBasicTable`).
	     * Or pass `false` to not show a header at all.
	     */
	    header?: ReactNode | boolean;
	    /**
	     * Increase text size compared to rest of cells
	     */
	    enlarge?: boolean;
	    /**
	     * Allocates 100% of the width of the container in mobile view
	     * (typically cells are contained to 50%)
	     */
	    fullWidth?: boolean;
	}
	interface EuiTableRowCellProps {
	    /**
	     * Indicates if the column is dedicated to icon-only actions (currently
	     * affects mobile only)
	     */
	    hasActions?: boolean;
	    /**
	     * _DEPRECATED: use `mobileOptions.header`_
	     * The column's header title for use in mobile view (will be added as a
	     * data-attr)
	     */
	    header?: string;
	    /**
	     * _DEPRECATED: use `mobileOptions.show = false`_
	     * Indicates if the column should not show for mobile users (typically
	     * hidden because a custom mobile header utilizes the column's contents)
	     */
	    hideForMobile?: boolean;
	    /**
	     * Indicates if the column is dedicated as the expandable row toggle
	     */
	    isExpander?: boolean;
	    /**
	     * _DEPRECATED: use `mobileOptions.fullWidth`_
	     * Allocates 100% of the width of the container in mobile view
	     * (typically cells are contained to 50%)
	     */
	    isMobileFullWidth?: boolean;
	    /**
	     * _DEPRECATED: use `mobileOptions.only = true & mobileOptions.header = * false`_
	     * Indicates if the column was created to be the row's heading in mobile
	     * view.  It won't display column's header inline and it the column will
	     * be hidden at larger screens)
	     */
	    isMobileHeader?: boolean;
	    /**
	     * Mobile options for displaying differently at small screens
	     */
	    mobileOptions?: EuiTableRowCellMobileOptionsShape & EuiTableRowCellSharedPropsShape;
	} type Props = CommonProps & TdHTMLAttributes<HTMLTableCellElement> & EuiTableRowCellSharedPropsShape & EuiTableRowCellProps;
	export const EuiTableRowCell: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/table/table_row_cell_checkbox' {
	import { FunctionComponent, TdHTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export const EuiTableRowCellCheckbox: FunctionComponent<CommonProps & TdHTMLAttributes<HTMLTableCellElement>>;

}
declare module '@elastic/eui' {
	export { EuiTable, Props as EuiTableProps } from '@elastic/eui/src/components/table/table';
	export { EuiTableBody } from '@elastic/eui/src/components/table/table_body';
	export { EuiTableFooter } from '@elastic/eui/src/components/table/table_footer';
	export { EuiTableFooterCell } from '@elastic/eui/src/components/table/table_footer_cell';
	export { EuiTableHeader } from '@elastic/eui/src/components/table/table_header';
	export { EuiTableHeaderButton } from '@elastic/eui/src/components/table/table_header_button';
	export { EuiTableHeaderCell } from '@elastic/eui/src/components/table/table_header_cell';
	export { EuiTableHeaderCellCheckbox } from '@elastic/eui/src/components/table/table_header_cell_checkbox';
	export { EuiTablePagination } from '@elastic/eui/src/components/table/table_pagination';
	export { EuiTableHeaderMobile } from '@elastic/eui/src/components/table/mobile/table_header_mobile';
	export { EuiTableSortMobile } from '@elastic/eui/src/components/table/mobile/table_sort_mobile';
	export { EuiTableSortMobileItem } from '@elastic/eui/src/components/table/mobile/table_sort_mobile_item';
	export { EuiTableRow } from '@elastic/eui/src/components/table/table_row';
	export { EuiTableRowCell } from '@elastic/eui/src/components/table/table_row_cell';
	export { EuiTableRowCellCheckbox } from '@elastic/eui/src/components/table/table_row_cell_checkbox';

}
declare module '@elastic/eui/src/components/table/table.test' {
	export {};

}
declare module '@elastic/eui/src/components/table/table_footer.test' {
	export {};

}
declare module '@elastic/eui/src/components/table/table_footer_cell.test' {
	export {};

}
declare module '@elastic/eui/src/components/table/table_header.test' {
	export {};

}
declare module '@elastic/eui/src/components/table/table_header_button.test' {
	export {};

}
declare module '@elastic/eui/src/components/table/table_header_cell.test' {
	export {};

}
declare module '@elastic/eui/src/components/table/table_header_cell_checkbox.test' {
	export {};

}
declare module '@elastic/eui/src/components/table/table_row.test' {
	export {};

}
declare module '@elastic/eui/src/components/table/table_row_cell.test' {
	export {};

}
declare module '@elastic/eui/src/components/table/table_row_cell_checkbox.test' {
	export {};

}
declare module '@elastic/eui/src/components/table/mobile' {
	export { EuiTableHeaderMobile } from '@elastic/eui/src/components/table/mobile/table_header_mobile';
	export { EuiTableSortMobile } from '@elastic/eui/src/components/table/mobile/table_sort_mobile';
	export { EuiTableSortMobileItem } from '@elastic/eui/src/components/table/mobile/table_sort_mobile_item';

}
declare module '@elastic/eui/src/components/table/mobile/table_header_mobile.test' {
	export {};

}
declare module '@elastic/eui/src/components/table/mobile/table_sort_mobile.test' {
	export {};

}
declare module '@elastic/eui/src/components/table/mobile/table_sort_mobile_item.test' {
	export {};

}
declare module '@elastic/eui/src/components/table/table_pagination/table_pagination.test' {
	export {};

}
declare module '@elastic/eui/src/components/tabs/tab.test' {
	export {};

}
declare module '@elastic/eui/src/components/text/text.test' {
	export {};

}
declare module '@elastic/eui/src/components/text/text_align.test' {
	export {};

}
declare module '@elastic/eui/src/components/text/text_color.test' {
	export {};

}
declare module '@elastic/eui/src/components/title/title.test' {
	export {};

}
declare module '@elastic/eui/src/services/time/timer' {
	export class Timer {
	    id: any;
	    callback: undefined | (() => void);
	    finishTime: number | undefined;
	    timeRemaining: number | undefined;
	    constructor(callback: () => void, timeMs: number);
	    pause: () => void;
	    resume: () => void;
	    clear: () => void;
	    finish: () => void;
	}

}
declare module '@elastic/eui/src/services/time' {
	export { Timer } from '@elastic/eui/src/services/time/timer';

}
declare module '@elastic/eui/src/components/toast/global_toast_list_item' {
	import { FunctionComponent, ReactElement } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export interface EuiGlobalToastListItemProps {
	    isDismissed?: boolean;
	    children?: ReactElement;
	}
	export const EuiGlobalToastListItem: FunctionComponent<CommonProps & EuiGlobalToastListItemProps>;

}
declare module '@elastic/eui/src/components/toast/toast' {
	import { FunctionComponent, HTMLAttributes, ReactNode } from 'react';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui'; type ToastColor = 'primary' | 'success' | 'warning' | 'danger';
	export const COLORS: import ("@elastic/eui/src/components/form/range/range_levels").EuiRangeLevelColor[];
	export interface EuiToastProps extends CommonProps, Omit<HTMLAttributes<HTMLDivElement>, 'title'> {
	    title?: ReactNode;
	    color?: ToastColor;
	    iconType?: IconType;
	    onClose?: () => void;
	}
	export const EuiToast: FunctionComponent<EuiToastProps>;
	export {};

}
declare module '@elastic/eui/src/components/toast/global_toast_list' {
	import { Component, ReactChild } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { Timer } from '@elastic/eui/src/services/time';
	import { EuiToastProps } from '@elastic/eui/src/components/toast/toast';
	export const TOAST_FADE_OUT_MS = 250;
	export interface Toast extends EuiToastProps {
	    id: string;
	    text?: ReactChild;
	    toastLifeTimeMs?: number;
	}
	export interface EuiGlobalToastListProps extends CommonProps {
	    toasts: Toast[];
	    dismissToast: (this: EuiGlobalToastList, toast: Toast) => void;
	    toastLifeTimeMs: number;
	}
	interface State {
	    toastIdToDismissedMap: {
	        [toastId: string]: boolean;
	    };
	}
	export class EuiGlobalToastList extends Component<EuiGlobalToastListProps, State> {
	    state: State;
	    dismissTimeoutIds: number[];
	    toastIdToTimerMap: {
	        [toastId: string]: Timer;
	    };
	    isScrollingToBottom: boolean;
	    isScrolledToBottom: boolean;
	    isUserInteracting: boolean;
	    isScrollingAnimationFrame: number;
	    startScrollingAnimationFrame: number;
	    listElement: Element | null;
	    static defaultProps: {
	        toasts: never[];
	    };
	    startScrollingToBottom(): void;
	    onMouseEnter: () => void;
	    onMouseLeave: () => void;
	    onScroll: () => void;
	    scheduleAllToastsForDismissal: () => void;
	    scheduleToastForDismissal: (toast: Toast) => void;
	    dismissToast: (toast: Toast) => void;
	    componentDidMount(): void;
	    componentDidUpdate(prevProps: EuiGlobalToastListProps): void;
	    componentWillUnmount(): void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/toast/global_toast_list.test' {
	export {};

}
declare module '@elastic/eui/src/components/toast/global_toast_list_item.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiToast } from '@elastic/eui/src/components/toast/toast';
	export { EuiGlobalToastList, Toast as EuiGlobalToastListToast, } from '@elastic/eui/src/components/toast/global_toast_list';
	export { EuiGlobalToastListItem } from '@elastic/eui/src/components/toast/global_toast_list_item';

}
declare module '@elastic/eui/src/components/toast/toast.test' {
	export {};

}
declare module '@elastic/eui/src/components/toggle/toggle.test' {
	export {};

}
declare module '@elastic/eui/src/components/token/token_map' {
	export type TokenColor = 'tokenTint01' | 'tokenTint02' | 'tokenTint03' | 'tokenTint04' | 'tokenTint05' | 'tokenTint06' | 'tokenTint07' | 'tokenTint08' | 'tokenTint09' | 'tokenTint10' | 'tokenTint11' | 'tokenTint12';
	export type TokenShape = 'circle' | 'square' | 'rectangle';
	export interface EuiTokenMapDisplayOptions {
	    color?: TokenColor;
	    shape?: TokenShape;
	    fill?: boolean;
	    hideBorder?: boolean;
	}
	export type EuiTokenMapType = 'tokenClass' | 'tokenProperty' | 'tokenEnum' | 'tokenVariable' | 'tokenMethod' | 'tokenAnnotation' | 'tokenException' | 'tokenInterface' | 'tokenParameter' | 'tokenField' | 'tokenFunction' | 'tokenElement' | 'tokenBoolean' | 'tokenString' | 'tokenArray' | 'tokenConstant' | 'tokenNumber' | 'tokenObject' | 'tokenEvent' | 'tokenKey' | 'tokenNull' | 'tokenStruct' | 'tokenPackage' | 'tokenOperator' | 'tokenEnumMember' | 'tokenRepo' | 'tokenSymbol' | 'tokenFile' | 'tokenNamespace' | 'tokenModule';
	export const TOKEN_MAP: {
	    [mapType in EuiTokenMapType]: EuiTokenMapDisplayOptions;
	};

}
declare module '@elastic/eui/src/components/token/token' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { IconType } from '@elastic/eui';
	import { EuiTokenMapDisplayOptions, TokenColor, TokenShape } from '@elastic/eui/src/components/token/token_map';
	import { CommonProps } from '@elastic/eui/src/components/common'; type TokenSize = 's' | 'm' | 'l';
	export const SIZES: TokenSize[];
	export const SHAPES: TokenShape[];
	export const COLORS: TokenColor[];
	interface EuiTokenProps {
	    /**
	     * An EUI icon type
	     */
	    iconType: IconType;
	    /**
	     * Size of the token
	     */
	    size?: TokenSize;
	    /**
	     * By default EUI will auto color tokens. You can can however control it
	     * - `color`: can be `tokenTint01` thru `tokenTint10`
	     * - `shape`: square, circle, rectangle as options
	     * - `fill`: makes it a solid color
	     * - `hideBorder`: disables the outer border
	     */
	    displayOptions?: EuiTokenMapDisplayOptions;
	} type Props = CommonProps & EuiTokenProps & HTMLAttributes<HTMLDivElement>;
	export const EuiToken: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui' {
	export { EuiToken, SIZES as TOKEN_SIZES, SHAPES as TOKEN_SHAPES, COLORS as TOKEN_COLORS, } from '@elastic/eui/src/components/token/token';

}
declare module '@elastic/eui/src/components/token/token.test' {
	export {};

}
declare module '@elastic/eui/src/components/tool_tip/icon_tip.test' {
	export {};

}
declare module '@elastic/eui/src/components/tool_tip/tool_tip.test' {
	export {};

}
declare module '@elastic/eui/src/components/tool_tip/tool_tip_popover.test' {
	export {};

}
declare module '@elastic/eui/src/services/random.test' {
	export {};

}
declare module '@elastic/eui/src/services/url.test' {
	export {};

}
declare module '@elastic/eui/src/services/accessibility/html_id_generator.test' {
	export {};

}
declare module '@elastic/eui/src/services/browser/browser' {
	interface IBrowser {
	    isEventSupported: (name: string, element: EventTarget) => boolean;
	}
	export const Browser: Readonly<IBrowser>;
	export {};

}
declare module '@elastic/eui/src/services/browser' {
	export { Browser } from '@elastic/eui/src/services/browser/browser';

}
declare module '@elastic/eui/src/services/color/color_palette.test' {
	export {};

}
declare module '@elastic/eui/src/services/color/hex_to_hsv.test' {
	export {};

}
declare module '@elastic/eui/src/services/color/hex_to_rgb.test' {
	export {};

}
declare module '@elastic/eui/src/services/color/hsv_to_hex.test' {
	export {};

}
declare module '@elastic/eui/src/services/color/hsv_to_rgb.test' {
	export {};

}
declare module '@elastic/eui/src/services/color/is_color_dark.test' {
	export {};

}
declare module '@elastic/eui/src/services/color/is_valid_hex.test' {
	export {};

}
declare module '@elastic/eui/src/services/color/rgb_to_hex.test' {
	export {};

}
declare module '@elastic/eui/src/services/color/rgb_to_hsv.test' {
	export {};

}
declare module '@elastic/eui/src/services/format/format_auto.test' {
	export {};

}
declare module '@elastic/eui/src/services/format/format_boolean.test' {
	export {};

}
declare module '@elastic/eui/src/services/format/format_date.test' {
	export {};

}
declare module '@elastic/eui/src/services/format/format_number.test' {
	export {};

}
declare module '@elastic/eui/src/services/format/format_text.test' {
	export {};

}
declare module '@elastic/eui/src/services/number/number.test' {
	export {};

}
declare module '@elastic/eui/src/services/paging/pager.test' {
	export {};

}
declare module '@elastic/eui/src/services/popover/popover_positioning.test' {
	export {};

}
declare module '@elastic/eui/src/services/predicate/common_predicates.test' {
	export {};

}
declare module '@elastic/eui/src/services/security/get_secure_rel_for_target.test' {
	export {};

}
declare module '@elastic/eui/src/services/sort/comparators.test' {
	export {};

}
declare module '@elastic/eui/src/services/sort/sortable_properties.test' {
	export {};

}
declare module '@elastic/eui/src/services/string/to_case.test' {
	export {};

}
declare module '@elastic/eui/src/services/string/to_initials.test' {
	export {};

}
declare module '@elastic/eui/src/services/time/timer.test' {
	export {};

}
declare module '@elastic/eui/src/services/window_event/window_event.test' {
	export {};

}
declare module '@elastic/eui/src/test/patch_random' {
	export function patchRandom(): void;
	export function unpatchRandom(): void;

}
declare module '@elastic/eui/src/test/time_execution' {
	export function timeExecution(fn: () => void): number;
	export function benchmarkFunction(fn: () => void, warmupRuns?: number, benchmarkRuns?: number): number;

}
declare module '@elastic/eui/src/themes/charts/themes' {
	import { PartialTheme, GridLineConfig, LineAnnotationStyle } from '@elastic/charts';
	export interface EuiChartThemeType {
	    gridHorizontalSettings: GridLineConfig;
	    gridVerticalSettings: GridLineConfig;
	    lineAnnotation: LineAnnotationStyle;
	    theme: PartialTheme;
	}
	export const EUI_CHARTS_THEME_LIGHT: EuiChartThemeType;
	export const EUI_CHARTS_THEME_DARK: EuiChartThemeType;
	export const EUI_SPARKLINE_THEME_PARTIAL: PartialTheme;

}
declare module '@elastic/eui/src/utils/prop_types/is' {
	export const is: <T>(expectedValue: any) => {
	    (props: T, propName: keyof T, componentName: string): Error | null;
	    isRequired(props: T, propName: keyof T, componentName: string): Error | null;
	};

}
declare module '@elastic/eui/src/utils/prop_types/with_required_prop' {
	/**
	 * PropType validation that, if the property is present,
	 * validates against a proptype and verifies that another property exists
	 *
	 * example:
	 * ExampleComponent.propTypes = {
	 *   items: PropTypes.array,
	 *   itemId: withRequiredProp(PropTypes.string, 'items', 'itemId is required to extract the ID from an item')
	 * }
	 *
	 * this validator warns if ExampleComponent is passed an `items` prop but not `itemId`
	 */
	export const withRequiredProp: (proptype: any, requiredPropName: string, messageDescription?: string | undefined) => (...args: any[]) => any;

}
declare module '@elastic/eui/src/utils/prop_types' {
	export const EuiPropTypes: {
	    is: <T>(expectedValue: any) => {
	        (props: T, propName: keyof T, componentName: string): Error | null;
	        isRequired(props: T, propName: keyof T, componentName: string): Error | null;
	    };
	    withRequiredProp: (proptype: any, requiredPropName: string, messageDescription?: string | undefined) => (...args: any[]) => any;
	};

}
declare module '@elastic/eui' {
	export * from '@elastic/eui/src/utils/prop_types';

}
declare module '@elastic/eui/src/utils/prop_types/with_required_prop.test' {
	export {};

}
declare module '@elastic/eui/src-docs/src/services/string/pseudo_locale_translator' {
	export function translateUsingPseudoLocale(message: string): string;

}
declare module '@elastic/eui/src-docs/src/views/accessibility/screen_reader' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/badge/notification_badge' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/expression/colors' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/expression/stringing' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/flex/component_span' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/flex/direction' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/flex/flex_grid' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/flex/flex_grid_column_first' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/flex/flex_grid_columns' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/flex/flex_group' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/flex/flex_group_wrap' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/flex/flex_grow_numeric' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/flex/flex_grow_zero' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/flex/flex_gutter' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/flex/flex_items' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/flex/flex_nest' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/flex/flex_responsive' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/horizontal_rule/horizontal_rule' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/horizontal_rule/horizontal_rule_margin' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/loading/loading_chart' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/loading/loading_content' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/loading/loading_kibana' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/loading/loading_spinner' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/selectable/data' {
	export const Options: ({
	    label: string;
	    'data-test-subj': string;
	    disabled?: undefined;
	    checked?: undefined;
	} | {
	    label: string;
	    disabled: boolean;
	    'data-test-subj'?: undefined;
	    checked?: undefined;
	} | {
	    label: string;
	    checked: string;
	    'data-test-subj'?: undefined;
	    disabled?: undefined;
	} | {
	    label: string;
	    'data-test-subj'?: undefined;
	    disabled?: undefined;
	    checked?: undefined;
	})[];

}
declare module '@elastic/eui/src-docs/src/views/selectable/selectable' {
	import { Component } from 'react';
	import { Option } from '@elastic/eui/src/components/selectable/types';
	export default class extends Component<{}, {
	    options: Option[];
	}> {
	    constructor(props: any);
	    onChange: (options: Option[]) => void;
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src-docs/src/views/selectable/selectable_exclusion' {
	import { Component } from 'react';
	import { Option } from '@elastic/eui/src/components/selectable/types';
	export default class extends Component<{}, {
	    options: Option[];
	}> {
	    constructor(props: any);
	    onChange: (options: Option[]) => void;
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src-docs/src/views/selectable/selectable_search' {
	import { Component } from 'react';
	import { Option } from '@elastic/eui/src/components/selectable/types';
	export default class extends Component<{}, {
	    options: Option[];
	}> {
	    constructor(props: any);
	    onChange: (options: Option[]) => void;
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src-docs/src/views/selectable/selectable_single' {
	import { Component } from 'react';
	import { Option } from '@elastic/eui/src/components/selectable/types';
	export default class extends Component<{}, {
	    options: Option[];
	}> {
	    constructor(props: any);
	    onChange: (options: Option[]) => void;
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src-docs/src/views/spacer/spacer' {
	 const _default: () => JSX.Element;
	export default _default;

}
