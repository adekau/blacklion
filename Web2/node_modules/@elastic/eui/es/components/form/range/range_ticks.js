function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React from 'react';
import PropTypes from "prop-types";
import classNames from 'classnames';
import find from 'lodash/find';
import { useInnerText } from '../../inner_text';
export var EuiRangeTicks = function EuiRangeTicks(_ref) {
  var disabled = _ref.disabled,
      onChange = _ref.onChange,
      ticks = _ref.ticks,
      tickSequence = _ref.tickSequence,
      value = _ref.value,
      max = _ref.max,
      min = _ref.min,
      _ref$interval = _ref.interval,
      interval = _ref$interval === void 0 ? 1 : _ref$interval;
  // Calculate the width of each tick mark
  var percentageWidth = interval / (max - min + interval) * 100; // Align with item labels across the range by adding
  // left and right negative margins that is half of the tick marks

  var ticksStyle = !!ticks ? undefined : {
    margin: "0 ".concat(percentageWidth / -2, "%"),
    left: 0,
    right: 0
  };
  return React.createElement("div", {
    className: "euiRangeTicks",
    style: ticksStyle
  }, tickSequence.map(function (tickValue) {
    var tickStyle = {};
    var customTick;

    if (ticks) {
      customTick = find(ticks, function (o) {
        return o.value === tickValue;
      });

      if (customTick) {
        tickStyle.left = "".concat((customTick.value - min) / (max - min) * 100, "%");
      }
    } else {
      tickStyle.width = "".concat(percentageWidth, "%");
    }

    var tickClasses = classNames('euiRangeTick', {
      'euiRangeTick--selected': value === tickValue,
      'euiRangeTick--isCustom': customTick
    });
    var label = customTick ? customTick.label : tickValue;

    var _useInnerText = useInnerText(),
        _useInnerText2 = _slicedToArray(_useInnerText, 2),
        ref = _useInnerText2[0],
        innerText = _useInnerText2[1];

    return React.createElement("button", {
      type: "button",
      className: tickClasses,
      key: tickValue,
      value: tickValue,
      disabled: disabled,
      onClick: onChange,
      style: tickStyle,
      tabIndex: -1,
      ref: ref,
      title: typeof label === 'string' ? label : innerText
    }, label);
  }));
};
EuiRangeTicks.propTypes = {
  ticks: PropTypes.arrayOf(PropTypes.shape({
    value: PropTypes.number.isRequired,
    label: PropTypes.node.isRequired
  }).isRequired),
  tickSequence: PropTypes.arrayOf(PropTypes.number.isRequired).isRequired,
  value: PropTypes.oneOfType([PropTypes.number.isRequired, PropTypes.string.isRequired, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.number.isRequired]).isRequired).isRequired]),
  min: PropTypes.number.isRequired,
  max: PropTypes.number.isRequired,
  interval: PropTypes.number,
  disabled: PropTypes.bool,
  onChange: PropTypes.func
};
EuiRangeTicks.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "EuiRangeTicks",
  "props": {
    "interval": {
      "defaultValue": {
        "value": "1",
        "computed": false
      },
      "type": {
        "name": "number"
      },
      "required": false,
      "description": ""
    },
    "ticks": {
      "type": {
        "name": "arrayOf",
        "value": {
          "name": "shape",
          "value": {
            "value": {
              "name": "number",
              "required": true
            },
            "label": {
              "name": "node",
              "required": true
            }
          }
        }
      },
      "required": false,
      "description": ""
    },
    "tickSequence": {
      "type": {
        "name": "arrayOf",
        "value": {
          "name": "number"
        }
      },
      "required": true,
      "description": ""
    },
    "value": {
      "type": {
        "name": "union",
        "value": [{
          "name": "number"
        }, {
          "name": "string"
        }, {
          "name": "arrayOf",
          "value": {
            "name": "union",
            "value": [{
              "name": "string"
            }, {
              "name": "number"
            }]
          }
        }]
      },
      "required": false,
      "description": ""
    },
    "min": {
      "type": {
        "name": "number"
      },
      "required": true,
      "description": ""
    },
    "max": {
      "type": {
        "name": "number"
      },
      "required": true,
      "description": ""
    },
    "disabled": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "onChange": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    }
  }
};