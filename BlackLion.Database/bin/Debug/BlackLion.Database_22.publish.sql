/*
Deployment script for BlackLion

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "BlackLion"
:setvar DefaultFilePrefix "BlackLion"
:setvar DefaultDataPath "E:\SQLServer2017\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "E:\SQLServer2017\MSSQL14.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping [Items].[UpdateConsumableDetail]...';


GO
DROP PROCEDURE [Items].[UpdateConsumableDetail];


GO
PRINT N'Dropping [Items].[ConsumableDetail]...';


GO
DROP TYPE [Items].[ConsumableDetail];


GO
PRINT N'Creating [Items].[ConsumableDetail]...';


GO
CREATE TYPE [Items].[ConsumableDetail] AS TABLE (
    [Type]           VARCHAR (100) NULL,
    [Description]    VARCHAR (MAX) NULL,
    [DurationMs]     INT           NULL,
    [UnlockType]     VARCHAR (100) NULL,
    [ColorId]        INT           NULL,
    [RecipeId]       INT           NULL,
    [ExtraRecipeIds] VARCHAR (MAX) NULL,
    [GuildUpgradeId] INT           NULL,
    [ApplyCount]     INT           NULL,
    [Name]           VARCHAR (100) NULL,
    [Icon]           VARCHAR (255) NULL,
    [SkinIds]        VARCHAR (MAX) NULL);


GO
PRINT N'Creating [Items].[ArmorDetail]...';


GO
CREATE TYPE [Items].[ArmorDetail] AS TABLE (
    [Type]                  VARCHAR (100) NULL,
    [WeightClass]           VARCHAR (100) NULL,
    [Defense]               INT           NULL,
    [InfixUpgradeId]        INT           NULL,
    [SuffixItemId]          INT           NULL,
    [SecondarySuffixItemId] INT           NULL,
    [StatChoices]           VARCHAR (MAX) NULL);


GO
PRINT N'Creating [Items].[InfixUpgrade]...';


GO
CREATE TYPE [Items].[InfixUpgrade] AS TABLE (
    [ItemStatId] INT NULL,
    [BuffId]     INT NULL);


GO
PRINT N'Creating [Items].[UpdateConsumableDetail]...';


GO
CREATE PROCEDURE [Items].[UpdateConsumableDetail]
	@Table [Items].[ConsumableDetail] READONLY,
	@Id INT OUTPUT
	WITH EXECUTE AS CALLER
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @ConsumableId INT = null

	MERGE [Items].[ConsumableDetail] T
	USING @Table S
	ON T.[Type] = S.[Type]
		AND T.[Name] = S.[Name]
		AND T.ApplyCount = S.ApplyCount
		AND T.DurationMs = S.DurationMs
	WHEN MATCHED THEN
		UPDATE SET @ConsumableId = T.Id
	WHEN NOT MATCHED THEN
		INSERT VALUES (S.[Type], S.[Description], S.DurationMs, S.UnlockType, S.ColorId, S.RecipeId, S.ExtraRecipeIds, S.GuildUpgradeId,
		S.ApplyCount, S.[Name], S.Icon, S.SkinIds);
	
	If @ConsumableId IS NULL
		SET @ConsumableId = SCOPE_IDENTITY()

	SELECT TOP 0 * INTO #Details FROM Items.Detail
	INSERT #Details (
		ArmorDetailId,
		BackItemDetailId,
		BagDetailId,
		ConsumableDetailId,
		ContainerDetailId,
		GatheringToolDetailId,
		GizmoDetailId
	) VALUES (
		NULL,
		NULL,
		NULL,
		@ConsumableId,
		NULL,
		NULL,
		NULL
	)

	MERGE [Items].[Detail] T
	USING #Details S
	ON T.ConsumableDetailId = S.ConsumableDetailId
	WHEN MATCHED THEN
		UPDATE SET @Id = T.Id
	WHEN NOT MATCHED THEN
		INSERT VALUES (
			S.ArmorDetailId,
			S.BackItemDetailId,
			S.BagDetailId,
			S.ConsumableDetailId,
			S.ContainerDetailId,
			S.GatheringToolDetailId,
			S.GizmoDetailId
		);

	IF @Id IS NULL
		SET @Id = SCOPE_IDENTITY()

	RETURN @Id;
END
GO
PRINT N'Creating [Items].[UpdateArmorDetail]...';


GO
CREATE PROCEDURE [Items].[UpdateArmorDetail]
	@Table [Items].[ArmorDetail] READONLY,
	@Id INT OUTPUT
	WITH EXECUTE AS CALLER
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @ArmorId INT = null

	MERGE [Items].[ArmorDetail] T
	USING @Table S
	ON T.[Type] = S.[Type]
		AND T.ArmorClass = S.ArmorClass
	WHEN MATCHED THEN
		UPDATE SET @ArmorId = T.Id
	WHEN NOT MATCHED THEN
		INSERT VALUES (S.[Type], S.WeightClass, S.Defense, S.InfixUpgradeId, S.SuffixItemId, S.SecondarySuffixItemId, S.StatChoices);
	
	If @ArmorId IS NULL
		SET @ArmorId = SCOPE_IDENTITY()

	SELECT TOP 0 * INTO #Details FROM Items.Detail
	INSERT #Details (
		ArmorDetailId,
		BackItemDetailId,
		BagDetailId,
		ConsumableDetailId,
		ContainerDetailId,
		GatheringToolDetailId,
		GizmoDetailId
	) VALUES (
		@ArmorId,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL
	)

	MERGE [Items].[Detail] T
	USING #Details S
	ON T.ArmorDetailId = S.ArmorDetailId
	WHEN MATCHED THEN
		UPDATE SET @Id = T.Id
	WHEN NOT MATCHED THEN
		INSERT VALUES (
			S.ArmorDetailId,
			S.BackItemDetailId,
			S.BagDetailId,
			S.ConsumableDetailId,
			S.ContainerDetailId,
			S.GatheringToolDetailId,
			S.GizmoDetailId
		);

	IF @Id IS NULL
		SET @Id = SCOPE_IDENTITY()

	RETURN @Id;
END
GO
PRINT N'Creating [Items].[UpdateInfixUpgrade]...';


GO
CREATE PROCEDURE [Items].[UpdateInfixUpgrade]
	@Table [Items].[InfixUpgrade] READONLY,
	@Id INT OUTPUT
	WITH EXECUTE AS CALLER
AS
BEGIN
	SET NOCOUNT ON;

	MERGE [Items].[InfixUpgrade] T
	USING @Table S
	ON T.ItemStatId = S.ItemStatId
		AND T.BuffId = S.BuffId
	WHEN MATCHED THEN
		UPDATE SET @Id = T.Id
	WHEN NOT MATCHED THEN
		INSERT VALUES (S.ItemStatId, S.BuffId);
	
	IF @Id IS NULL
		SET @Id = SCOPE_IDENTITY()

	RETURN @Id;
END
GO
PRINT N'Update complete.';


GO
